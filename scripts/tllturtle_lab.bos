#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, gate1, gate2, foot1, foot2, pad, nano1, nano2, nano3, nano4;

static-var  spray, Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, bAmphibious;

// Signal definitions
#define SIG_ACTIVATE	2

setSFXoccupy(state)
{
	bAmphibious = state;
}

deactivatescr()
{	
	turn gate1 to y-axis <0.000000> speed <25.000000>;
	turn gate1 to z-axis <0.000000> speed <25.000000>;
	turn gate2 to y-axis <0.000000> speed <25.000000>;
	turn gate2 to z-axis <0.000000> speed <25.000000>;
	
	turn foot1 to x-axis <0.000000> speed <25.000000>;
	turn foot1 to y-axis <0.000000> speed <25.000000>;
	turn foot1 to z-axis <0.000000> speed <25.000000>;
	
	turn foot2 to x-axis <0.000000> speed <25.000000>;
	turn foot2 to y-axis <0.000000> speed <25.000000>;
	turn foot2 to z-axis <0.000000> speed <25.000000>;
	
	move foot1 to x-axis [0.000000] speed [10.000000];
	move foot1 to y-axis [0.000000] speed [10.000000];
	move foot2 to x-axis [0.000000] speed [10.000000];
	move foot2 to y-axis [0.000000] speed [10.000000];
	
	sleep 1500;
	
	turn gate1 to x-axis <0.000000> speed <25.000000>;
	turn gate2 to x-axis <0.000000> speed <25.000000>;
	wait-for-turn gate1 around x-axis;
	
	move gate1 to y-axis [0.0000000] speed [2.000000];
	move gate2 to y-axis [0.000000] speed [2.000000];

}

activatescr()
{
		
	//get PRINT(bAmphibious);
	if (bAmphibious == 2)
	{
	
		turn gate1 to y-axis <-45.000000> speed <25.000000>;
		turn gate2 to y-axis <45.000000> speed <25.000000>;
		wait-for-turn gate1 around x-axis;			
	
	}
	else
	{
		move gate1 to y-axis [2.5000000] speed [2.000000];
		move gate2 to y-axis [2.500000] speed [2.000000];
		turn gate1 to x-axis <-75.000000> speed <25.000000>;
		turn gate2 to x-axis <-75.000000> speed <25.000000>;
		wait-for-turn gate1 around x-axis;
		
		turn gate1 to y-axis <-75.000000> speed <25.000000>;
		turn gate2 to y-axis <75.000000> speed <25.000000>;
		turn gate1 to z-axis <-75.000000> speed <25.000000>;
		turn gate2 to z-axis <75.000000> speed <25.000000>;
	}
	
	turn foot1 to x-axis <-30.000000> speed <25.000000>;
	turn foot1 to y-axis <-30.000000> speed <25.000000>;
	turn foot1 to z-axis <-90.000000> speed <25.000000>;
		
	turn foot2 to x-axis <-30.000000> speed <25.000000>;
	turn foot2 to y-axis <30.000000> speed <25.000000>;
	turn foot2 to z-axis <90.000000> speed <25.000000>;
		
	move foot1 to x-axis [0.000000] speed [10.000000];
	move foot1 to y-axis [0.000000] speed [10.000000];
				
	sleep 1500;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	Static_Var_4 = 0;
}


Create()
{
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_1 = 0;
	Static_Var_4 = 0;
	bAmphibious = 0;
	start-script SmokeUnit();
	set ARMORED to 1;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = nano1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = nano2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = nano3;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = nano4;
	}
	++Static_Var_1;
	if( Static_Var_1 >= 4 )
	{
		Static_Var_1 = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	
}

StopBuilding()
{
	
}


QueryBuildInfo(piecenum)
{
	piecenum = pad;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode gate1 type NOHEATCLOUD;
		explode gate2 type NOHEATCLOUD;
		explode foot1 type NOHEATCLOUD;
		explode foot2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode gate1 type NOHEATCLOUD;
		explode gate2 type NOHEATCLOUD;
		explode foot1 type NOHEATCLOUD;
		explode foot2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode gate1 type NOHEATCLOUD;
	explode gate2 type NOHEATCLOUD;
	explode foot1 type NOHEATCLOUD;
	explode foot2 type NOHEATCLOUD;
	return (corpsetype);
}
