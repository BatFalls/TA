#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wheel1, loader, turret, launcher, rocket1, rocket2, rocket3,
       rocket4, rocket5, rocket6, wheel2, wheel3, wheel4, door1, door2;

static-var  gun_1, Static_Launch, Static_Reload, Static_TimetoReload;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	spin wheel1 around x-axis speed <80.> accelerate <15.>;
	spin wheel2 around x-axis speed <80.> accelerate <15.>;
	spin wheel3 around x-axis speed <80.> accelerate <15.>;
	spin wheel4 around x-axis speed <80.> accelerate <15.>;
}

StopMoving()
{
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
	stop-spin wheel3 around x-axis;
	stop-spin wheel4 around x-axis;
}

Create()
{

	gun_1 = 0;
	Static_Reload = 0;
	Static_Launch = 0;
	Static_TimetoReload = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	Static_Launch = 0;
	turn turret to y-axis <0.> speed <120.>;
	wait-for-turn turret around y-axis;
	turn launcher to x-axis <0.> speed <90.>;
	wait-for-turn launcher around x-axis;
	move loader to y-axis [0.] speed [10.];
	sleep 1000;
	move door1 to y-axis [0.] speed [30.];
	move door2 to y-axis [0.] speed [30.];
	wait-for-move door2 along y-axis;
	turn door1 to z-axis <0.> speed <60.>;
	turn door2 to z-axis <0.> speed <60.>;
	wait-for-turn door2 around z-axis;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rocket1;
	}
	if( gun_1 == 1)
	{
		piecenum = rocket2;
	}
	if( gun_1 == 2 )
	{
		piecenum = rocket3;
	}
	if( gun_1 == 3 )
	{
		piecenum = rocket4;
	}
	if( gun_1 == 4 )
	{
		piecenum = rocket5;
	}
	if( gun_1 == 5 )
	{
		piecenum = rocket6;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	
	turn door1 to z-axis <90.> speed <60.>;
	turn door2 to z-axis <-90.> speed <60.>;
	wait-for-turn door2 around z-axis;
	move door1 to y-axis [-7.] speed [30.];
	move door2 to y-axis [-7.] speed [30.];
	sleep 200;
	move loader to y-axis [6.] speed [12.];
	wait-for-move loader along y-axis;
	
	turn turret to y-axis heading speed <50.>;
	turn launcher to x-axis <0.> - pitch speed <30.>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


Reload(function_Var_1)
{
	if (function_Var_1 == 1)
	{
		sleep 5000;
		show rocket4;
		sleep 1000;
		show rocket5;
		sleep 1000;
		show rocket6;
	}
	if (function_Var_1 == 2)
	{
		sleep 5000;
		show rocket1;
		sleep 1000;
		show rocket2;
		sleep 1000;
		show rocket3;
	}
}

FirePrimary()
{
	if (gun_1 == 0)
	{
		start-script Reload(1);
		hide rocket1;
		sleep 900;
		gun_1 = 1;
		hide rocket2;
		sleep 900;
		gun_1 = 2;
		hide rocket3;
		sleep 900;
		gun_1 = 3;
		return 0;
	}
	if (gun_1 == 3)
	{
		start-script Reload(2);
		hide rocket4;
		sleep 900;
		gun_1 = 4;
		hide rocket5;
		sleep 900;
		gun_1 = 5;
		hide rocket6;
		sleep 900;
		gun_1 = 0;
		return 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode wheel1 type NOHEATCLOUD;
		explode loader type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD;
		explode wheel2 type NOHEATCLOUD;
		explode wheel3 type NOHEATCLOUD;
		explode wheel4 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode wheel1 type NOHEATCLOUD | SHATTER;
		explode loader type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode launcher type NOHEATCLOUD | SHATTER;
		explode wheel2 type NOHEATCLOUD | SHATTER;
		explode wheel3 type NOHEATCLOUD | SHATTER;
		explode wheel4 type NOHEATCLOUD | SHATTER;
		explode door1 type NOHEATCLOUD | SHATTER;
		explode door2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode loader type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode launcher type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wheel4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
