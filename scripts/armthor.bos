#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, rlightturret, llightturret, lcrawl, rcrawl, rminicrawl, lminicrawl, lgun, rgun, 
		llightsleeve, rlightsleeve, rflare, lflare, rlightflare, llightflare, rsleeves, lsleeves;

static-var  restore_delay, gun_1, gun_2, Main_Gun_Heading, minigun;

// Signal definitions
#define SIG_AIM_1				2
#define SIG_AIM_2				4
#define SIG_AIM_3				8
#define SIG_AIM_4				16

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	//start-script Decelerate();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide rflare;
	hide lflare;
	minigun = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	Main_Gun_Heading = 0;
	restore_delay = 4000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 500;
	spin rgun around z-axis speed <500.0> accelerate <-100.0>;
	spin lgun around z-axis speed <500.0> accelerate <-100.0>;
	
	sleep 350;
	spin rgun around z-axis speed <350.0> accelerate <-75.0>;
	spin lgun around z-axis speed <350.0> accelerate <-75.0>;
	
	sleep 250;
	spin rgun around z-axis speed <100.0> accelerate <-50.0>;
	spin lgun around z-axis speed <100.0> accelerate <-50.0>;
	
	sleep 200;
	spin rgun around z-axis speed <0.0> accelerate <-25.0>;
	spin lgun around z-axis speed <0.0> accelerate <-25.0>;
	
	sleep restore_delay;
	turn rsleeves to x-axis <0.000000> speed <15.000000>;
	turn lsleeves to x-axis <0.000000> speed <15.000000>;
	turn turret to y-axis <0.000000> speed <60.000000>;
}

Restore3()
{
	sleep restore_delay / 2;
	turn rlightsleeve to x-axis <0.000000> speed <60.000000>;
	turn rlightturret to y-axis <0.000000> speed <60.000000>;
}

Restore4()
{
	sleep restore_delay / 2;
	turn llightsleeve to x-axis <0.000000> speed <60.000000>;
	turn llightturret to y-axis <0.000000> speed <60.000000>;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	minigun = FALSE;
	turn turret to y-axis heading speed <90.000000>;
	turn rsleeves to x-axis <0.000000> - pitch speed <45.000000>;
	Main_Gun_Heading = heading;
	wait-for-turn turret around y-axis;
	wait-for-turn rsleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn lsleeves to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn lsleeves around x-axis;
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	//get PRINT(Main_Gun_Heading, heading, 37500 - Main_Gun_Heading);
	// ~32500 angle = 180°
	
	// Angle Y Limitation
	if (Main_Gun_Heading > 0)
	{
		if (heading > 0)
		{
			if (heading > Main_Gun_Heading + 5000)
			{
				return (0);
			}
		}
		if (heading < 0)
		{
			if (heading < Main_Gun_Heading - 37500)
			{
				return (0);
			}
		}
	}
	
	if (Main_Gun_Heading < 0)
	{
		if (heading < 0)
		{
			if (heading > Main_Gun_Heading + 5000)
			{
				return (0);
			}
		}
		if (heading > 0)
		{
			if (heading < 27500 + Main_Gun_Heading)
			{
				return (0);
			}
		}

	}
	
	// Pitch Orientation
	if  (Main_Gun_Heading > 0)
	{
		if (heading > 0)
		{
			if (heading > 16250 + Main_Gun_Heading)
			{
				turn rlightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn rlightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
		}
		if (heading < 0)
		{
			if (heading < Main_Gun_Heading - 16250)
			{
				turn rlightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn rlightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
		}
	}
	
	if  (Main_Gun_Heading < 0)
	{
		if (heading < 0)
		{
			if (heading < -16250 + Main_Gun_Heading)
			{
				turn rlightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn rlightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
			
		}
		if (heading > 0)
		{
			if (heading > 16250 + Main_Gun_Heading )
			{
				turn rlightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn rlightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}			
		}
	}
	
	turn rlightturret to y-axis heading - Main_Gun_Heading speed <120.000000>;	 
	wait-for-turn turret around y-axis;
	wait-for-turn rlightturret around y-axis;
	wait-for-turn rlightsleeve around x-axis;
	start-script Restore3();
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	
	//get PRINT(Main_Gun_Heading, heading, 27500 + Main_Gun_Heading);
	// ~32500 angle = 180°
	
	// Angle Y Limitation
	if  (Main_Gun_Heading > 0)
	{
		if (heading > 0)
		{
			if (heading < Main_Gun_Heading - 5000)
			{
				return (0);
			}
		}
		if (heading < 0)
		{
			if (heading > Main_Gun_Heading - 27500)
			{
				return (0);
			}
		}
	}
	
	if  (Main_Gun_Heading < 0)
	{
		if (heading < 0)
		{
			if (heading < Main_Gun_Heading - 5000)
			{
				return (0);
			}
		}
		if (heading > 0)
		{
			if (heading > 37500 + Main_Gun_Heading)
			{
				return (0);
			}
		}

	}
	
	// Pitch Orientation
	if  (Main_Gun_Heading > 0)
	{
		if (heading > 0)
		{
			if (heading > 16250 + Main_Gun_Heading)
			{
				turn llightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn llightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
		}
		if (heading < 0)
		{
			if (heading < Main_Gun_Heading - 16250)
			{
				turn llightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn llightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
		}
	}
	
	if  (Main_Gun_Heading < 0)
	{
		if (heading < 0)
		{
			if (heading < -16250 - Main_Gun_Heading)
			{
				turn llightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn llightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
			
		}
		if (heading > 0)
		{
			if (heading > Main_Gun_Heading + 16250)
			{
				turn llightsleeve to x-axis <0.000000> + pitch speed <90.000000>;
			}
			else
			{
				turn llightsleeve to x-axis <0.000000> - pitch speed <90.000000>;
			}
			
		}

	}
	
	turn llightturret to y-axis heading - Main_Gun_Heading speed <120.000000>;	 
	wait-for-turn turret around y-axis;
	wait-for-turn llightturret around y-axis;
	wait-for-turn llightsleeve around x-axis;
	start-script Restore4();
	return (1);
}

FireWeapon1()
{
	spin rgun around z-axis speed <750.0>;
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}	
}

FireWeapon2()
{
	spin lgun around z-axis speed <750.0>;
	++gun_2;
	if (gun_2 == 2)
	{
		gun_2 = 0;
	}
}

FireWeapon3()
{
	emit-sfx 1024 + 0 from rlightflare;
	sleep 100;
}
FireWeapon4()
{
	emit-sfx 1024 + 0 from llightflare;
	sleep 100;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

AimFromWeapon3(piecenum)
{
	piecenum = rlightturret;
}

AimFromWeapon4(piecenum)
{
	piecenum = llightturret;
}

QueryWeapon1(piecenum)
{
	piecenum = rflare;

}

QueryWeapon2(piecenum)
{
	piecenum = lflare;
}

QueryWeapon3(piecenum)
{
	piecenum = rlightflare;
}

QueryWeapon4(piecenum)
{
	piecenum = llightflare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide rflare;
	hide lflare;
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode rlightturret type NOHEATCLOUD;
		explode llightturret type NOHEATCLOUD;
		explode lcrawl type NOHEATCLOUD | FALL;
		explode rcrawl type NOHEATCLOUD | FALL;
		explode lminicrawl type NOHEATCLOUD;
		explode rminicrawl type NOHEATCLOUD;

		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode rlightturret type NOHEATCLOUD | FALL;
		explode llightturret type NOHEATCLOUD | FALL;
		explode lcrawl type NOHEATCLOUD | FALL;
		explode rcrawl type NOHEATCLOUD | FALL;
		explode lminicrawl type NOHEATCLOUD | FALL;
		explode rminicrawl type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rlightturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode llightturret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lcrawl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rcrawl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lminicrawl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rminicrawl type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
