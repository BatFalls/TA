#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, emitnano, aim, barrel, arm1, arm2, arm3, arm4, door1, door2, door3, door4, hole;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


Activatescr()
{
	turn arm1 to x-axis <10.000000> speed <75.000000>;
	
	turn arm2 to x-axis <110.000000> speed <150.000000>;
	
	turn arm3 to x-axis <-170.000000> speed <225.000000>;
		
	turn arm4 to x-axis <47.000000> speed <300.000000>;
	
	sleep 750;
	//wait-for-turn arm1 around x-axis;
	//wait-for-turn arm2 around x-axis;
	//wait-for-turn arm3 around x-axis;
	//wait-for-turn arm4 around x-axis;
}

Deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn arm1 to x-axis <0.000000> speed <75.000000>;
	//wait-for-turn arm1 around x-axis;
	
	turn arm2 to x-axis <0.000000> speed <150.000000>;
	//wait-for-turn arm2 around x-axis;
	
	turn arm3 to x-axis <0.000000> speed <225.000000>;
	//wait-for-turn arm3 around x-axis;
	
	turn arm4 to x-axis <0.000000> speed <300.000000>;
	wait-for-turn arm4 around x-axis;
	
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from aim;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
			Static_Var_1 = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
			Static_Var_1 = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 1;

}

Activate()
{
	start-script RequestState(0);
}

Desactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1, Func_Var_2)
{
	start-script RequestState(0);
	while( Static_Var_1 )
	{
		sleep 100;
	}
	signal 4;
	turn aim to y-axis <180.000000> + Func_Var_1 speed <380.>;
	wait-for-turn aim around y-axis;
	
	turn arm4 to x-axis <47.000000> - Func_Var_2 speed <380.>;
	wait-for-turn arm4 around x-axis;
	
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 6000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = emitnano;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = aim;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL;
		explode aim type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL;
		explode aim type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode aim type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode aim type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
