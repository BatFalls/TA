#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8, 
	   turret, sleeves, barrela, barrelb, barrelc, barreld, socle,
       flarea, flareb, flarec, flared, ltur, lslv, lbara, lbarb, lflarea, lflareb, body, base;

static-var  Static_Var_1, gun_1, gun_2, bAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez / <2.000000> speed <105.000000>;
	turn base to x-axis anglex / <2.000000> speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 <= 3 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		dont-cache body;
		sleep 300;
	}
}

StopMoving()
{
	sleep 100;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	bAiming = FALSE;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 2500;
	turn ltur to y-axis <0.000000> speed <75.000000>;
	turn lslv to x-axis <0.000000> speed <50.000000>;
	sleep 2500;
	turn turret to y-axis <0.000000> speed <75.000000>;
	turn sleeves to x-axis <0.000000> speed <50.000000>;
	bAiming = FALSE;
}

QueryPrimary(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = flarea;
	}
	if(gun_1 == 1)
	{
		piecenum = flareb;
	}
	if(gun_1 == 2)
	{
		piecenum = flarec;
	}
	if(gun_1 == 3)
	{
		piecenum = flared;
	}
}

QueryTertiary(piecenum)
{
	if(gun_2 == 0)
	{
		piecenum = lflarea;
	}
	if(gun_2 == 1)
	{
		piecenum = lflareb;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = ltur;
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

FireTertiary()
{
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn ltur to y-axis heading speed <100.000000>;
	turn lslv to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn ltur around y-axis;
	wait-for-turn lslv around x-axis;
	Start-script RestoreAfterDelay();
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode socle type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode ltur type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode socle type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode ltur type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode socle type NOHEATCLOUD;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ltur type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
