#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, beam3, beam4, beam5, beam6, beam7, beam8, 
	   door1, door2, door3, door4, door5, door6, door7, door8,
	   platform1, platform2, platform3, platform4, platform5, platform6, platform7, platform8,
	   nano1, nano2, nano3, nano4, nano5, nano6, nano7, nano8,
	   pivot1, pivot2, pivot3, pivot4, pivot5, pivot6, pivot7, pivot8,
	   angle1, angle2, angle3, angle4, angle5, angle6,
	   arm1, arm2, arm3, arm4, arm5, arm6, 
	   post1, post2, post3, post4, post5, post6,
	   base, body, yard, pad, insides, oops;
	   
static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging; 

// Signal definitions
#define SIG_ACTIVATE			2

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-90.021978> speed <225.054945>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <-90.021978> speed <225.054945>;
		turn door3 to z-axis <0.000000> now;
		turn door3 to z-axis <-90.021978> speed <225.054945>;
		turn door4 to z-axis <0.000000> now;
		turn door4 to z-axis <-90.021978> speed <225.054945>;
		turn door5 to z-axis <0.000000> now;
		turn door5 to z-axis <90.021978> speed <225.054945>;
		turn door6 to z-axis <0.000000> now;
		turn door6 to z-axis <90.021978> speed <225.054945>;
		turn door7 to z-axis <0.000000> now;
		turn door7 to z-axis <90.021978> speed <225.054945>;
		turn door8 to z-axis <0.000000> now;
		turn door8 to z-axis <90.021978> speed <225.054945>;
		sleep 400;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.000000] speed [11.250000];
		move door2 to y-axis [-3.000000] speed [11.249994];
		move door3 to y-axis [-3.000000] speed [11.250000];
		move door4 to y-axis [-3.000000] speed [11.249994];
		move door5 to y-axis [-3.000000] speed [11.250000];
		move door6 to y-axis [-3.000000] speed [11.249994];
		move door7 to y-axis [-3.000000] speed [11.250000];
		move door8 to y-axis [-3.000000] speed [11.249994];
		sleep 400;
	}
	if( TRUE )
	{
		move platform1 to y-axis [9.600000] speed [18.750006];
		move platform2 to y-axis [9.600000] speed [18.749994];
		move platform3 to y-axis [9.600000] speed [18.750006];
		move platform4 to y-axis [9.600000] speed [18.749994];
		move platform5 to y-axis [9.600000] speed [18.750006];
		move platform6 to y-axis [9.600000] speed [18.749994];
		move platform7 to y-axis [9.600000] speed [18.750006];
		move platform8 to y-axis [9.600000] speed [18.749994];
		sleep 400;
	}
	if( TRUE )
	{
		turn nano1 to y-axis <90.021978> speed <225.054945>;
		turn nano2 to y-axis <90.021978> speed <225.054945>;
		turn nano3 to y-axis <90.021978> speed <225.054945>;
		turn nano4 to y-axis <90.021978> speed <225.054945>;
		turn nano5 to y-axis <-90.021978> speed <225.054945>;
		turn nano6 to y-axis <-90.021978> speed <225.054945>;
		turn nano7 to y-axis <-90.021978> speed <225.054945>;
		turn nano8 to y-axis <-90.021978> speed <225.054945>;
		sleep 400;
	}
	sleep 20;
}

deactivatescr()
{
	if( TRUE )
	{
		move platform1 to y-axis [9.600000] now;
		move platform2 to y-axis [9.600000] now;
		move platform3 to y-axis [9.600000] now;
		move platform4 to y-axis [9.600000] now;
		move platform5 to y-axis [9.600000] now;
		move platform6 to y-axis [9.600000] now;
		move platform7 to y-axis [9.600000] now;
		move platform8 to y-axis [9.600000] now;
		
		move door1 to y-axis [-3.000000] now;
		move door2 to y-axis [-3.000000] now;
		move door3 to y-axis [-3.000000] now;
		move door4 to y-axis [-3.000000] now;
		move door5 to y-axis [-3.000000] now;
		move door6 to y-axis [-3.000000] now;
		move door7 to y-axis [-3.000000] now;
		move door8 to y-axis [-3.000000] now;
				
		turn door1 to z-axis <90.021978> now;
		turn door2 to z-axis <90.021978> now;
		turn door3 to z-axis <90.021978> now;
		turn door4 to z-axis <90.021978> now;
		turn door5 to z-axis <-90.021978> now;
		turn door6 to z-axis <-90.021978> now;
		turn door7 to z-axis <-90.021978> now;
		turn door8 to z-axis <-90.021978> now;
		
		turn nano1 to y-axis <90.021978> now;
		turn nano1 to y-axis <0.000000> speed <225.054945>;
		turn nano2 to y-axis <90.021978> now;
		turn nano2 to y-axis <0.000000> speed <225.054945>;
		turn nano3 to y-axis <90.021978> now;
		turn nano3 to y-axis <0.000000> speed <225.054945>;
		turn nano4 to y-axis <90.021978> now;
		turn nano4 to y-axis <0.000000> speed <225.054945>;
		turn nano5 to y-axis <-90.021978> now;
		turn nano5 to y-axis <0.000000> speed <225.054945>;
		turn nano6 to y-axis <-90.021978> now;
		turn nano6 to y-axis <0.000000> speed <225.054945>;
		turn nano7 to y-axis <-90.021978> now;
		turn nano7 to y-axis <0.000000> speed <225.054945>;
		turn nano8 to y-axis <-90.021978> now;
		turn nano8 to y-axis <0.000000> speed <225.054945>;
		
		sleep 400;
	}
	if( TRUE )
	{
		move platform1 to y-axis [0.000000] speed [18.750006];
		move platform2 to y-axis [0.000000] speed [18.749994];
		move platform3 to y-axis [0.000000] speed [18.750006];
		move platform4 to y-axis [0.000000] speed [18.749994];
		move platform5 to y-axis [0.000000] speed [18.750006];
		move platform6 to y-axis [0.000000] speed [18.749994];
		move platform7 to y-axis [0.000000] speed [18.750006];
		move platform8 to y-axis [0.000000] speed [18.749994];
		sleep 400;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [11.250000];
		move door2 to y-axis [0.000000] speed [11.249994];
		move door3 to y-axis [0.000000] speed [11.250000];
		move door4 to y-axis [0.000000] speed [11.249994];
		move door5 to y-axis [0.000000] speed [11.250000];
		move door6 to y-axis [0.000000] speed [11.249994];
		move door7 to y-axis [0.000000] speed [11.250000];
		move door8 to y-axis [0.000000] speed [11.249994];
		sleep 400;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <225.054945>;
		turn door2 to z-axis <0.000000> speed <225.054945>;
		turn door3 to z-axis <0.000000> speed <225.054945>;
		turn door4 to z-axis <0.000000> speed <225.054945>;
		turn door5 to z-axis <0.000000> speed <225.054945>;
		turn door6 to z-axis <0.000000> speed <225.054945>;
		turn door7 to z-axis <0.000000> speed <225.054945>;
		turn door8 to z-axis <0.000000> speed <225.054945>;
		sleep 400;
	}
	sleep 20;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn pivot1 to y-axis <-45> now;
	turn pivot2 to y-axis <-22.5> now;
	turn pivot3 to y-axis <22.5> now;
	turn pivot4 to y-axis <45> now;
	
	turn pivot5 to y-axis <45> now;
	turn pivot6 to y-axis <22.5> now;
	turn pivot7 to y-axis <-22.5> now;
	turn pivot8 to y-axis <-45> now;

	turn angle1 to y-axis <-30> now;
	turn angle3 to y-axis <30> now;
	
	turn angle4 to y-axis <30> now;
	turn angle6 to y-axis <-30> now;

	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray == 1 )
	{
		piecenum = beam2;
	}
	if( spray == 2 )
	{
		piecenum = beam3;
	}
	if( spray == 3 )
	{
		piecenum = beam4;
	}
	if( spray == 4 )
	{
		piecenum = beam5;
	}
	if( spray == 5 )
	{
		piecenum = beam6;
	}
	if( spray == 6 )
	{
		piecenum = beam7;
	}
	if( spray == 7 )
	{
		piecenum = beam8;
	}
	++spray;
	if( spray == 8 )
	{
		spray = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
//	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
//	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode beam1 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode platform1 type NOHEATCLOUD;
		explode platform2 type NOHEATCLOUD;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode beam1 type FALL;
		explode beam2 type FALL;
		explode door1 type FALL;
		explode door2 type FALL;
		explode pad type NOHEATCLOUD;
		explode nano1 type FALL;
		explode nano2 type FALL;
		explode platform1 type FALL;
		explode platform2 type SHATTER;
		return (0);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode pad type NOHEATCLOUD;
	explode nano1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode nano2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode platform1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode platform2 type SHATTER | EXPLODE_ON_HIT;
}
