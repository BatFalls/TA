#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, base, hull, turret, pitchturret, wake1, wake2, barrel1, barrel2, barrel3,
       depthcharge, nosewake1, nosewake2;

static-var  gun_1, restore_delay, bAiming, Static_Var_4, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4

RockZ(Func_Var_1, Func_Var_2)
{
	signal 8;
	set-signal-mask 8;
	Static_Var_5 = Static_Var_5 + Static_Var_4;
	Static_Var_4 = get ABS(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to z-axis Static_Var_5 speed Static_Var_4 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		Static_Var_4 = get ABS(Static_Var_5);
	}
	turn base to z-axis <0.000000> speed <1.500000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = 0;
	restore_delay = 3000;
	Static_Var_5 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <35.000000>;
	turn pitchturret to x-axis <0.000000> speed <15.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.000000> speed <3.000000>;
		move base to y-axis [0.319995] speed [0.319995];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <3.000000>;
		move base to y-axis [0.000000] speed [0.319995];
		wait-for-turn base around x-axis;
		sleep 150;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from nosewake1;
		emit-sfx 2 from nosewake2;
		sleep 150;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <3.000000>;
	move base to y-axis [0.000000] speed [0.319995];
}

AimSecondary(heading, pitch)
{
	return (1);
}

AimFromSecondary(piecenum)
{
	piecenum = depthcharge;
}

QuerySecondary(piecenum)
{
	piecenum = depthcharge;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn pitchturret to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	bAiming = 1;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	start-script RockZ(-9,bAiming);
	if( gun_1 == 0)
	{
		move barrel2 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1)
	{
		move barrel3 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel3 along z-axis;
		move barrel3 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 2)
	{
		move barrel1 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	++gun_1;
	if( gun_1 == 3)
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0)
	{
		piecenum = flare2;
	}
	if( gun_1 == 1)
	{
		piecenum = flare3;
	}
	if( gun_1 == 2)
	{
		piecenum = flare1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode barrel2 type NOHEATCLOUD | FALL;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode hull type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
