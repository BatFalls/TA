#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, plate1, plate2, plate3, land1, land2, land3,
		node, sphere, radar, wake1, wake2, wake3,
		aft, rfloat, lfloat, top, nose,
		anti, shelter, rdoor, ldoor, udoor, ddoor, rocket;
		

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_RADAR			8


RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 202 )
		{
			Func_Var_3 = 227 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.010989>;
			wait-for-turn base around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( !Static_Var_3 )
		{
			show rocket;
			move anti to y-axis [0.0] speed [20.0];
			wait-for-move anti along y-axis;			
			turn udoor to x-axis <-90.> speed <250.>;
			turn ddoor to x-axis <90.> speed <250.>;
			turn ldoor to z-axis <90.> speed <250.>;
			turn rdoor to z-axis <-90.> speed <250.>;
			wait-for-turn udoor around x-axis;
			wait-for-turn ddoor around x-axis;
			wait-for-turn ldoor around z-axis;
			wait-for-turn rdoor around z-axis;
			Static_Var_2 = 12;
			Static_Var_1 = 1;
			currentstate = 0;
		}
		if( Static_Var_3 )
		{
			Static_Var_1 = 0;
			turn udoor to x-axis <0.> speed <45.>;
			turn ddoor to x-axis <0.> speed <45.>;
			turn ldoor to z-axis <0.> speed <45.>;
			turn rdoor to z-axis <0.> speed <45.>;
			wait-for-turn udoor around x-axis;
			wait-for-turn ddoor around x-axis;
			wait-for-turn ldoor around z-axis;
			wait-for-turn rdoor around z-axis;
			move anti to y-axis [-10.0] speed [1.0];
			wait-for-move anti along y-axis;
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 12;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	start-script SmokeUnit();
}

Activate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	move sphere to y-axis [0.] speed [2.];
	sleep 250;
	move sphere to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [2.];
	sleep 250;
	spin node around y-axis speed <90.> accelerate <2.>;
	move node to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [6.];
	sleep 250;
	move node to y-axis [0.] speed [8.];
	sleep 250;
	move node to y-axis [0.] speed [6.];
	sleep 250;
	move node to y-axis [0.] speed [4.];
	sleep 250;
	move node to y-axis [0.] speed [2.];
}

Deactivate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	spin node around y-axis speed <0.> accelerate <-2.>;
	move node to y-axis [-10.] speed [8.];
	sleep 250;
	move node to y-axis [-10.] speed [6.];
	move sphere to y-axis [-12.] speed [4.];
	sleep 250;
	move node to y-axis [-8.] speed [4.];
	sleep 250;
	move node to y-axis [-8.] speed [2.];
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.000000> speed <1.000000>;
		move base to y-axis [0.229999] speed [0.169995];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <1.000000>;
		move base to y-axis [0.000000] speed [0.169995];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 350;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <1.000000>;
	move base to y-axis [0.000000] speed [0.169995];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = land1;
	Func_Var_2 = land2;
	Func_Var_3 = land3;
}

RestoreAfterDelay()
{
	sleep 2500;
	set-signal-mask 0;
	call-script RequestState(1);
}

AimPrimary(heading, pitch)
{	
	start-script RequestState(0);

	while( !Static_Var_1 OR Static_Var_4 )
	{
		sleep 50;
		
	}
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide rocket;
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = rocket;
}

AimFromPrimary(piecenum)
{
	piecenum = anti;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode lfloat type NOHEATCLOUD;
		explode rfloat type NOHEATCLOUD;
		explode radar type NOHEATCLOUD;
		explode plate1 type NOHEATCLOUD;
		explode plate2 type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode rfloat type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode lfloat type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode plate1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode plate2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode ldoor type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode rdoor type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode rfloat type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lfloat type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode nose type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ldoor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rdoor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
