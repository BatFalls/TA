#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Base, Body, Door1, Door2, NanoTower1A, NanoTower1B, NanoDoor1, NanoGun1A,
       NanoGun1B, Spray1, NanoGun2A, NanoGun2B, Spray2, NanoTower2A, NanoTower2B, NanoDoor2,
       NanoGun3A, NanoGun3B, Spray3, NanoGun4A, NanoGun4B, Spray4, NanoPad, Nanodoor1b,
       Nanodoor2b, Door1glowy, Door2glowy, Ntow1bglo, Ntow2bglo;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_ACTIVATE			2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from Base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from NanoDoor1;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from NanoGun1A;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from NanoGun4A;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Deactivatescr()
{
	if( Static_Var_1 )
	{
		turn NanoGun1B to z-axis <0.000000> speed <120.000000>;
		turn NanoGun2B to z-axis <0.000000> speed <120.000000>;
		turn NanoGun3B to z-axis <0.000000> speed <120.000000>;
		turn NanoGun4B to z-axis <0.000000> speed <120.000000>;
		wait-for-turn NanoGun4B around z-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoDoor1 to z-axis <85.000000> speed <12.000000>;
		turn NanoDoor2 to z-axis <-85.000000> speed <12.000000>;
		move NanoGun1A to x-axis [0.000000] speed [8.500000];
		move NanoGun2A to x-axis [0.000000] speed [8.500000];
		move NanoGun3A to x-axis [0.000000] speed [8.500000];
		move NanoGun4A to x-axis [0.000000] speed [8.500000];
		move NanoGun1B to x-axis [0.000000] speed [8.000000];
		move NanoGun2B to x-axis [0.000000] speed [8.000000];
		move NanoGun3B to x-axis [0.000000] speed [8.000000];
		move NanoGun4B to x-axis [0.000000] speed [8.000000];
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoDoor1 to z-axis <80.000000> speed <25.000000>;
		turn NanoDoor2 to z-axis <-80.000000> speed <25.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoDoor1 to z-axis <60.000000> speed <40.000000>;
		turn NanoDoor2 to z-axis <-60.000000> speed <40.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoDoor1 to z-axis <0.000000> speed <60.000000>;
		turn NanoDoor2 to z-axis <0.000000> speed <60.000000>;
		wait-for-turn NanoDoor2 around z-axis;
		sleep 400;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-6.000000] speed [1.200000];
		move NanoTower2B to z-axis [-6.000000] speed [1.200000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-5.000000] speed [1.900000];
		move NanoTower2B to z-axis [-5.000000] speed [1.900000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-2.000000] speed [3.000000];
		move NanoTower2B to z-axis [-2.000000] speed [3.000000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-1.000000] speed [2.000000];
		move NanoTower2B to z-axis [-1.000000] speed [2.000000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-0.500000] speed [1.000000];
		move NanoTower2B to z-axis [-0.500000] speed [1.000000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [-0.200000] speed [0.600000];
		move NanoTower2B to z-axis [-0.200000] speed [0.600000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		move NanoTower1B to z-axis [0.000000] speed [0.450000];
		move NanoTower2B to z-axis [0.000000] speed [0.450000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-85.000000> speed <10.000000>;
		turn NanoTower2A to x-axis <-85.000000> speed <10.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-75.000000> speed <22.000000>;
		turn NanoTower2A to x-axis <-75.000000> speed <22.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-50.000000> speed <40.000000>;
		turn NanoTower2A to x-axis <-50.000000> speed <40.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-30.000000> speed <50.000000>;
		turn NanoTower2A to x-axis <-30.000000> speed <50.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-20.000000> speed <40.000000>;
		turn NanoTower2A to x-axis <-20.000000> speed <40.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-15.000000> speed <30.000000>;
		turn NanoTower2A to x-axis <-15.000000> speed <30.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-10.000000> speed <20.000000>;
		turn NanoTower2A to x-axis <-10.000000> speed <20.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-5.000000> speed <12.000000>;
		turn NanoTower2A to x-axis <-5.000000> speed <12.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-2.000000> speed <7.000000>;
		turn NanoTower2A to x-axis <-2.000000> speed <7.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <-1.000000> speed <4.000000>;
		turn NanoTower2A to x-axis <-1.000000> speed <4.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		turn NanoTower1A to x-axis <0.000000> speed <3.500000>;
		turn NanoTower2A to x-axis <0.000000> speed <3.500000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [9.500000] speed [0.800000];
		move Door2 to x-axis [-9.500000] speed [0.800000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [8.500000] speed [1.200000];
		move Door2 to x-axis [-8.500000] speed [1.200000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [7.500000] speed [1.800000];
		move Door2 to x-axis [-7.500000] speed [1.800000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [6.500000] speed [2.400000];
		move Door2 to x-axis [-6.500000] speed [2.400000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [5.000000] speed [3.000000];
		move Door2 to x-axis [-5.000000] speed [3.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [3.000000] speed [3.400000];
		move Door2 to x-axis [-3.000000] speed [3.400000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [2.000000] speed [2.800000];
		move Door2 to x-axis [-2.000000] speed [2.800000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [1.500000] speed [2.000000];
		move Door2 to x-axis [-1.500000] speed [2.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [1.000000] speed [1.500000];
		move Door2 to x-axis [-1.000000] speed [1.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [0.800000] speed [1.000000];
		move Door2 to x-axis [-0.800000] speed [1.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [0.500000] speed [0.700000];
		move Door2 to x-axis [-0.500000] speed [0.700000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [0.300000] speed [0.500000];
		move Door2 to x-axis [-0.300000] speed [0.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [0.150000] speed [0.300000];
		move Door2 to x-axis [-0.150000] speed [0.300000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_1 )
	{
		move Door1 to x-axis [0.000000] speed [0.200000];
		move Door2 to x-axis [0.000000] speed [0.200000];
		wait-for-move Door2 along x-axis;
		cache Ntow1bglo;
		cache NanoDoor1;
		cache NanoGun1A;
		cache NanoGun1A;
		cache NanoGun2A;
		cache NanoGun2B;
		cache Spray1;
		cache Spray2;
		cache Ntow2bglo;
		cache NanoDoor2;
		cache NanoGun3A;
		cache NanoGun3A;
		cache NanoGun4A;
		cache NanoGun4B;
		cache Spray3;
		cache Spray4;
		cache Door1glowy;
		cache Door2glowy;
		cache Nanodoor1b;
		cache Nanodoor2b;
		Static_Var_1 = 0;
		Static_Var_4 = 1;
	}
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Stop()
{
	set-signal-mask SIG_ACTIVATE;
	sleep 16500;
	set INBUILDSTANCE to 0;
	set-signal-mask 0;
	Static_Var_1 = 1;
	Static_Var_3 = 0;
	call-script CloseYard();
	call-script Deactivatescr();
}

Create()
{
	dont-shade Body;
	dont-shade Door1;
	dont-shade Door2;
	dont-shade NanoTower1A;
	dont-shade NanoTower1B;
	dont-shade NanoDoor1;
	dont-shade NanoGun1A;
	dont-shade NanoGun1B;
	dont-shade Spray1;
	dont-shade NanoGun2A;
	dont-shade NanoGun2B;
	dont-shade Spray2;
	dont-shade NanoTower2A;
	dont-shade NanoTower2B;
	dont-shade NanoDoor2;
	dont-shade NanoGun3A;
	dont-shade NanoGun3B;
	dont-shade Spray3;
	dont-shade NanoGun4A;
	dont-shade NanoGun4B;
	dont-shade Spray4;
	dont-shade NanoPad;
	dont-shade Door1glowy;
	dont-shade Door2glowy;
	dont-shade Ntow1bglo;
	dont-shade Ntow2bglo;
	Static_Var_5 = 1;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_6 = 1;
	start-script SmokeUnit();
}

Activatescr()
{
	dont-cache Ntow1bglo;
	dont-cache NanoDoor1;
	dont-cache NanoGun1A;
	dont-cache NanoGun1A;
	dont-cache NanoGun2A;
	dont-cache NanoGun2B;
	dont-cache Spray1;
	dont-cache Spray2;
	dont-cache Ntow2bglo;
	dont-cache NanoDoor2;
	dont-cache NanoGun3A;
	dont-cache NanoGun3A;
	dont-cache NanoGun4A;
	dont-cache NanoGun4B;
	dont-cache Spray3;
	dont-cache Spray4;
	dont-cache Door1glowy;
	dont-cache Door2glowy;
	dont-cache Nanodoor1b;
	dont-cache Nanodoor2b;
	if( Static_Var_2 )
	{
		move Door1 to x-axis [1.000000] speed [1.000000];
		move Door2 to x-axis [-1.000000] speed [1.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [2.000000] speed [2.000000];
		move Door2 to x-axis [-2.000000] speed [2.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [3.000000] speed [3.500000];
		move Door2 to x-axis [-3.000000] speed [3.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [4.000000] speed [4.500000];
		move Door2 to x-axis [-4.000000] speed [4.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [7.000000] speed [5.000000];
		move Door2 to x-axis [-7.000000] speed [5.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [8.500000] speed [3.500000];
		move Door2 to x-axis [-8.500000] speed [3.500000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [9.500000] speed [2.000000];
		move Door2 to x-axis [-9.500000] speed [2.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [10.000000] speed [1.000000];
		move Door2 to x-axis [-10.000000] speed [1.000000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		move Door1 to x-axis [10.400000] speed [0.600000];
		move Door2 to x-axis [-10.400000] speed [0.600000];
		wait-for-move Door2 along x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-4.000000> speed <5.000000>;
		turn NanoTower2A to x-axis <-4.000000> speed <5.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-10.000000> speed <12.000000>;
		turn NanoTower2A to x-axis <-10.000000> speed <12.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-25.000000> speed <22.000000>;
		turn NanoTower2A to x-axis <-25.000000> speed <22.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-40.000000> speed <35.000000>;
		turn NanoTower2A to x-axis <-40.000000> speed <35.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-60.000000> speed <55.000000>;
		turn NanoTower2A to x-axis <-60.000000> speed <55.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-70.000000> speed <60.000000>;
		turn NanoTower2A to x-axis <-70.000000> speed <60.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-80.000000> speed <50.000000>;
		turn NanoTower2A to x-axis <-80.000000> speed <50.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-90.000000> speed <40.000000>;
		turn NanoTower2A to x-axis <-90.000000> speed <40.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-95.000000> speed <25.000000>;
		turn NanoTower2A to x-axis <-95.000000> speed <25.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-98.000000> speed <10.000000>;
		turn NanoTower2A to x-axis <-98.000000> speed <10.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-99.000000> speed <4.000000>;
		turn NanoTower2A to x-axis <-99.000000> speed <4.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-96.000000> speed <12.000000>;
		turn NanoTower2A to x-axis <-96.000000> speed <12.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-90.000000> speed <14.000000>;
		turn NanoTower2A to x-axis <-90.000000> speed <14.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-85.000000> speed <10.000000>;
		turn NanoTower2A to x-axis <-85.000000> speed <10.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-84.000000> speed <5.000000>;
		turn NanoTower2A to x-axis <-84.000000> speed <5.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-88.000000> speed <8.000000>;
		turn NanoTower2A to x-axis <-88.000000> speed <8.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-91.500000> speed <5.000000>;
		turn NanoTower2A to x-axis <-91.500000> speed <5.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoTower1A to x-axis <-90.000000> speed <4.000000>;
		turn NanoTower2A to x-axis <-90.000000> speed <4.000000>;
		wait-for-turn NanoTower2A around x-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-0.900000] speed [1.200000];
		move NanoTower2B to z-axis [-0.900000] speed [1.200000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-2.400000] speed [2.800000];
		move NanoTower2B to z-axis [-2.400000] speed [2.800000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-4.500000] speed [3.900000];
		move NanoTower2B to z-axis [-4.500000] speed [3.900000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-5.000000] speed [2.800000];
		move NanoTower2B to z-axis [-5.000000] speed [2.800000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-6.000000] speed [1.700000];
		move NanoTower2B to z-axis [-6.000000] speed [1.700000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-6.500000] speed [1.000000];
		move NanoTower2B to z-axis [-6.500000] speed [1.000000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		move NanoTower1B to z-axis [-6.600000] speed [0.700000];
		move NanoTower2B to z-axis [-6.600000] speed [0.700000];
		wait-for-move NanoTower2B along z-axis;
	}
	if( Static_Var_2 )
	{
		sleep 500;
	}
	if( Static_Var_2 )
	{
		turn NanoDoor1 to z-axis <80.000000> speed <140.000000>;
		turn NanoDoor2 to z-axis <-80.000000> speed <140.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoDoor1 to z-axis <85.000000> speed <90.000000>;
		turn NanoDoor2 to z-axis <-85.000000> speed <90.000000>;
		move NanoGun1A to x-axis [6.500000] speed [9.500000];
		move NanoGun2A to x-axis [6.500000] speed [9.500000];
		move NanoGun3A to x-axis [-6.500000] speed [9.500000];
		move NanoGun4A to x-axis [-6.500000] speed [9.500000];
		move NanoGun1B to x-axis [5.500000] speed [9.000000];
		move NanoGun2B to x-axis [5.500000] speed [9.000000];
		move NanoGun3B to x-axis [-5.500000] speed [9.000000];
		move NanoGun4B to x-axis [-5.500000] speed [9.000000];
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoDoor1 to z-axis <87.000000> speed <50.000000>;
		turn NanoDoor2 to z-axis <-87.000000> speed <50.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoDoor1 to z-axis <89.000000> speed <30.000000>;
		turn NanoDoor2 to z-axis <-89.000000> speed <30.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoDoor1 to z-axis <90.000000> speed <18.000000>;
		turn NanoDoor2 to z-axis <-90.000000> speed <18.000000>;
		wait-for-turn NanoDoor2 around z-axis;
	}
	if( Static_Var_2 )
	{
		turn NanoGun1B to z-axis <-95.000000> speed <140.000000>;
		turn NanoGun2B to z-axis <-95.000000> speed <140.000000>;
		turn NanoGun3B to z-axis <95.000000> speed <140.000000>;
		turn NanoGun4B to z-axis <95.000000> speed <140.000000>;
		wait-for-turn NanoGun4B around z-axis;
		Static_Var_2 = 0;
		Static_Var_3 = 1;
		start-script Stop();
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	while( Static_Var_2 )
	{
		sleep 1000;
	}
	while( Static_Var_1 )
	{
		sleep 1000;
	}
	if( !Static_Var_3 )
	{
		if( !Static_Var_2 )
		{
			Static_Var_2 = 1;
			call-script Activatescr();
		}
	}
	while( Static_Var_2 )
	{
		sleep 1000;
	}
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

QueryBuildInfo(piecenum)
{
	piecenum = NanoPad;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_6 == 1 )
	{
		piecenum = Spray1;
	}
	if( Static_Var_6 == 2 )
	{
		piecenum = Spray2;
	}
	if( Static_Var_6 == 3 )
	{
		piecenum = Spray3;
	}
	if( Static_Var_6 == 4 )
	{
		piecenum = Spray4;
	}
	++Static_Var_6;
	if( Static_Var_6 > 4 )
	{
		Static_Var_6 = 1;
	}
}

Deactivate()
{
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script Go();
}

StartBuilding()
{
	signal SIG_ACTIVATE;
}

StopBuilding()
{
	start-script Stop();
}

SweetSpot(piecenum)
{
	piecenum = Base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Base type BITMAPONLY | BITMAP1;
		explode Body type BITMAPONLY | BITMAP1;
		explode Door1 type BITMAPONLY | BITMAP1;
		explode Door2 type BITMAPONLY | BITMAP1;
		explode NanoTower1A type BITMAPONLY | BITMAP1;
		explode NanoTower1B type BITMAPONLY | BITMAP1;
		explode NanoDoor1 type BITMAPONLY | BITMAP1;
		explode NanoGun1A type BITMAPONLY | BITMAP1;
		explode NanoGun1B type BITMAPONLY | BITMAP1;
		explode Spray1 type BITMAPONLY | BITMAP1;
		explode NanoGun2A type BITMAPONLY | BITMAP1;
		explode NanoGun2B type BITMAPONLY | BITMAP1;
		explode Spray2 type BITMAPONLY | BITMAP1;
		explode NanoTower2A type BITMAPONLY | BITMAP1;
		explode NanoTower2B type BITMAPONLY | BITMAP1;
		explode NanoDoor2 type BITMAPONLY | BITMAP1;
		explode NanoGun3A type BITMAPONLY | BITMAP1;
		explode NanoGun3B type BITMAPONLY | BITMAP1;
		explode Spray3 type BITMAPONLY | BITMAP1;
		explode NanoGun4A type BITMAPONLY | BITMAP1;
		explode NanoGun4B type BITMAPONLY | BITMAP1;
		explode Spray4 type BITMAPONLY | BITMAP1;
		explode NanoPad type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode Base type SHATTER | BITMAP4;
		explode Body type SHATTER | BITMAP4;
		explode Door1 type SHATTER | BITMAP4;
		explode Door2 type SHATTER | BITMAP4;
		explode NanoTower1A type SHATTER | BITMAP4;
		explode NanoTower1B type SHATTER | BITMAP4;
		explode NanoDoor1 type SHATTER | BITMAP4;
		explode NanoGun1A type SHATTER | BITMAP4;
		explode NanoGun1B type SHATTER | BITMAP4;
		explode Spray1 type SHATTER | BITMAP4;
		explode NanoGun2A type SHATTER | BITMAP4;
		explode NanoGun2B type SHATTER | BITMAP4;
		explode Spray2 type SHATTER | BITMAP4;
		explode NanoTower2A type SHATTER | BITMAP4;
		explode NanoTower2B type SHATTER | BITMAP4;
		explode NanoDoor2 type SHATTER | BITMAP4;
		explode NanoGun3A type SHATTER | BITMAP4;
		explode NanoGun3B type SHATTER | BITMAP4;
		explode Spray3 type SHATTER | BITMAP4;
		explode NanoGun4A type SHATTER | BITMAP4;
		explode NanoGun4B type SHATTER | BITMAP4;
		explode Spray4 type SHATTER | BITMAP4;
		explode NanoPad type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode Base type SHATTER | BITMAP4;
		explode Body type SHATTER | BITMAP4;
		explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoTower1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoTower1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoTower2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoTower2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoDoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun3B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoGun4B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Spray4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode NanoPad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode Base type SHATTER | BITMAP4;
	explode Body type SHATTER | BITMAP4;
	explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoTower1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoTower1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoor1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun1B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoTower2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoTower2B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoDoor2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun3B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoGun4B type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Spray4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode NanoPad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
