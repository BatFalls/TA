#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  Lflare, sleeve, turret, rupleg3, rleg3, rupleg2, rleg2, rupleg1, 
		rleg1, lupleg3, lleg3, lupleg2, lleg2, lupleg1, lleg1, base;

static-var  bMoving, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide Lflare;
	bMoving = FALSE;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <21.000000>;
			turn base to y-axis <0.000000> speed <4.000000>;
			turn rupleg1 to y-axis <25.000000> speed <200.000000>;
			turn rupleg1 to z-axis <0.000000> speed <185.000000>;
			turn rupleg2 to y-axis <-25.000000> speed <150.000000>;
			turn rupleg3 to y-axis <0.000000> speed <180.000000>;
			turn rupleg3 to z-axis <32.500000> speed <90.000000>;
			turn lupleg1 to y-axis <0.000000> speed <200.000000>;
			turn lupleg1 to z-axis <-32.500000> speed <95.000000>;
			turn lupleg2 to y-axis <-25.000000> speed <200.000000>;
			turn lupleg2 to z-axis <0.000000> speed <140.000000>;
			turn lupleg3 to y-axis <25.000000> speed <140.000000>;
			turn rleg1 to z-axis <0.000000> speed <145.000000>;
			turn rleg3 to z-axis <-16.247253> speed <90.000000>;
			turn lleg1 to z-axis <16.247253> speed <90.000000>;
			turn lleg2 to z-axis <0.000000> speed <129.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to y-axis <0.000000> speed <12.000000>;
			turn rupleg1 to y-axis <0.000000> speed <185.000000>;
			turn rupleg2 to y-axis <11.247253> speed <180.000000>;
			turn rupleg2 to z-axis <16.247253> speed <110.000000>;
			turn rupleg3 to y-axis <12.500000> speed <150.000000>;
			turn rupleg3 to z-axis <16.247253> speed <124.000000>;
			turn lupleg1 to y-axis <-12.500000> speed <150.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <115.000000>;
			turn lupleg2 to y-axis <0.000000> speed <185.000000>;
			turn lupleg3 to y-axis <12.500000> speed <150.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <90.000000>;
			turn rleg2 to z-axis <-8.115385> speed <90.000000>;
			turn rleg3 to z-axis <-8.115385> speed <90.000000>;
			turn lleg1 to z-axis <8.115385> speed <90.000000>;
			turn lleg3 to z-axis <8.115385> speed <90.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn rupleg1 to y-axis <-25.000000> speed <185.000000>;
			turn rupleg2 to y-axis <0.000000> speed <185.000000>;
			turn rupleg2 to z-axis <32.500000> speed <90.000000>;
			turn rupleg3 to y-axis <25.000000> speed <175.000000>;
			turn rupleg3 to z-axis <0.000000> speed <185.000000>;
			turn lupleg1 to y-axis <-25.000000> speed <185.000000>;
			turn lupleg1 to z-axis <0.000000> speed <97.000000>;
			turn lupleg2 to y-axis <25.000000> speed <189.000000>;
			turn lupleg3 to y-axis <0.000000> speed <145.000000>;
			turn lupleg3 to z-axis <-32.500000> speed <90.000000>;
			turn rleg2 to z-axis <-16.247253> speed <90.000000>;
			turn rleg3 to z-axis <0.000000> speed <185.000000>;
			turn lleg1 to z-axis <0.000000> speed <185.000000>;
			turn lleg3 to z-axis <16.247253> speed <90.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <8.000000>;
			turn base to y-axis <0.000000> speed <14.000000>;
			turn rupleg1 to y-axis <-12.500000> speed <95.000000>;
			turn rupleg1 to z-axis <16.247253> speed <134.000000>;
			turn rupleg2 to y-axis <12.500000> speed <115.000000>;
			turn rupleg2 to z-axis <16.247253> speed <134.000000>;
			turn rupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg1 to y-axis <0.000000> speed <185.000000>;
			turn lupleg2 to y-axis <12.500000> speed <95.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <134.000000>;
			turn lupleg3 to y-axis <-12.500000> speed <95.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <87.000000>;
			turn rleg1 to z-axis <-8.115385> speed <134.000000>;
			turn rleg2 to z-axis <-8.115385> speed <134.000000>;
			turn lleg2 to z-axis <8.115385> speed <134.000000>;
			turn lleg3 to z-axis <8.115385> speed <134.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <18.000000>;
			turn rupleg1 to y-axis <0.000000> speed <115.000000>;
			turn rupleg1 to z-axis <32.500000> speed <90.000000>;
			turn rupleg2 to y-axis <25.000000> speed <115.000000>;
			turn rupleg2 to z-axis <0.000000> speed <131.000000>;
			turn rupleg3 to y-axis <-25.000000> speed <129.000000>;
			turn lupleg1 to y-axis <25.000000> speed <110.000000>;
			turn lupleg2 to y-axis <0.000000> speed <150.000000>;
			turn lupleg2 to z-axis <-32.500000> speed <67.000000>;
			turn lupleg3 to y-axis <-25.000000> speed <185.000000>;
			turn lupleg3 to z-axis <0.000000> speed <150.000000>;
			turn rleg1 to z-axis <-16.247253> speed <90.000000>;
			turn rleg2 to z-axis <0.000000> speed <110.000000>;
			turn lleg2 to z-axis <16.247253> speed <90.000000>;
			turn lleg3 to z-axis <0.000000> speed <110.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn rupleg1 to y-axis <12.500000> speed <185.000000>;
			turn rupleg1 to z-axis <16.247253> speed <134.000000>;
			turn rupleg2 to y-axis <0.000000> speed <110.000000>;
			turn rupleg3 to y-axis <-12.500000> speed <115.000000>;
			turn rupleg3 to z-axis <16.247253> speed <110.000000>;
			turn lupleg1 to y-axis <12.500000> speed <115.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg2 to y-axis <-12.500000> speed <150.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg3 to y-axis <0.000000> speed <150.000000>;
			turn rleg1 to z-axis <-8.115385> speed <134.000000>;
			turn rleg3 to z-axis <-8.115385> speed <134.000000>;
			turn lleg1 to z-axis <8.115385> speed <134.000000>;
			turn lleg2 to z-axis <8.115385> speed <134.000000>;
			sleep 210;
		}
	}
	turn base to x-axis <0.000000> speed <28.000000>;
	turn base to y-axis <0.000000> speed <4.000000>;
	turn rupleg1 to y-axis <0.000000> speed <150.000000>;
	turn rupleg1 to z-axis <0.000000> speed <124.000000>;
	turn rupleg2 to y-axis <0.000000> speed <150.000000>;
	turn rupleg2 to z-axis <0.000000> speed <124.000000>;
	turn rupleg3 to y-axis <0.000000> speed <150.000000>;
	turn rupleg3 to z-axis <0.000000> speed <124.000000>;
	turn lupleg1 to y-axis <0.000000> speed <150.000000>;
	turn lupleg1 to z-axis <0.000000> speed <124.000000>;
	turn lupleg2 to y-axis <0.000000> speed <150.000000>;
	turn lupleg2 to z-axis <0.000000> speed <124.000000>;
	turn lupleg3 to y-axis <0.000000> speed <150.000000>;
	turn lupleg3 to z-axis <0.000000> speed <124.000000>;
	turn lleg1 to z-axis <0.000000> speed <124.000000>;
	turn lleg2 to z-axis <0.000000> speed <124.000000>;
	turn lleg3 to z-axis <0.000000> speed <124.000000>;
	turn rleg1 to z-axis <0.000000> speed <124.000000>;
	turn rleg2 to z-axis <0.000000> speed <124.000000>;
	turn rleg3 to z-axis <0.000000> speed <124.000000>;
	sleep 210;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <130.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <130.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from Lflare;
	sleep 150;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = Lflare;
}

Killed(severity, corpsetype)
{
	hide Lflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode Lflare type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD;
		explode lleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lupleg1 type NOHEATCLOUD;
		explode lupleg2 type NOHEATCLOUD;
		explode lupleg3 type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode rleg3 type NOHEATCLOUD;
		explode rupleg1 type NOHEATCLOUD;
		explode rupleg2 type NOHEATCLOUD;
		explode rupleg3 type NOHEATCLOUD;

		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeve type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD;
		explode Lflare type NOHEATCLOUD | FALL;
		explode lleg1 type NOHEATCLOUD;
		explode lleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lupleg1 type NOHEATCLOUD;
		explode lupleg2 type NOHEATCLOUD;
		explode lupleg3 type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode rleg3 type NOHEATCLOUD;
		explode rupleg1 type NOHEATCLOUD;
		explode rupleg2 type NOHEATCLOUD;
		explode rupleg3 type NOHEATCLOUD;

		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode Lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lupleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lupleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lupleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rupleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rupleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rupleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;

		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode Lflare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lupleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lupleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lupleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rupleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rupleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rupleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;

	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
