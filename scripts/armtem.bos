#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, 
		turret1, sleeve1a, gun1a, flare1a, sleeve1b, gun1b, flare1b,
		turret2, sleeve2, bit2a, bit2b, flare2a, flare2b,
		wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8; 

static-var  minigun, gun_1, restore_delay, bStating;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn body to z-axis anglez / <1.791209> speed <105.000000>;
	turn body to x-axis anglex / <1.791209> speed <105.000000>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.000000> speed <30.000000>;
	turn body to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( bStating == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		if( bStating == 2 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(state)
{
	bStating = state;
}

Create()
{
	gun_1 = 0;
	minigun = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <75.000000>;
	turn sleeve1a to x-axis <0.000000> speed <50.000000>;
	turn sleeve1b to x-axis <0.000000> speed <50.000000>;
}

RestoreSecondary()
{
	sleep restore_delay / 2;
	turn turret2 to y-axis <0.000000> speed <75.000000>;
	turn sleeve2 to x-axis <0.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <120.000000>;
	turn sleeve1a to x-axis <0.000000> - pitch speed <80.000000>;
	turn sleeve1b to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1a around x-axis;
	wait-for-turn sleeve1b around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( minigun == 0 )
	{
		//emit-sfx 1024 + 0 from flare1a;
		turn gun1a to z-axis <0.000000> now;
		turn gun1a to z-axis <60.000000> speed <225.000000>;
		//sleep 125;
		
	}
	if( minigun == 1 )
	{
		//emit-sfx 1024 + 0 from flare1b;
		turn gun1b to z-axis <0.000000> now;
		turn gun1b to z-axis <60.000000> speed <225.000000>;
		//sleep 125;
		
	}
	++minigun;
	if( minigun == 2 )
	{
		minigun = 0;
	}	
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	if( minigun == 0 )
	{
		piecenum = flare1a;
	}
	if( minigun == 1 )
	{
		piecenum = flare1b;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <150.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}	
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	if(gun_1 == 0) 
	{
		piecenum = flare2a;
	}
	if(gun_1 == 1) 
	{
		piecenum = flare2b;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleeve1a type NOHEATCLOUD;
		explode sleeve1b type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type NOHEATCLOUD | FALL;
		explode turret2 type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD;
		explode sleeve1a type NOHEATCLOUD | FALL;
		explode sleeve1b type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD;
	explode sleeve1a type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeve1b type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
