#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, door1, door2, door3, lside, rside, lengine, launcher, flare,
		wake1, wake2, wake3, wake4, wake5, wake6, thrust1, thrust2;

static-var  Static_Var_1;



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal 4;
	set-signal-mask 4;
	while( TRUE )
	{
		if( Static_Var_1 == 2 or Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
		}
		sleep 300;
	}
}

StopMoving()
{
	signal 4;
	set-signal-mask 4;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 2500;
	move door1 to y-axis [0.00] speed [1.00];
	move door2 to y-axis [0.00] speed [1.00];
	move door3 to y-axis [0.00] speed [1.00];
	move door1 to z-axis [0.00] speed [1.5];
	move door2 to x-axis [0.00] speed [1.00];
	move door3 to x-axis [0.00] speed [1.00];
	move door2 to z-axis [0.00] speed [1.00];
	move door3 to z-axis [0.00] speed [1.00];
}

AimFromPrimary(piecenum)
{
	piecenum = hull;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	
	move door1 to y-axis [0.5] speed [0.50];
	move door2 to y-axis [0.5] speed [0.50];
	move door3 to y-axis [0.5] speed [0.50];
	
	move door1 to z-axis [2.0] speed [0.75];
	
	move door2 to x-axis [-1.25] speed [0.50];
	move door3 to x-axis [1.25] speed [0.50];
	
	move door2 to z-axis [-0.5] speed [0.50];
	move door3 to z-axis [-0.5] speed [0.50];

	wait-for-move door1 along z-axis;
	wait-for-move door2 along z-axis;
	wait-for-move door3 along z-axis;
	wait-for-move door2 along x-axis;
	wait-for-move door3 along x-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 250;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(PieceNum)
{
	PieceNum = base;
}

Killed(Severity, CorpseType, Random)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode rside type NOHEATCLOUD;
		explode lside type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode rside type NOHEATCLOUD | FALL;
		explode lside type NOHEATCLOUD | FALL;
		explode hull type NOHEATCLOUD;
		explode launcher type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode rside type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lside type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode hull type NOHEATCLOUD;
	explode launcher type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);	
}