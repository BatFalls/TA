#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground,  flarer1, flarer2, body1, body2, turretg, boreg, barrelg, flareg, neck,
 turretb, boreb, barrelb, flareb, turretr, borer, barrelr1, barrelr2, hatch;

static-var  gun_3, restore_delay, bOpening, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


activatescr()
{
	if( TRUE )
	{
		move body1 to y-axis [0] speed [6];
		move neck to y-axis [0] speed [6];
		move body2 to y-axis [-1.8] speed [6];			
		wait-for-move body1 along y-axis;
	}
	if( TRUE )
	{		
		move body2 to y-axis [0] speed [6];				
		turn turretg to x-axis <0> speed <150>;
		move boreg to z-axis [0] speed [2];		
		//move hatch to y-axis [-1.50000] speed [1.000000];
		//move hatch to z-axis [-0.50000] speed [1.000000];
		turn hatch to x-axis <-179> speed <360>;
		wait-for-move body2 along y-axis;
	}
	if( TRUE )
	{
		move borer to z-axis [0.000000] speed [5.000000];
		turn turretb to x-axis <0> speed <150>;
		move boreb to z-axis [0] speed [2];		
		move barrelg to z-axis [0] speed [5];		
		wait-for-turn turretb around x-axis;
		move barrelb to z-axis [0] speed [5];
	}
	sleep 150;
}

deactivatescr()
{
	if( TRUE )
	{
		sleep 500;
	}
	
	if( TRUE )
	{
		turn turretr to y-axis <0> speed <100>;	
		turn body1 to y-axis <0> speed <75>;	
		turn body2 to y-axis <0> speed <37.5>;	
		wait-for-turn turretr around y-axis;
		wait-for-turn body1 around y-axis;
		wait-for-turn body2 around y-axis;		
	}
	
	if( TRUE )
	{
		
		move borer to z-axis [-3.5] speed [6];
		turn barrelr1 to x-axis <0> speed <60>;
		turn barrelr2 to x-axis <0> speed <60>;
		
		//move barrelr to z-axis [-4.8] speed [6];	
		//move hatch to y-axis [0.00000] speed [4.000000];
		//move hatch to z-axis [0.00000] speed [2.000000];	
		move barrelg to z-axis [-0.18] speed [5];
		move boreg to z-axis [-0.20] speed [2];		
		wait-for-move boreg along z-axis;
		turn hatch to x-axis <0> speed <360>;	
		turn turretg to x-axis <180> speed <150>;		
		move boreb to z-axis [-2.8] speed [2];	
		move barrelb to z-axis [-2.8] speed [5];	
		//turn turretb to x-axis <140> speed <60>;
		//wait-for-move boreb along z-axis;
		
		turn turretb to x-axis <180> speed <80>;				
		wait-for-turn turretg around x-axis;
		wait-for-turn turretb around x-axis;
	}
	
	if( TRUE )
	{
		move body2 to y-axis [-2.75] speed [6];
		move neck to y-axis [-2.75] speed [6];
		wait-for-move body2 along y-axis;
	}
	
	if( TRUE )
	{
		move neck to y-axis [-9] speed [6];
		move body2 to y-axis [-9] speed [6];
		move body1 to y-axis [-6.2] speed [6];
		wait-for-move body1 along y-axis;
	}

	sleep 150;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set ARMORED to 0;
	if( !bOpening )
	{
		call-script activatescr();
	}
	bOpening = 1;
}

Stop()
{
	bOpening = 0;
	call-script deactivatescr();
	set ARMORED to 1;

}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn turretb to x-axis <180> now;
	move boreb to z-axis [-1.8] now;
	move barrelb to z-axis [-1.8] now;

	turn turretg to x-axis <180> now;
	move boreg to z-axis [-0.2] now;
	move barrelg to z-axis [-1.8] now;

	move borer to z-axis [-3.5] now;
	move hatch to y-axis [0.0000] now;
	move hatch to z-axis [0.0000] now;
	turn hatch to x-axis <0> now;
	move body2 to y-axis [-9] now;
	move body1 to y-axis [-6.2] now;
	move neck to y-axis [-9] now;
	
	gun_3 = 0;
	call-script InitState();
	bOpening = 0;
	restore_delay = 2000;
	start-script SmokeUnit();
	//start-script RequestState(0);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_AIM;
	signal SIG_AIM_2;
	signal SIG_AIM_3;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !bOpening )
	{
		sleep 250;
	}
	turn body2 to y-axis heading speed <75.000000>;
	turn turretb to x-axis <0.0> - pitch speed <75.000000>;
	wait-for-turn body2 around y-axis;
	wait-for-turn turretb around x-axis;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( !bOpening )
	{
		sleep 250;
	}
	turn body1 to y-axis heading speed <150.000000>;
	turn turretg to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn body1 around y-axis;
	wait-for-turn turretg around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !bOpening )
	{
		sleep 250;
	}
	turn turretr to y-axis heading speed <200.000000>;
	//turn barrelr1 to x-axis 0 - pitch speed <120>;
	//turn barrelr2 to x-axis 0 - pitch speed <120>;
	wait-for-turn turretr around y-axis;
	//wait-for-turn barrelr1 around x-axis;

	return (1);
}

FirePrimary()
{
	sleep 150;
}

FireSecondary()
{
	sleep 150;
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		gun_3 = 1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		
		gun_3 = 0;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turretb;
}

AimFromSecondary(piecenum)
{
	piecenum = body1;
}

AimFromTertiary(piecenum)
{
	piecenum = turretr;
}

QueryPrimary(piecenum)
{
	piecenum = flareb;
}

QuerySecondary(piecenum)
{
	piecenum = flareg;
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flarer1;
	}
	if( gun_3 == 1  )
	{
		piecenum = flarer2;
	}
	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type NOHEATCLOUD;
		explode body1 type NOHEATCLOUD;
		explode turretg type NOHEATCLOUD;
		explode boreg type NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL;
		explode flareg type NOHEATCLOUD;
		explode neck type NOHEATCLOUD;
		explode turretr type NOHEATCLOUD;
		explode borer type NOHEATCLOUD;
		explode barrelr1 type NOHEATCLOUD;
		explode flarer1 type NOHEATCLOUD;
		explode flarer2 type NOHEATCLOUD;
		explode body2 type NOHEATCLOUD;
		explode turretb type NOHEATCLOUD;
		explode boreb type NOHEATCLOUD;
		explode barrelb type NOHEATCLOUD;
		explode flareb type NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type NOHEATCLOUD;
		explode turretg type FALL;
		explode boreg type NOHEATCLOUD | SMOKE | FALL;
		explode barrelg type NOHEATCLOUD | SMOKE | FALL;
		explode flareg type NOHEATCLOUD;
		explode neck type NOHEATCLOUD | SMOKE | FALL;
		explode turretr type NOHEATCLOUD | SMOKE | FALL;
		explode borer type NOHEATCLOUD | SMOKE | FALL;
		explode barrelr1 type NOHEATCLOUD | SMOKE | FALL;
		explode flarer1 type NOHEATCLOUD;
		explode flarer2 type NOHEATCLOUD | SMOKE | FALL;
		explode turretb type NOHEATCLOUD | SMOKE | FALL;
		explode boreb type NOHEATCLOUD;
		explode barrelb type NOHEATCLOUD;
		explode flareb type NOHEATCLOUD | SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type NOHEATCLOUD;
		explode body1 type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode turretg type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode boreg type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode barrelg type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode flareg type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode neck type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode turretr type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode borer type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode barrelr1 type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode flarer1 type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode flarer2 type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode body2 type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode turretb type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
		explode boreb type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode barrelb type EXPLODE_ON_HIT | NOHEATCLOUD | FALL;
		explode flareb type EXPLODE_ON_HIT | NOHEATCLOUD | SMOKE | FALL;
	return corpsetype;
}
