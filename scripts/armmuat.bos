#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, link, wing1, wing2, wing3, jet1, jet2, jet3,
       jet4, wing4, turret, launcher, misA, misB;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging, gun_1;


ProcessFlames()
{
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2 )
		{
			emit-sfx 0 from jet1;
			emit-sfx 0 from jet2;
			emit-sfx 0 from jet3;
			emit-sfx 0 from jet4;
		}
		sleep 67;
	}
}

activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [-3.000000] speed [15.000000];
		move wing2 to x-axis [3.000000] speed [15.000000];
		move wing3 to x-axis [-2.000000] speed [10.000000];
		move wing4 to x-axis [2.000000] speed [10.000000];
		sleep 998;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] speed [3.000000];
		move wing2 to x-axis [0.000000] speed [3.000000];
		move wing3 to x-axis [0.000000] speed [2.000000];
		move wing4 to x-axis [0.000000] speed [2.000000];
		sleep 998;
	}
	sleep 44;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret to y-axis <0.000000> speed <90.0>;
	turn launcher to x-axis <0.000000> speed <50.0>;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	gun_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

AimWeapon1(heading, pitch)
{
	signal 6;
	set-signal-mask 6;
	turn turret to y-axis heading speed <250.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around y-axis;	
	start-script RestoreAfterDelay();
	return (1);
}
	

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = misa;
	}
	if( gun_1 == 0 )
	{
		piecenum = misb;
	}
}

FireWeapon1(Func_Var_1)
{
	++gun_1;		
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryTransport(Func_Var_1)
{
	Func_Var_1 = link;
}

BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
}

EndTransport()
{
	start-script RequestState(1);
}

StopMoving()
{
	signal 2;
	Static_Var_1 = 0;
}

MoveRate1()
{
	signal 2;
	set-signal-mask 2;
	//start-script ProcessFlames();
	Static_Var_1 = 1;
}

MoveRate2()
{
	signal 2;
	set-signal-mask 2;
	//start-script ProcessFlames();
	Static_Var_1 = 2;
}

MoveRate3()
{
	signal 2;
	set-signal-mask 2;
	//start-script ProcessFlames();
	Static_Var_1 = 3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		explode wing3 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode jet1 type NOHEATCLOUD;
		explode jet2 type NOHEATCLOUD;
		explode jet3 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		explode wing3 type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD;
		explode jet1 type NOHEATCLOUD | FALL;
		explode jet2 type NOHEATCLOUD | FALL;
		explode jet3 type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode wing1 type NOHEATCLOUD;
	explode wing2 type NOHEATCLOUD;
	explode wing3 type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode jet1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode jet2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode jet3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
