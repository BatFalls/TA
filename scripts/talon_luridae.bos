#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, tail, flarea, flareb, flare, 
		leg1, leg2, leg3, leg4, head;

static-var  bMoving, bAiming, gun_1;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4

Playtail()
{
	while( TRUE )
	{
		sleep 1000;
		if( !bMoving && !bAiming)
		{
			turn tail to y-axis <15.000000> speed <2.000000>;
			turn tail to x-axis <30.000000> speed <2.000000>;
			turn head to y-axis <2.000000> speed <1.000000>;
			sleep 750;
		}
		if( !bMoving && !bAiming)
		{
			turn tail to y-axis <-15.000000> speed <2.000000>;
			turn tail to x-axis <-30.000000> speed <5.000000>;
			turn head to y-axis <-2.000000> speed <1.000000>;
			sleep 750;
		}
		
		turn tail to y-axis <0.000000> speed <2.>;
		turn tail to x-axis <0.000000> speed <2.>;
		turn head to y-axis <0.000000> speed <1.000000>;
		sleep 150;
	}
}

walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			//AD
			turn leg1 to y-axis <10.0> speed <150.000000>;
			turn leg1 to z-axis <10.000000> speed <100.000000>;
			
			//AG
			turn leg4 to y-axis <5.0> speed <150.000000>;		
			turn leg4 to z-axis <0.000000> speed <100.000000>;


			turn leg3 to y-axis <30.0> speed <150.000000>;
			turn leg3 to z-axis <10> speed <100.000000>;

			
			turn leg2 to y-axis <20.000000> speed <150.000000>;
			turn leg2 to z-axis <0.0> speed <100.0>;
			
			turn body to x-axis <5.000000> speed <100.000000>;
			
			sleep 150;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <10.0> speed <150.000000>;
			turn leg1 to z-axis <0.000000> speed <100.000000>;
			
			turn leg4 to y-axis <0.0> speed <150.000000>;		
			turn leg4 to z-axis <-10.000000> speed <100.000000>;
			
			turn leg3 to y-axis <0.000000> speed <150.0>;
			turn leg3 to z-axis <0.000000> speed <100.0>;
			
			turn leg2 to y-axis <0.0> speed <150.0>;
			turn leg2 to z-axis <10.0> speed <100.0>;
			
			turn body to x-axis <0.000000> speed <25.0>;
			sleep 150;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <-25.000000> speed <150.0>;
			turn leg1 to z-axis <0.000000> speed <100.000000>;
			
			turn leg4 to y-axis <-5.0> speed <150.000000>;		
			turn leg4 to z-axis <-10.000000> speed <100.000000>;
			
			turn leg3 to y-axis <-42.0> speed <180.0>;
			turn leg3 to z-axis <0.0> speed <100.000000>;
			
			turn leg2 to y-axis <-20.0> speed <150.0>;
			turn leg2 to z-axis <10.0> speed <100.000000>;
			
			turn body to x-axis <-5.000000> speed <25.000000>;
			sleep 150;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <0.0> speed <150.0>;
			turn leg1 to z-axis <10.0> speed <10.0>;
			
			turn leg4 to y-axis <-5.0> speed <150.000000>;		
			turn leg4 to z-axis <0.000000> speed <10.000000>;
			
			turn leg3 to y-axis <0.0> speed <150.0>;
			turn leg3 to z-axis <0.0> speed <100.000000>;
			
			turn leg2 to y-axis <40.0> speed <180.0>;
			turn leg2 to z-axis <0.0> speed <100.000000>;
			
			
			sleep 150;
		
		}
		if( bMoving )
		{
			turn leg1 to y-axis <0.0> speed <150.0>;
			turn leg1 to z-axis <0.0> speed <10.0>;
			
			turn leg4 to y-axis <25.0> speed <150.000000>;		
			turn leg4 to z-axis <0.000000> speed <10.000000>;
			
			turn leg3 to y-axis <15.0> speed <150.0>;
			turn leg3 to z-axis <10.0> speed <100.000000>;
			
			turn leg2 to y-axis <0.0> speed <150.0>;
			turn leg2 to z-axis <10.0> speed <100.000000>;
		
		
			turn body to x-axis <0.000000> speed <25.000000>;
			sleep 150;
		}
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <35.000000>;
			turn leg1 to z-axis <0.000000> speed <25.000000>;
			turn leg2 to y-axis <0.000000> speed <35.000000>;
			turn leg2 to z-axis <0.000000> speed <25.000000>;
			turn leg3 to y-axis <0.000000> speed <35.000000>;
			turn leg3 to z-axis <0.000000> speed <25.000000>;
			turn leg4 to y-axis <0.000000> speed <35.000000>;
			turn leg4 to z-axis <0.000000> speed <25.000000>;
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script PlayTail();
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;	
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn turret to x-axis <0.000000> speed <40.000000>;
	turn head to y-axis <0.000000> speed <35.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	bAiming = TRUE;
	turn tail to z-axis <0.000000> speed <2.000000>;
	turn tail to x-axis <0.000000> speed <2.000000>;
	turn turret to y-axis heading speed <120.000000>;
	turn turret to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	sleep 150;
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn head to y-axis heading speed <35.000000>;
	wait-for-turn head around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = head;
}

QuerySecondary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flarea;
	}
	if (gun_1 == 1)
	{
		piecenum = flareb;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode leg1 type NOHEATCLOUD;
		explode leg2 type NOHEATCLOUD;
		explode tail type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode leg1 type NOHEATCLOUD | FALL;
		explode leg2 type NOHEATCLOUD | FALL;
		explode tail type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL;
	explode leg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode leg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode tail type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
