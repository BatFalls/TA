#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, gem, flare1, flare2, turret, pitchturret, fire, barrel1, barrel2, wake1, wake2, wake3, aim;

static-var  torpedo1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_MOVE			8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 3;
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	torpedo1 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}


Restore1()
{
	sleep 3500;
	turn turret to y-axis <0.000000> speed <40.000000>;
	wait-for-turn turret around y-axis;
	move turret to y-axis [0.000000] speed [1.000000];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move turret to y-axis [3.000000] speed [1.000000];
	wait-for-move turret along y-axis;
	turn turret to y-axis heading speed <40.000000>;
	wait-for-turn turret around y-axis;
	start-script Restore1();
	return (1);
}

FirePrimary()
{
	turn barrel1 to y-axis <2.0> speed <500.000000>;
	turn barrel2 to y-axis <-2.0> speed <500.000000>;
	move pitchturret to z-axis [-2.000000] speed [200.000000];
	sleep 100;
	turn barrel1 to y-axis <0.0> speed <10.000000>;
	turn barrel2 to y-axis <0.0> speed <10.000000>;
	move pitchturret to z-axis [0.000000] speed [2.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = fire;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	return (1);
}

FireTertiary()
{
	++torpedo1;
	if ( torpedo1 == 2)
	{
		torpedo1 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = aim;
}

QueryTertiary(piecenum)
{
	if ( torpedo1 == 0)
	{
		piecenum = flare1;
	}
	if ( torpedo1 == 1)
	{
		piecenum = flare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hull type BITMAPONLY;
	explode turret type NOHEATCLOUD;
	return (corpsetype);
}
