#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, radar, turret, canon, barrel, flare1, flare2, flare3,
       flare4, flare5, flare6, flare7, flare8;

static-var  restore_delay, Gun_1, Gun_2, Arm_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	Gun_1 = 0;
	restore_delay = 3000;
	spin radar around y-axis speed <60.000000>;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <70.000000>;
	turn barrel to x-axis <0.000000> speed <15.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <180.000000>;
	turn barrel to x-axis <0.000000> - pitch speed <70.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( Gun_1 == 0 or Gun_1 == 7 )
	{
		Gun_1 = 0;
		sleep 150;
		++Gun_1;
		sleep 150;
		++Gun_1;
		sleep 150;
		++Gun_1;
		return (0);	
	}
	
	if( Gun_1 == 3 )
	{
		++Gun_1;
		sleep 150;
		++Gun_1;
		sleep 150;
		++Gun_1;
		sleep 150;
		++Gun_1;
		sleep 150;
		//Gun_1 = 0; 
		return (0);	
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( Gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( Gun_1 == 2 )
	{
		piecenum = flare3;
	}
	if( Gun_1 == 3 )
	{
		piecenum = flare4;
	}
	if( Gun_1 == 4 )
	{
		piecenum = flare5;
	}
	if( Gun_1 == 5 )
	{
		piecenum = flare6;
	}
	if( Gun_1 == 6 )
	{
		piecenum = flare7;
	}
	if( Gun_1 == 7 )
	{
		piecenum = flare8;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode flare3 type NOHEATCLOUD;
		explode flare4 type NOHEATCLOUD;
		explode flare5 type NOHEATCLOUD;
		explode flare6 type NOHEATCLOUD;
		explode flare7 type NOHEATCLOUD;
		explode flare8 type NOHEATCLOUD;
		explode canon type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type NOHEATCLOUD | FALL;
		explode base type NOHEATCLOUD;
		explode flare1 type NOHEATCLOUD;
		explode flare2 type NOHEATCLOUD;
		explode flare3 type NOHEATCLOUD;
		explode flare4 type NOHEATCLOUD;
		explode flare5 type NOHEATCLOUD;
		explode flare6 type NOHEATCLOUD;
		explode flare7 type NOHEATCLOUD;
		explode flare8 type NOHEATCLOUD;
		explode canon type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flare2 type NOHEATCLOUD;
	explode flare3 type NOHEATCLOUD;
	explode flare4 type NOHEATCLOUD;
	explode flare5 type NOHEATCLOUD;
	explode flare6 type NOHEATCLOUD;
	explode flare7 type NOHEATCLOUD;
	explode flare8 type NOHEATCLOUD;
	explode canon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
