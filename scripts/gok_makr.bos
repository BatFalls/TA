#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, graycop, core;

static-var  Static_Var_1, Static_Var_2;


activatescr()
{
	//turn core to x-axis <180.> speed <500.>;
	//wait-for-turn core around x-axis;
	set ARMORED to 0;
	move graycop to y-axis [-1.0] speed [10.];
	wait-for-move graycop along y-axis;	
}

deactivatescr()
{
	move graycop to y-axis [-1.0] speed [10.];
	wait-for-move graycop along y-axis;
	set ARMORED to 1;
}

Go()
{
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
}

Activate()
{
	start-script activatescr();
}

Deactivate()
{
	start-script deactivatescr();
}

MMStatus(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	Static_Var_2 = -1;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			if( Static_Var_2 != 1 )
			{
				call-script Go();
				Static_Var_2 = 1;
			}
		}
		else if( Static_Var_2 != 0 )
		{
			call-script Stop();
			Static_Var_2 = 0;
		}
		sleep 1000;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script ImAMetalMaker();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	set ARMORED to 1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 66 )
	{
		corpsetype = 2;
		explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode core type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode core type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
