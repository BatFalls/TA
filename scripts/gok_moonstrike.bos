#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, hullshadow, weapon, shelter, udoor, ddoor, ldoor,
       rdoor, flare, color, system, cockpit;

static-var  Static_Var_1, Static_Var_2, Static_Var_3;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( !Static_Var_2 )
		{
			turn udoor to x-axis <-90.> speed <180.>;
			turn ddoor to x-axis <90.> speed <180.>;
			turn ldoor to z-axis <90.> speed <180.>;
			turn rdoor to z-axis <-90.> speed <180.>;
			wait-for-turn udoor around x-axis;
			wait-for-turn ddoor around x-axis;
			wait-for-turn ldoor around z-axis;
			wait-for-turn rdoor around z-axis;
			Static_Var_1 = 1;
			currentstate = 0;
		}
		if( Static_Var_2 )
		{
			Static_Var_1 = 0;
			turn udoor to x-axis <0.> speed <180.>;
			turn ddoor to x-axis <0.> speed <180.>;
			turn ldoor to z-axis <0.> speed <180.>;
			turn rdoor to z-axis <0.> speed <180.>;
			wait-for-turn udoor around x-axis;
			wait-for-turn ddoor around x-axis;
			wait-for-turn ldoor around z-axis;
			wait-for-turn rdoor around z-axis;
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	dont-cache hull;
}

StopMoving()
{
	cache hull;
}

RestoreAfterDelay()
{
	sleep 10000;
	set-signal-mask 0;
	call-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	while( !Static_Var_1 )
	{
		sleep 200;
		start-script RequestState(0);
	}
	signal 2;
	set-signal-mask 0;
	set-signal-mask 2;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{

}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type NOHEATCLOUD;
		explode weapon type NOHEATCLOUD;
		explode system type NOHEATCLOUD;
		explode udoor type NOHEATCLOUD;
		explode ddoor type NOHEATCLOUD;
		explode ldoor type NOHEATCLOUD;
		explode rdoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type NOHEATCLOUD | SHATTER;
		explode weapon type NOHEATCLOUD | SHATTER;
		explode system type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode udoor type FALL | BITMAP3;
		explode ddoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode ldoor type FALL | BITMAP3;
		explode rdoor type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hull type NOHEATCLOUD | SHATTER;
	explode weapon type NOHEATCLOUD | SHATTER;
	explode system type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode udoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode ddoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode ldoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rdoor type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
