#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, Silo, Block1, Block2, Platform, gun, Turret,
       Hatch1, Hatch2, Hatch3, Fan1, Fan2, Fan3, Connection, Tower, Top, Support1, Support2,
       Pipe1, Pipe2, Pipe3, emitter1, emitter2, emitter3, emitter4, emitter5, emitter6,
       petal1,petal2, petal3, petal4, petal5, petal6;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

#define SIG_ACTDEACT 4

Shield()
{
	Static_Var_1 = !Static_Var_1;
}

ShieldOn()
{
	signal SIG_ACTDEACT;
	set-signal-mask SIG_ACTDEACT;
		
	turn Hatch1 to z-axis <-180> speed <30>;
	sleep 200;
	turn Hatch2 to z-axis <-180> speed <30>;
	sleep 200;
	turn Hatch3 to z-axis <-180> speed <30>;
	wait-for-turn Hatch1 around z-axis;
	wait-for-turn Hatch2 around z-axis;
	wait-for-turn Hatch3 around z-axis;
	
	move Turret to y-axis [16] speed [4];	
	move Platform to y-axis [2] speed [2];
	wait-for-move Platform along y-axis;
	wait-for-move Turret along y-axis;
	
	sleep 150;
	turn emitter1 to x-axis <60.000000> speed <15.000000>;
	turn emitter2 to x-axis <60.000000> speed <15.000000>;
	turn emitter3 to x-axis <60.000000> speed <15.000000>;
	turn emitter4 to x-axis <60.000000> speed <15.000000>;
	turn emitter5 to x-axis <60.000000> speed <15.000000>;	
	turn emitter6 to x-axis <60.000000> speed <15.000000>;
}

ShieldOff()
{

	signal SIG_ACTDEACT;
	set-signal-mask SIG_ACTDEACT;
	
	turn emitter1 to x-axis <0.000000> speed <15.000000>;
	turn emitter2 to x-axis <0.000000> speed <15.000000>;
	turn emitter3 to x-axis <0.000000> speed <15.000000>;
	turn emitter4 to x-axis <0.000000> speed <15.000000>;
	turn emitter5 to x-axis <0.000000> speed <15.000000>;	
	turn emitter6 to x-axis <0.000000> speed <15.000000>;
	wait-for-turn emitter1 around x-axis;
	
	sleep 150;
	move Turret to y-axis [0] speed [4];	
	move Platform to y-axis [0] speed [2];
	wait-for-move Platform along y-axis;
	wait-for-move Turret along y-axis;
	
	turn Hatch3 to z-axis <0> speed <30>;
	sleep 200;
	turn Hatch2 to z-axis <0> speed <30>;
	sleep 200;
	turn Hatch1 to z-axis <0> speed <30>;
	wait-for-turn Hatch3 around z-axis;
	wait-for-turn Hatch2 around z-axis;
	wait-for-turn Hatch1 around z-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script ShieldOn();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script ShieldOff();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Sensor()
{
	while (TRUE)
	{
		if(Static_Var_1 == 1)
		{
			start-script RequestState(0);
		}
		else
		{
			start-script RequestState(1);
		}
	
	sleep 250;
	
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script Sensor();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn Hatch2 to y-axis <120> now;
	turn Hatch3 to y-axis <240> now;
	turn petal1 to y-axis <0.000000> now;
	turn petal2 to y-axis <60.000000> now;
	turn petal3 to y-axis <120.000000> now;
	turn petal4 to y-axis <180.000000> now;
	turn petal5 to y-axis <240.000000> now;
	turn petal6 to y-axis <300.000000> now;
	//move Platform to y-axis [2] now;
	//move Turret to y-axis [-2] now;
	Static_Var_1 = 1;
	start-script SmokeUnit();
	call-script InitState();
}

AimPrimary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FirePrimary()
{
	explode gun type NOHEATCLOUD | FALL;
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FireSecondary()
{
	explode gun type NOHEATCLOUD | FALL;
	sleep 100;
}

QuerySecondary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FALL | NOHEATCLOUD;
		explode Silo type FALL | NOHEATCLOUD;
		explode Block1 type FALL | NOHEATCLOUD;
		explode Block2 type FALL | NOHEATCLOUD;
		explode Platform type FALL | NOHEATCLOUD;
		explode Turret type FALL | NOHEATCLOUD;
		explode petal1 type FALL | NOHEATCLOUD;
		explode petal2 type FALL | NOHEATCLOUD;
		explode Hatch1 type FALL | NOHEATCLOUD;
		explode Hatch2 type FALL | NOHEATCLOUD;
		explode Hatch3 type FALL | NOHEATCLOUD;
		explode Connection type FALL | NOHEATCLOUD;
		explode Tower type FALL | SMOKE | NOHEATCLOUD;
		explode Top type FALL | SMOKE | NOHEATCLOUD;
		explode Support1 type FALL | NOHEATCLOUD;
		explode Support2 type FALL | NOHEATCLOUD;
		explode Pipe1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode Pipe2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode Pipe3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | NOHEATCLOUD;
		explode Silo type FALL | NOHEATCLOUD;
		explode Block1 type FALL | NOHEATCLOUD;
		explode Block2 type FALL | NOHEATCLOUD;
		explode Platform type FALL | NOHEATCLOUD;
		explode Turret type FALL | NOHEATCLOUD;
		explode petal1 type FALL | NOHEATCLOUD;
		explode Hatch1 type FALL | NOHEATCLOUD;
		explode Hatch2 type FALL | NOHEATCLOUD;
		explode Hatch3 type FALL | NOHEATCLOUD;
		explode Connection type FALL | NOHEATCLOUD;
		explode Tower type FALL | SMOKE | NOHEATCLOUD;
		explode Top type FALL | SMOKE | NOHEATCLOUD;
		explode Support1 type FALL | NOHEATCLOUD;
		explode Support2 type FALL | NOHEATCLOUD;
		explode Pipe1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode Pipe2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode Pipe3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Silo type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Block1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Block2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Platform type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Hatch1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Hatch2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Hatch3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Connection type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Tower type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Top type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Support1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Support2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Pipe1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Pipe2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode Pipe3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
