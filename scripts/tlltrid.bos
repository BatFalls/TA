#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, struts, fan, turret, gun, sleeve, barrel1, barrel2,
       barrel3, flare, vent1, vent2, wake01, wake02, wake03, wake04;

static-var  Static_Var_1, restore_delay, gun_1, Static_Var_4, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging, Static_Var_8;

// Signal definitions
#define SIG_AIM				2

Tangue(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			turn base to z-axis Func_Var_2 speed Func_Var_3 * <0.027473>;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SpinSlow()
{
	stop-spin fan around y-axis decelerate <4.000000>;
}

SpinFast()
{
	spin fan around y-axis speed <600.137363> accelerate <50.005495>;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script SpinFast();
		Static_Var_4 = 1;
		sleep 750;
		Static_Var_5 = 1;
		set ARMORED to 0;
		emit-sfx 1024 + 0 from turret;
		move base to y-axis [2.000000] speed [24.000000];
		wait-for-move base along y-axis;
		move base to y-axis [0.000000] speed [8.000000];
		wait-for-move base along y-axis;
		move base to y-axis [1.000000] speed [8.000000];
		sleep 125;
		move base to y-axis [0.000000] speed [8.000000];
		sleep 125;
		Static_Var_4 = 0;
		Static_Var_5 = 0;
		turn base to x-axis <0.000000> speed <8.000000>;
		turn base to z-axis <0.000000> speed <8.000000>;
		wait-for-turn base around z-axis;
		wait-for-turn base around x-axis;
	}
	Static_Var_1 = 1;
}

Stop()
{
	Static_Var_1 = 0;
	call-script SpinSlow();
	sleep 500;
	Static_Var_4 = 1;
	Static_Var_5 = 1;
	move base to y-axis [-16.000000] speed [8.000000];
	wait-for-move base along y-axis;
	move base to y-axis [-20.000000] speed [4.000000];
	wait-for-move base along y-axis;
	Static_Var_5 = 0;
	Static_Var_4 = 0;
	turn base to x-axis <0.000000> speed <8.000000>;
	turn base to z-axis <0.000000> speed <8.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	set ARMORED to 1;
}

Dive()
{
	Static_Var_8 = !Static_Var_8;
	if( Static_Var_8 == 1 )
	{
		call-script Go();
	}
	if( Static_Var_8 == 0 )
	{
		call-script Stop();
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn gun to x-axis <0.000000> speed <25.000000>;
	start-script RequestState(1);
}

Sway()
{
	while( TRUE )
	{
		if( Static_Var_5 )
		{
			turn base to x-axis <8.000000> speed <20.000000>;
			turn base to z-axis <8.000000> speed <20.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <-8.000000> speed <16.000000>;
			turn base to z-axis <-8.000000> speed <16.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <4.000000> speed <12.000000>;
			turn base to z-axis <4.000000> speed <12.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
			turn base to x-axis <0.000000> speed <8.000000>;
			turn base to z-axis <0.000000> speed <8.000000>;
			wait-for-turn base around z-axis;
			wait-for-turn base around x-axis;
		}
		sleep 250;
	}
}

ShowBubbles()
{
	while( TRUE )
	{
		if( Static_Var_4 )
		{
			emit-sfx 3 from wake01;
			emit-sfx 3 from wake02;
			emit-sfx 3 from wake03;
			emit-sfx 3 from wake04;
		}
		sleep 250;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script Tangue();
	spin fan around y-axis speed <600.137363>;
	start-script RequestState(1);
	//start-script RestoreAfterDelay();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide vent1;
	hide vent2;
	hide wake01;
	hide wake02;
	hide wake03;
	hide wake04;
	restore_delay = 3000;
	Static_Var_1 = 1;
	gun_1 = base;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_8 = 1;
	call-script InitState();
	start-script SmokeUnit();
	start-script ShowBubbles();
	start-script Sway();
	start-script RequestState(0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex * <0.010989> speed <20.000000>;
	turn base to z-axis anglez * <0.010989> speed <20.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> - anglex speed <16.000000>;
	turn base to z-axis <0.000000> - anglez speed <16.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.076923> speed <16.000000>;
	turn base to z-axis anglez / <0.076923> speed <16.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <8.000000>;
	turn base to z-axis <0.000000> speed <8.000000>;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_8 )
	{
		sleep 250;
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.000000>;
	turn gun to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn sleeve around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
		turn sleeve to z-axis <-120.027473> speed <200.000000>;
		wait-for-turn sleeve around z-axis;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
		turn sleeve to z-axis <120.027473> speed <200.000000>;
		wait-for-turn sleeve around z-axis;
	}
	if( gun_1 == 2 )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		sleep 1000;
		turn sleeve to z-axis <0.000000> speed <200.000000>;
		wait-for-turn sleeve around z-axis;
	}
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide vent1;
	hide vent2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode struts type NOHEATCLOUD;
		explode fan type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode struts type NOHEATCLOUD;
		explode fan type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD;
		explode gun type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode struts type NOHEATCLOUD;
	explode fan type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	explode gun type NOHEATCLOUD;
	explode sleeve type NOHEATCLOUD | SHATTER;
	explode barrel1 type NOHEATCLOUD;
	explode barrel2 type NOHEATCLOUD;
	explode barrel3 type NOHEATCLOUD;
	return (corpsetype);
}
