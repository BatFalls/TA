#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, bloc1, bloc2, bloc3, bloc4, bloc5, bloc6, bloc7, bloc8,
		ring, rotor, turret, sleeves, barrelb, barrela, flarea, flareb;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Opened, bAiming, gun_1,
			restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	Opened = 0;
	signal 8;
	
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeves to x-axis <0.000000> speed <100.000000>;

	move barrela to z-axis [-12.0] speed [5.000000];
	move barrelb to z-axis [-12.0] speed [5.000000];
	wait-for-move barrela along z-axis;
	wait-for-turn turret around y-axis;
	
	turn ring to z-axis <-180.0> speed <220.000000>;
	
	set ACTIVATION to 100;
	spin rotor around y-axis speed Static_Var_1 accelerate Static_Var_2;
}

Stop()
{
	if( !Opened )
	{
		set ACTIVATION to 0;
		stop-spin rotor around y-axis decelerate 0 - Static_Var_3;
		wait-for-turn rotor around y-axis;
		
		turn ring to z-axis <0.0> speed <220.000000>;		
		move barrela to z-axis [0.0] speed [5.000000];
		move barrelb to z-axis [0.0] speed [5.000000];		
		wait-for-turn ring around z-axis;
	}
	Opened = 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	restore_delay = 7500;
	Opened = 1;
	bAiming = FALSE;
	Static_Var_1 = 500;
	Static_Var_2 = 100;	
	Static_Var_3 = 100;
	gun_1 = 0;
	hide flarea;
	hide flareb;
	call-script InitState();
	start-script SmokeUnit();
	//turn ring to z-axis <-180.0> now;
	set ARMORED to 0;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	bAiming = FALSE;
	start-script RequestState(0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(1);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	while( !Opened )
	{
		sleep 250;
	}	
	turn turret to y-axis heading speed <100.000000>;
	turn sleeves to x-axis <0.0> - pitch speed <75.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	wait-for-move barrela along z-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrela to z-axis [-2] now;
		emit-sfx 1024 + 0 from flarea;
		move barrela to z-axis [0] speed [0.6];
	}
	if( gun_1 == 1 )
	{
		move barrelb to z-axis [-2] now;
		emit-sfx 1024 + 0 from flareb;
		move barrelb to z-axis [0] speed [0.6];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarea;
	}
	if( gun_1 == 1 )
	{
		piecenum = flareb;
	}
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 27;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode bloc1 type NOHEATCLOUD;
		explode bloc2 type NOHEATCLOUD;
		explode bloc4 type NOHEATCLOUD;
		explode bloc6 type NOHEATCLOUD;
		explode bloc7 type NOHEATCLOUD;
		explode bloc8 type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode barrela type NOHEATCLOUD;
		explode barrelb type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode bloc1 type NOHEATCLOUD | FALL;
		explode bloc2 type NOHEATCLOUD | FALL;
		explode bloc4 type NOHEATCLOUD | FALL;
		explode bloc6 type NOHEATCLOUD | FALL;
		explode bloc7 type NOHEATCLOUD | FALL;
		explode bloc8 type NOHEATCLOUD | FALL;
		explode sleeves type NOHEATCLOUD;
		explode barrela type NOHEATCLOUD;
		explode barrelb type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode bloc1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bloc2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bloc4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bloc6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bloc7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bloc8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER;
	explode barrela type NOHEATCLOUD | FALL;
	explode barrelb type NOHEATCLOUD | FALL;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
