#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pentas, beam, nanogun, door1, door2, plate, post, wake1a,
       wake2a, wake3a, wake4a, wake5a, wake6a, wake7a, wake8a, wake1b,
       wake2b, wake3b, wake4b, wake5b, wake6b, wake7b, wake8b, fusions,
       turret, wakes_fore,
       wakes_aft, body;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging, Static_Deployed;

// Signal definitions
#define SIG_MOVE			2

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.> now;
		turn door1 to z-axis <-67.> speed <99.>;
		turn door2 to z-axis <0.> now;
		turn door2 to z-axis <67.> speed <99.>;
		sleep 677;
	}
	if( TRUE )
	{
		move plate to y-axis [2.] speed [5.];
		sleep 688;
	}
	if( TRUE )
	{
		turn post to x-axis <90.> speed <131.>;
		turn nanogun to x-axis <-90.> speed <131.>;
		sleep 687;
	}
	Static_Deployed = 1;
	sleep 25;
}

deactivatescr()
{
	Static_Deployed = 0;
	if( TRUE )
	{
		move plate to y-axis [2.] now;
		turn door1 to z-axis <-67.> now;
		turn door2 to z-axis <67.> now;
		turn post to x-axis <90.> now;
		turn post to x-axis <0.> speed <197.>;
		turn nanogun to x-axis <-90.> now;
		turn nanogun to x-axis <0.> speed <197.>;
		sleep 457;
	}
	if( TRUE )
	{
		move plate to y-axis [0.] speed [8.];
		sleep 471;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.> speed <143.>;
		turn door2 to z-axis <0.> speed <143.>;
		sleep 469;
	}
	sleep 27;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	set INBUILDSTANCE to 1;
	call-script activatescr();
	//turn gun to y-axis Static_Var_2 speed <160.000000>;
	//wait-for-turn gun around y-axis;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 5 from wake1a;
			emit-sfx 5 from wake2a;
			emit-sfx 5 from wake3a;
			emit-sfx 5 from wake4a;
			emit-sfx 5 from wake5a;
			emit-sfx 5 from wake6a;
			emit-sfx 3 from wake7a;
			emit-sfx 3 from wake8a;
			emit-sfx 3 from wake1b;
			emit-sfx 3 from wake2b;
			emit-sfx 3 from wake3b;
			emit-sfx 3 from wake4b;
			emit-sfx 3 from wake5b;
			emit-sfx 3 from wake6b;
			emit-sfx 5 from wake7b;
			emit-sfx 5 from wake8b;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 5 from wake1a;
			emit-sfx 5 from wake2a;
			emit-sfx 5 from wake3a;
			emit-sfx 5 from wake4a;
			emit-sfx 5 from wake5a;
			emit-sfx 5 from wake6a;
			emit-sfx 3 from wake7a;
			emit-sfx 3 from wake8a;
			emit-sfx 3 from wake1b;
			emit-sfx 3 from wake2b;
			emit-sfx 3 from wake3b;
			emit-sfx 3 from wake4b;
			emit-sfx 3 from wake5b;
			emit-sfx 3 from wake6b;
			emit-sfx 5 from wake7b;
			emit-sfx 5 from wake8b;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
}

Create()
{
	Static_Var_2 = 0;
	Static_Deployed = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
	
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	start-script RequestState(0);
	while( Static_Deployed == 0 )
	{
		sleep 100;
	}
	signal 4;
	turn turret to y-axis Func_Var_1 speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;

}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 5000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);

}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode fusions type NOHEATCLOUD;
		explode pentas type NOHEATCLOUD;
		explode nanogun type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{	
		corpsetype = 2;
		explode body type FALL | NOHEATCLOUD | FIRE | EXPLODE_ON_HIT;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode fusions type NOHEATCLOUD;
		explode pentas type FALL | NOHEATCLOUD | FIRE | EXPLODE_ON_HIT;
		explode nanogun type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type FALL | NOHEATCLOUD | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode door1 type FALL | NOHEATCLOUD;
	explode door2 type FALL | NOHEATCLOUD;
	explode fusions type FALL | NOHEATCLOUD;
	explode pentas type FALL | NOHEATCLOUD | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nanogun type NOHEATCLOUD;
	return (corpsetype);
}
