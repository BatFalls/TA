#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, socle, building, array, spindoor1, spindoor2, door1, door2turn,
       door2, door3turn, door3, door4turn, door4, door5turn, door5, launchers,
       select, fire, gem, gema;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10,
            Static_Var_11, Static_Var_12;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_1 = 100;
	Static_Var_2 = 100;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	Static_Var_10 = 0;
	Static_Var_11 = 0;
	Static_Var_12 = 4;
	turn door2turn to y-axis <72.> now;
	turn door3turn to y-axis <144.> now;
	turn door4turn to y-axis <-144.> now;
	turn door5turn to y-axis <-72.> now;
	start-script SmokeUnit();
	Static_Var_3 = 1;
	Static_Var_4 = 1;
	Static_Var_5 = 300;
}

RestoreAfterDelay()
{
	signal 16;
	set-signal-mask 16;
	sleep 1500;
	Static_Var_10 = 0;
	sleep 500;
	Static_Var_7 = 0;
	turn spindoor1 to y-axis <0.> speed <60.>;
	turn spindoor2 to y-axis <0.> speed <60.>;
	turn door1 to x-axis <0.> speed <20.>;
	move door1 to z-axis [0.] speed [6.];
	move door1 to y-axis [0.] speed [2.];
	turn door2 to x-axis <0.> speed <20.>;
	move door2 to z-axis [0.] speed [6.];
	move door2 to y-axis [0.] speed [2.];
	turn door3 to x-axis <0.> speed <20.>;
	move door3 to z-axis [0.] speed [6.];
	move door3 to y-axis [0.] speed [2.];
	turn door4 to x-axis <0.> speed <20.>;
	move door4 to z-axis [0.] speed [6.];
	move door4 to y-axis [0.] speed [2.];
	turn door5 to x-axis <0.> speed <20.>;
	move door5 to z-axis [0.] speed [6.];
	move door5 to y-axis [0.] speed [2.];
}

OpenDoors()
{
	turn spindoor1 to y-axis <15.> speed <60.>;
	turn spindoor2 to y-axis <-15.> speed <60.>;
	turn door1 to x-axis <-5.> speed <20.>;
	move door1 to z-axis [-2.] speed [6.];
	move door1 to y-axis [-1.] speed [2.];
	turn door2 to x-axis <-5.> speed <20.>;
	move door2 to z-axis [-2.] speed [6.];
	move door2 to y-axis [-1.] speed [2.];
	turn door3 to x-axis <-5.> speed <20.>;
	move door3 to z-axis [-2.] speed [6.];
	move door3 to y-axis [-1.] speed [2.];
	turn door4 to x-axis <-5.> speed <20.>;
	move door4 to z-axis [-2.] speed [6.];
	move door4 to y-axis [-1.] speed [2.];
	turn door5 to x-axis <-5.> speed <20.>;
	move door5 to z-axis [-2.] speed [6.];
	move door5 to y-axis [-1.] speed [2.];
	sleep 250;
	Static_Var_7 = 1;
}

Prepare()
{
	if( !Static_Var_6 )
	{
		Static_Var_6 = 1;
		while( !Static_Var_7 )
		{
			call-script OpenDoors();
		}
		Static_Var_6 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = select;
}

QueryPrimary(piecenum)
{
	piecenum = fire;
}

AimPrimary(heading, pitch)
{
	start-script Prepare();
	signal 2;
	set-signal-mask 2;
	while( !Static_Var_7 )
	{
		sleep 100;
	}
	sleep 100;
	while( Static_Var_10 == 1 OR Static_Var_9 == 1 OR Static_Var_12 <= 0 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	Static_Var_9 = 1;
	--Static_Var_12;
	++Static_Var_8;
	sleep 75;
	sleep 75;
	if( Static_Var_8 == 1 )
	{
		turn select to y-axis <144.> now;
	}
	if( Static_Var_8 == 2 )
	{
		turn select to y-axis <288.> now;
	}
	if( Static_Var_8 == 3 )
	{
		turn select to y-axis <72.> now;
	}
	if( Static_Var_8 == 4 )
	{
		turn select to y-axis <216.> now;
	}
	if( Static_Var_8 >= 5 )
	{
		Static_Var_8 = 0;
		turn select to y-axis <0.> now;
	}
	sleep 183;
	Static_Var_9 = 0;
}

AimFromTertiary(piecenum)
{
	piecenum = select;
}

QueryTertiary(piecenum)
{
	piecenum = fire;
}

AimTertiary(heading, pitch)
{
	Static_Var_10 = 1;
	start-script Prepare();
	signal 4;
	set-signal-mask 4;
	while( !Static_Var_7 )
	{
		sleep 100;
	}
	while( Static_Var_9 == 1 OR Static_Var_12 <= 0 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	Static_Var_9 = 1;
	--Static_Var_12;
	++Static_Var_8;
	sleep 75;
	sleep 75;
	if( Static_Var_8 == 1 )
	{
		turn select to y-axis <144.> now;
	}
	if( Static_Var_8 == 2 )
	{
		turn select to y-axis <288.> now;
	}
	if( Static_Var_8 == 3 )
	{
		turn select to y-axis <72.> now;
	}
	if( Static_Var_8 == 4 )
	{
		turn select to y-axis <216.> now;
	}
	if( Static_Var_8 >= 5 )
	{
		Static_Var_8 = 0;
		turn select to y-axis <0.> now;
	}
	sleep 183;
	Static_Var_9 = 0;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode gema type NOHEATCLOUD;
		explode socle type NOHEATCLOUD;
		explode array type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode socle type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD | SHATTER;
		explode door2 type NOHEATCLOUD | SHATTER;
		explode array type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode socle type NOHEATCLOUD;
	explode array type SHATTER | NOHEATCLOUD;
	explode door1 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door3 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
