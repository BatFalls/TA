#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pad, doors, door1, door2, door3, door4,
       arms1, arm1, arm2, arm3, arm4, flo1, flo2, flo3, flo4, 
       arms2, arm5, arm6, arm7, arm8, flo5, flo6, flo7, flo8,
       nano1, nano2, nano3, nano5, nano6, nano8, nano4, nano7,
       beam1, beam2, beam3, beam4, beam5, beam6, beam7, beam8,
       wake1, wake2, wake3, wake4;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Tangue(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.007473>;
			turn base to z-axis Func_Var_2 speed Func_Var_3 * <0.007473>;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

activatescr()
{
	if( TRUE )
	{
		move body to y-axis [18.000000] speed [3.000000];
		
		turn arm1 to z-axis <45.000000> speed <13.000000>;
		turn flo1 to z-axis <-45.000000> speed <13.000000>;
		turn arm2 to z-axis <-45.000000> speed <13.000000>;
		turn flo2 to z-axis <45.000000> speed <13.000000>;
		turn arm3 to x-axis <-45.000000> speed <13.000000>;
		turn flo3 to x-axis <45.000000> speed <13.000000>;
		turn arm4 to x-axis <45.000000> speed <13.000000>;
		turn flo4 to x-axis <-45.000000> speed <13.000000>;
		
		turn arm5 to z-axis <45.000000> speed <13.000000>;
		turn flo5 to z-axis <-45.000000> speed <13.000000>;
		turn arm6 to z-axis <-45.000000> speed <13.000000>;
		turn flo6 to z-axis <45.000000> speed <13.000000>;
		turn arm7 to x-axis <-45.000000> speed <13.000000>;
		turn flo7 to x-axis <45.000000> speed <13.000000>;
		turn arm8 to x-axis <45.000000> speed <13.000000>;
		turn flo8 to x-axis <-45.000000> speed <13.000000>;
		
		wait-for-move body along y-axis;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-50.000000> speed <20.000000>;
		turn door2 to z-axis <50.000000> speed <20.000000>;
		turn door3 to x-axis <-50.000000> speed <20.000000>;
		turn door4 to x-axis <50.000000> speed <20.000000>;
		move doors to y-axis [-15.000000] speed [3.000000];
		emit-sfx 256 | 3 from door1;
		emit-sfx 256 | 3 from door2;
		emit-sfx 256 | 3 from door3;
		emit-sfx 256 | 3 from door4;
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 1250;
		emit-sfx 256 | 3 from door1;
		emit-sfx 256 | 3 from door2;
		emit-sfx 256 | 3 from door3;
		emit-sfx 256 | 3 from door4;
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 1250;
	}
	if( TRUE )
	{
		move pad to y-axis [2.000000] speed [5.000000];
		move nano1 to y-axis [5.000000] speed [5.000000];
		move nano2 to y-axis [5.000000] speed [5.000000];
		move nano3 to y-axis [5.000000] speed [5.000000];
		move nano4 to y-axis [5.000000] speed [5.000000];
		move nano5 to y-axis [5.000000] speed [5.000000];
		move nano6 to y-axis [5.000000] speed [5.000000];
		move nano7 to y-axis [5.000000] speed [5.000000];
		move nano8 to y-axis [5.000000] speed [5.000000];
	}
	sleep 800;
}

deactivatescr()
{
	if( TRUE )
	{
		move pad to y-axis [0.000000] speed [7.000000];
		move nano1 to y-axis [0.000000] speed [8.000000];
		move nano2 to y-axis [0.000000] speed [8.000000];
		move nano3 to y-axis [0.000000] speed [8.000000];
		move nano4 to y-axis [0.000000] speed [8.000000];
		move nano5 to y-axis [0.000000] speed [8.000000];
		move nano6 to y-axis [0.000000] speed [8.000000];
		move nano7 to y-axis [0.000000] speed [8.000000];
		move nano8 to y-axis [0.000000] speed [8.000000];
		sleep 1000;
	}
	if( TRUE )
	{
		move doors to y-axis [0.000000] speed [7.000000];
		turn door1 to z-axis <0.000000> speed <20.000000>;
		turn door2 to z-axis <0.000000> speed <20.000000>;
		turn door3 to x-axis <0.000000> speed <20.000000>;
		turn door4 to x-axis <0.000000> speed <20.000000>;
		sleep 2500;
	}
	if( TRUE )
	{
		move body to y-axis [0.000000] speed [3.000000];
		turn arm1 to x-axis <0.000000> speed <12.000000>;
		turn flo1 to x-axis <0.000000> speed <12.000000>;
		turn arm2 to x-axis <0.000000> speed <12.000000>;
		turn flo2 to x-axis <0.000000> speed <12.000000>;
		turn arm3 to z-axis <0.000000> speed <12.000000>;
		turn flo3 to z-axis <0.000000> speed <12.000000>;
		turn arm4 to z-axis <0.000000> speed <12.000000>;
		turn flo4 to z-axis <0.000000> speed <12.000000>;
		
		turn arm5 to x-axis <0.000000> speed <12.000000>;
		turn flo5 to x-axis <0.000000> speed <12.000000>;
		turn arm6 to x-axis <0.000000> speed <12.000000>;
		turn flo6 to x-axis <0.000000> speed <12.000000>;
		turn arm7 to z-axis <0.000000> speed <12.000000>;
		turn flo7 to z-axis <0.000000> speed <12.000000>;
		turn arm8 to z-axis <0.000000> speed <12.000000>;
		turn flo8 to z-axis <0.000000> speed <12.000000>;
		
		emit-sfx 256 | 3 from door1;
		emit-sfx 256 | 3 from door2;
		emit-sfx 256 | 3 from door3;
		emit-sfx 256 | 3 from door4;
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 125;
	}
	sleep 47;
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	turn doors to y-axis <-45.000000> now;
	turn arms2 to y-axis <45.000000> now;
	unitviewer = FALSE;
	spray = 0;
	call-script InitState();
	start-script Tangue();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray == 1 )
	{
		piecenum = beam2;
	}
	if( spray == 2 )
	{
		piecenum = beam3;
	}
	if( spray == 3 )
	{
		piecenum = beam4;
	}
	if( spray == 4 )
	{
		piecenum = beam5;
	}
	if( spray == 5 )
	{
		piecenum = beam6;
	}
	if( spray == 6 )
	{
		piecenum = beam7;
	}
	if( spray == 7 )
	{
		piecenum = beam8;
	}
	++spray;
	if( spray == 8 )
	{
		spray = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.000000>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode arm4 type NOHEATCLOUD;
		explode flo3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode arm1 type NOHEATCLOUD;
		explode arm2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		explode arm3 type NOHEATCLOUD;
		explode arm4 type NOHEATCLOUD;
		explode flo4 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode arm1 type NOHEATCLOUD;
	explode arm2 type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode nano1 type NOHEATCLOUD;
	explode nano2 type NOHEATCLOUD;
	explode pad type NOHEATCLOUD;
	explode arm3 type NOHEATCLOUD;
	explode arm4 type NOHEATCLOUD;
	explode flo1 type NOHEATCLOUD;
	return (corpsetype);
}
