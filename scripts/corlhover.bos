#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, turret2, 
		barrel1a, barrel1b, barrel2a, barrel2b,
       flare1a, flare1b, flare2a, flare2b, 
       wake01, wake02, wake03, wake04, wake05, wake06, wake07, wake08;

static-var  Static_Var_1, restore_delay, gun_1, gun_2;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from body;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from turret2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1, Func_Var_2;
	Func_Var_1 = 3;
	Func_Var_2 = 4;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx Func_Var_1 from wake01;
			emit-sfx Func_Var_1 from wake02;
			emit-sfx Func_Var_1 from wake03;
			emit-sfx Func_Var_1 from wake04;
			emit-sfx Func_Var_1 from wake05;
			emit-sfx Func_Var_1 from wake06;
			emit-sfx Func_Var_1 from wake07;
			emit-sfx Func_Var_1 from wake08;
			emit-sfx Func_Var_2 from wake01;
			emit-sfx Func_Var_2 from wake02;
			emit-sfx Func_Var_2 from wake03;
			emit-sfx Func_Var_2 from wake04;
			emit-sfx Func_Var_2 from wake05;
			emit-sfx Func_Var_2 from wake06;
			emit-sfx Func_Var_2 from wake07;
			emit-sfx Func_Var_2 from wake08;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx Func_Var_1 from wake01;
			emit-sfx Func_Var_1 from wake02;
			emit-sfx Func_Var_1 from wake03;
			emit-sfx Func_Var_1 from wake04;
			emit-sfx Func_Var_1 from wake05;
			emit-sfx Func_Var_1 from wake06;
			emit-sfx Func_Var_1 from wake07;
			emit-sfx Func_Var_1 from wake08;
			emit-sfx Func_Var_2 from wake01;
			emit-sfx Func_Var_2 from wake02;
			emit-sfx Func_Var_2 from wake03;
			emit-sfx Func_Var_2 from wake04;
			emit-sfx Func_Var_2 from wake05;
			emit-sfx Func_Var_2 from wake06;
			emit-sfx Func_Var_2 from wake07;
			emit-sfx Func_Var_2 from wake08;
		}
		if( Static_Var_1 == 3 )
		{
			emit-sfx Func_Var_1 from wake01;
			emit-sfx Func_Var_1 from wake02;
			emit-sfx Func_Var_1 from wake03;
			emit-sfx Func_Var_1 from wake04;
			emit-sfx Func_Var_1 from wake05;
			emit-sfx Func_Var_1 from wake06;
			emit-sfx Func_Var_1 from wake07;
			emit-sfx Func_Var_1 from wake08;
			emit-sfx Func_Var_2 from wake01;
			emit-sfx Func_Var_2 from wake02;
			emit-sfx Func_Var_2 from wake03;
			emit-sfx Func_Var_2 from wake04;
			emit-sfx Func_Var_2 from wake05;
			emit-sfx Func_Var_2 from wake06;
			emit-sfx Func_Var_2 from wake07;
			emit-sfx Func_Var_2 from wake08;
		}
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	gun_1 = 1;
	gun_2 = 1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeves to x-axis <0.000000> speed <50.000000>;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <50.000000>;
	turn turret2 to x-axis <0.000000> speed <35.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <170.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 3 )
	{
		gun_1 = 1;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare1b;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <80.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireSecondary()
{
	++gun_2;
	if( gun_2 == 3 )
	{
		gun_2 = 1;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 1 )
	{
		piecenum = flare2a;
	}
	if( gun_2 == 2 )
	{
		piecenum = flare2b;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1a type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel2a type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel2a type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode barrel1b type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
