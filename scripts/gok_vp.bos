#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, stand1, lathe1, spray1, pad, stand2,
       lathe2, spray2, stand3, lathe3, spray3, gate1, gate2,
       generator, rail1, rail2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from generator;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( !Static_Var_3 )
		{
			turn stand1 to y-axis <115.> speed <100.>;
			turn stand3 to y-axis <-115.> speed <100.>;
			wait-for-turn stand1 around y-axis;
			wait-for-turn stand3 around y-axis;
			sleep 250;
			move stand1 to z-axis [19.] speed [10.];
			move stand1 to x-axis [-3.8] speed [2.];
			move stand3 to z-axis [19.] speed [10.];
			move stand3 to x-axis [3.8] speed [2.];
			wait-for-move stand1 along y-axis;
			wait-for-move stand1 along x-axis;
			wait-for-move stand3 along y-axis;
			wait-for-move stand3 along x-axis;
			sleep 250;
			set YARD_OPEN to 1;
			while( !get YARD_OPEN )
			{
				set BUGGER_OFF to 1;
				sleep 1500;
				set YARD_OPEN to 1;
			}
			set BUGGER_OFF to 0;
			set INBUILDSTANCE to 1;
			currentstate = 0;
		}
		if( Static_Var_3 )
		{
			set INBUILDSTANCE to 0;
			set YARD_OPEN to 0;
			while( get YARD_OPEN )
			{
				set BUGGER_OFF to 1;
				sleep 1500;
				set YARD_OPEN to 0;
			}
			set BUGGER_OFF to 0;
			set ARMORED to 1;
			turn stand1 to y-axis <100.> speed <30.>;
			turn stand3 to y-axis <-100.> speed <30.>;
			sleep 500;
			move stand1 to z-axis [0.] speed [10.];
			move stand1 to x-axis [0.] speed [2.];
			move stand3 to z-axis [0.] speed [10.];
			move stand3 to x-axis [0.] speed [2.];
			wait-for-move stand1 along y-axis;
			wait-for-move stand1 along x-axis;
			wait-for-move stand3 along y-axis;
			wait-for-move stand3 along x-axis;
			sleep 250;
			turn stand1 to y-axis <0.> speed <100.>;
			turn stand3 to y-axis <0.> speed <100.>;
			wait-for-turn stand1 around y-axis;
			wait-for-turn stand3 around y-axis;
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = spray1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = spray2;
		Static_Var_1 = 2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = spray3;
		Static_Var_1 = 0;
		return (0);
	}
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type NOHEATCLOUD;
		explode stand1 type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		explode stand2 type NOHEATCLOUD;
		explode stand3 type NOHEATCLOUD;
		explode gate1 type NOHEATCLOUD;
		explode gate2 type NOHEATCLOUD;
		explode generator type NOHEATCLOUD;
		explode rail1 type NOHEATCLOUD;
		explode rail2 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode hull type NOHEATCLOUD;
	explode stand1 type SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pad type NOHEATCLOUD | FALL | SMOKE;
	explode stand2 type SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode stand3 type SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate1 type FALL | EXPLODE_ON_HIT | FALL | SMOKE;
	explode gate2 type FALL | EXPLODE_ON_HIT | FALL | SMOKE;
	explode generator type SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rail1 type FALL | NOHEATCLOUD;
	explode rail2 type FALL | NOHEATCLOUD;
	return (corpsetype);
}
