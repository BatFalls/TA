#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, ring, turret1, turret2, bladestop, bladesbottom,
       wing1, wing2, wing3, wing2top, wing3top, engine, 
       sleeve1, sleeve2, gun11, gun12, gun21, gun22, flare21, flare22, flare11, flare12;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, gun_1, gun_2;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8


activatescr()
{
	if( TRUE )
	{
		spin bladestop around y-axis speed <600.351648> accelerate <50.005495>;
		spin bladesbottom around y-axis speed <-600.351648> accelerate <50.005495>;
		turn wing2top to z-axis <90.016484> speed <30.000000>;
		turn wing3top to z-axis <-90.016484> speed <30.000000>;
		sleep 1000;
	}
	sleep 102;
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin bladestop around y-axis decelerate <20.005495>;
		stop-spin bladesbottom around y-axis decelerate <20.005495>;
		turn wing2top to z-axis <0.000000> speed <30.000000>;
		turn wing3top to z-axis <0.000000> speed <30.000000>;
	}
	sleep 71;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay1()
{
	sleep 2500;
	turn sleeve1 to x-axis <0.000000> speed <100.000000>;
	turn turret1 to y-axis <0.000000> speed <70.000000>;
}

RestoreAfterDelay2()
{
	sleep 2500;
	turn sleeve2 to x-axis <0.000000> speed <100.000000>;
	turn turret2 to y-axis <0.000000> speed <70.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <150.000000>;
	turn sleeve1 to x-axis <0.> - pitch speed <150.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <150.000000>;
	turn sleeve2 to x-axis <0.> - pitch speed <150.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}
}

FireSecondary()
{
	++gun_2;
	if (gun_2 == 2)
	{
		gun_2 = 0;
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flare11;
	}
	if (gun_1 == 1)
	{
		piecenum = flare12;
	}
}

QuerySecondary(piecenum)
{
	if (gun_2 == 0)
	{
		piecenum = flare21;
	}
	if (gun_2 == 1)
	{
		piecenum = flare22;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode ring type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing2top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode wing3top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode bladestop type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode bladesbottom type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ring type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing2top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wing3top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bladestop type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode bladesbottom type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
