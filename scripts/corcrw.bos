#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare1, lflare2, dflare1a, dflare1b, dflare2a, dflare2b, base,
       body, winglets, wing1, wing2, wing3, wing4, laser1, laser2,
       rotate1, duallas1, rotate2, duallas2, aim;

static-var  statechg_DesiredState, statechg_StateChanging, gun_1, gun_2;

// Signal definitions
#define SIG_AIM			2
#define SIG_AIM_2		4
#define SIG_AIM_3		8

activatescr()
{
	if( TRUE )
	{
		turn rotate1 to y-axis <0.000000> now;
		turn duallas1 to y-axis <0.000000> now;
		turn rotate2 to y-axis <0.000000> now;
		turn duallas2 to y-axis <0.000000> now;
		turn rotate1 to y-axis <-30.000000> speed <38.945055>;
		turn duallas1 to y-axis <30.000000> speed <38.945055>;
		turn rotate2 to y-axis <30.000000> speed <38.945055>;
		turn duallas2 to y-axis <-30.000000> speed <38.945055>;
		sleep 800;
	}
	sleep 60;
}

deactivatescr()
{
	if( TRUE )
	{
		turn rotate1 to y-axis <-30.000000> now;
		turn duallas1 to y-axis <30.000000> now;
		turn rotate2 to y-axis <30.000000> now;
		turn duallas2 to y-axis <-30.000000> now;
		turn rotate1 to y-axis <0.000000> speed <38.945055>;
		turn duallas1 to y-axis <0.000000> speed <38.945055>;
		turn rotate2 to y-axis <0.000000> speed <38.945055>;
		turn duallas2 to y-axis <0.000000> speed <38.945055>;
		sleep 800;
	}
	sleep 60;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	set ARMORED to 1;
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	set ARMORED to 0;
}

AimFromPrimary(piecenum)
{
	piecenum = aim;
}

AimPrimary(piecenum)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	return (1);
}

FirePrimary()
{
	++gun_1;
	if ( gun_1 == 4)
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = dflare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = dflare2a;
	}
	if( gun_1 == 2 )
	{
		piecenum = dflare1b;
	}
	if( gun_1 == 3 )
	{
		piecenum = dflare2b;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = aim;
}

AimSecondary(piecenum)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

QuerySecondary(piecenum)
{
	piecenum = lflare1;
}

AimFromTertiary(piecenum)
{
	piecenum = aim;
}

AimTertiary(piecenum)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = lflare2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode wing1 type NOHEATCLOUD;
		explode wing2 type NOHEATCLOUD;
		explode wing3 type NOHEATCLOUD;
		explode wing4 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode wing1 type SHATTER | NOHEATCLOUD;
		explode wing2 type SHATTER | NOHEATCLOUD;
		explode wing3 type FALL | NOHEATCLOUD;
		explode wing4 type FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode wing1 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wing2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wing3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wing4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
