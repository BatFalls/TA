#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, core, decor, decor1, decor2, decor3, decor4, decor5,
       decor6, decor7, decor8, socle, turret, turretrecoil, arm, system,
       backpack, plate1, plate2, pitchturret, gun, barrel, plate3, plate4,
       plate5, flare;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from base;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from arm;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis heading speed <30.>;
	turn pitchturret to x-axis <0.> - pitch speed <20.>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare;
	turn turretrecoil to x-axis <-10.> speed <37.>;
	sleep 150;
	turn turretrecoil to x-axis <-10.> speed <15.>;
	sleep 150;
	turn turretrecoil to x-axis <-10.> speed <5.>;
	sleep 150;
	turn turretrecoil to x-axis <0.> speed <4.>;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	explode backpack type NOHEATCLOUD | BITMAP1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | SHATTER;
		explode decor2 type NOHEATCLOUD | SHATTER;
		explode decor1 type NOHEATCLOUD | SHATTER;
		explode decor3 type NOHEATCLOUD | SHATTER;
		explode decor5 type NOHEATCLOUD | SHATTER;
		explode decor4 type NOHEATCLOUD | SHATTER;
		explode decor6 type NOHEATCLOUD | SHATTER;
		explode decor8 type NOHEATCLOUD | BITMAP5;
		explode decor7 type NOHEATCLOUD | SHATTER;
		explode pitchturret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode turretrecoil type SHATTER | NOHEATCLOUD;
		explode decor2 type NOHEATCLOUD | SHATTER;
		explode decor1 type NOHEATCLOUD | SHATTER;
		explode decor3 type NOHEATCLOUD | SHATTER;
		explode decor5 type NOHEATCLOUD | SHATTER;
		explode decor4 type NOHEATCLOUD | SHATTER;
		explode decor6 type NOHEATCLOUD | SHATTER;
		explode decor8 type NOHEATCLOUD | SHATTER;
		explode decor7 type NOHEATCLOUD | SHATTER;
		explode pitchturret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | SHATTER;
	explode turretrecoil type SHATTER | BITMAP2;
	explode decor2 type NOHEATCLOUD | SHATTER;
	explode decor1 type NOHEATCLOUD | SHATTER;
	explode decor3 type NOHEATCLOUD | SHATTER;
	explode decor5 type NOHEATCLOUD | SHATTER;
	explode decor4 type NOHEATCLOUD | SHATTER;
	explode decor6 type NOHEATCLOUD | SHATTER;
	explode decor8 type NOHEATCLOUD | SHATTER;
	explode decor7 type NOHEATCLOUD | SHATTER;
	explode pitchturret type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
