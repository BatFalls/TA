#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, gun, struct1, struct2, struct3, struct4, struct5, struct6, struct7, struct8, struct9, struct10, logo;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, shield_pos;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

ShieldOn()
{
	Static_Var_1 = 1;
}

ShieldOff()
{
	Static_Var_1 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script ShieldOn();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script ShieldOff();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 1;
	start-script SmokeUnit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	sleep 100;
	return (Static_Var_1);
}

FirePrimary()
{
	explode gun type NOHEATCLOUD | FALL;
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = shield_pos;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode struct1 type NOHEATCLOUD;
		explode struct2 type NOHEATCLOUD;
		explode struct3 type NOHEATCLOUD;
		explode struct4 type NOHEATCLOUD;
		explode struct5 type NOHEATCLOUD;
		explode struct6 type NOHEATCLOUD;
		explode struct7 type NOHEATCLOUD;
		explode struct8 type NOHEATCLOUD;
		explode struct9 type NOHEATCLOUD;
		explode logo type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode struct1 type FALL | NOHEATCLOUD ;
		explode struct2 type FALL | NOHEATCLOUD ;
		explode struct3 type FALL | NOHEATCLOUD ;
		explode struct4 type FALL | NOHEATCLOUD ;
		explode struct5 type FALL | NOHEATCLOUD ;
		explode struct6 type FALL | NOHEATCLOUD ;
		explode struct7 type FALL | NOHEATCLOUD ;
		explode struct8 type FALL | NOHEATCLOUD ;
		explode struct9 type FALL | NOHEATCLOUD ;
		explode logo type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode struct1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT ;
	explode struct2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct4 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct5 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct6 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct7 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct8 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode struct9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode logo type NOHEATCLOUD;
	return (corpsetype);
}
