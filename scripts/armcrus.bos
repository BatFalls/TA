#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, flare1, barrel2, flare2, cannon1, cannon2,
       wake1, wake2, foreturret, foregun, foreflare, aftturret, aftgun, aftflare,
       ground;

static-var  gun_1, restore_delay, gun_2, Static_Var_4, Static_Var_5,
            bAiming, Static_Var_7;

// Signal definitions
#define SIG_AIM			2
#define SIG_AIM_3		4
#define SIG_AIM_4		8
#define SIG_AIM_5		16
#define SIG_MOVE		32


SetDirection(heading)
{
	var Func_Var_2;
	Func_Var_2 = ( get ABS(Static_Var_7) - get ABS(heading) ) / 2;
	turn ground to y-axis heading speed Func_Var_2;
	turn base to y-axis <0.000000> - heading speed Func_Var_2;
	Static_Var_7 = heading;
}

RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 238 )
		{
			Func_Var_3 = 263 - get ABS(Func_Var_2);
			turn ground to x-axis Func_Var_2 speed Func_Var_3 * <0.021978>;
			wait-for-turn ground around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_4 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_5 = Static_Var_5 + Static_Var_4;
	Static_Var_4 = get ABS(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to z-axis Static_Var_5 speed Static_Var_4 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		Static_Var_4 = get ABS(Static_Var_5);
	}
	turn base to z-axis <0.000000> speed <1.500000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	turn aftturret to y-axis <180.000000> now;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <55.000000>;
	turn barrel1 to x-axis <0.000000> speed <15.000000>;
	turn barrel2 to x-axis <0.000000> speed <15.000000>;
}

RestoreWeapon4()
{
	sleep 2000;
	turn foreturret to y-axis <0.000000> speed <150.000000>;
	turn foregun to x-axis <0.000000> speed <100.000000>;
}

RestoreWeapon5()
{
	sleep 2000;
	turn aftturret to y-axis <180.000000> speed <150.000000>;
	turn aftgun to x-axis <0.000000> speed <100.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.000000> speed <3.000000>;
		move base to y-axis [0.319995] speed [0.250000];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <3.000000>;
		move base to y-axis [0.000000] speed [0.250000];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		Func_Var_1 = get CURRENT_SPEED * 100 / get MAX_SPEED;
		if( Func_Var_1 < 50 )
		{
			Func_Var_1 = 50;
		}
		sleep 12000 / Func_Var_1;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <3.000000>;
	move base to y-axis [0.000000] speed [0.250000];
}

AimWeapon4(heading, pitch)
{
	
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn foreturret to y-axis heading speed <300.000000>;
	turn foregun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn foreturret around y-axis;
	wait-for-turn foregun around x-axis;
	start-script RestoreWeapon4();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn aftturret to y-axis heading speed <300.000000>;
	turn aftgun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn aftturret around y-axis;
	wait-for-turn aftgun around x-axis;
	start-script RestoreWeapon5();
	return (1);
}

		
FireWeapon4()
{
	show foreflare;
	sleep 150;
	hide foreflare;
}

FireWeapon5()
{
	show aftflare;
	sleep 150;
	hide aftflare;
}

AimFromWeapon4(piecenum)
{
	piecenum = foregun;
}

AimFromWeapon5(piecenum)
{
	piecenum = aftgun;
}

QueryWeapon4(piecenum)
{
	piecenum = foreflare;
}

QueryWeapon5(piecenum)
{
	piecenum = aftflare;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	sleep 150;
}

AimFromTertiary(piecenum)
{
	piecenum = base;
}

QueryTertiary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <110.000000>;
	turn cannon1 to x-axis <0.000000> - pitch speed <90.000000>;
	turn cannon2 to x-axis <0.000000> - pitch speed <90.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn cannon1 around x-axis;
	wait-for-turn cannon2 around x-axis;
	bAiming = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	start-script RockZ(-7,bAiming);
	if( gun_1 )
	{
		show flare2;
		move barrel2 to z-axis [-2.300000] now;
		sleep 150;
		hide flare2;
		move barrel2 to z-axis [0.000000] speed [1.500000];
	}
	else
	{
		show flare1;
		move barrel1 to z-axis [-2.300000] now;
		sleep 150;
		hide flare1;
		move barrel1 to z-axis [0.000000] speed [1.500000];
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 )
	{
		piecenum = flare2;
	}
	else
	{
		piecenum = flare1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide foreflare;
	hide aftflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode foreturret type NOHEATCLOUD;
		explode aftturret type NOHEATCLOUD;
		explode foregun type NOHEATCLOUD;
		explode aftgun type NOHEATCLOUD;
		explode wake1 type NOHEATCLOUD;
		explode wake2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode barrel2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode base type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode foreturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode aftturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode foregun type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode aftgun type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode wake1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode wake2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode foreturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode aftturret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode foregun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode aftgun type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode wake2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
