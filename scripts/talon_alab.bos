#define TA

#include "sfxtype.h"
#include "exptype.h"

piece base, wall1, gate1a, gate1b, gate2a, gate2b, wall2, gate3a, gate3b,
	  gate4a, gate4b, flashPink, flashBlue, lever, Lnano, LnanoP, Rnano, RnanoP;

static-var spray, unitview, statechg_DesiredState, statechg_StateChanging, Static_Var_4, working;

#define SIG_ACTIVATE			2

activatescr()
{
	if( TRUE )
	{
		turn gate1a to z-axis <-35> speed <15>;
		turn gate2a to z-axis <-35> speed <15>;
		turn gate3a to z-axis <35> speed <15>;
		turn gate4a to z-axis <35> speed <15>;
		wait-for-turn gate4a around z-axis;
	}
	sleep 50;
}

deactivatescr()
{
	if( TRUE )
	{
		turn gate1a to z-axis <0> speed <30>;
		turn gate2a to z-axis <0> speed <30>;
		turn gate3a to z-axis <0> speed <30>;
		turn gate4a to z-axis <0> speed <30>;
		wait-for-turn gate4a around z-axis;
	}
	sleep 50;
}

whenbuilding()
{
	while( TRUE )
	{
		if(working == 1)
		{
			move Lnano to z-axis [-6.375] speed [15];
			move Rnano to z-axis [6.375] speed [15];
			wait-for-move Rnano along z-axis;
			sleep 300;
			move Lnano to z-axis [6.375] speed [15];
			move Rnano to z-axis [-6.375] speed [15];
			wait-for-move Rnano along z-axis;
			sleep 300;
		}
		if(working == 0)
		{
			move Lnano to z-axis [0] speed [5];
			move Rnano to z-axis [0] speed [5];
			wait-for-move Rnano along z-axis;
			sleep 500;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	unitview = FALSE;
	spray = 0;
	working = 0;
	call-script InitState();
	start-script whenbuilding();
	start-script SmokeUnit();
}

SweetSpot (piecenum)
{
	piecenum = base;
}

Demo()
{
	unitview = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	working = 1;
}

StopBuilding()
{
	working = 0;
}

QueryBuildInfo(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	if(spray == 1)
	{
		piecenum = LnanoP;
	}
	if(spray == 2)
	{
		piecenum = RnanoP;
	}
	++spray;
	if(spray == 3)
	{
		spray = 1;
	}
}

Killed(severity, corpsetype)
	{
	if (severity <= 25)
		{
		corpsetype = 1;
		explode wall1 type	NOHEATCLOUD;
		explode gate1a type	NOHEATCLOUD;
		explode gate1b type	NOHEATCLOUD;
		explode gate2a type	NOHEATCLOUD;
		explode gate2b type	NOHEATCLOUD;
		explode wall2 type	NOHEATCLOUD;
		explode gate3a type	NOHEATCLOUD;
		explode gate3b type	NOHEATCLOUD;
		explode gate4a type	NOHEATCLOUD;
		explode gate4b type	NOHEATCLOUD;
		return(corpsetype);
		}
	if (severity <= 50)
		{
		corpsetype = 2;
		explode wall1 type	NOHEATCLOUD | FALL;
		explode gate1a type	NOHEATCLOUD | FALL;
		explode gate1b type	NOHEATCLOUD | FALL;
		explode gate2a type	NOHEATCLOUD | FALL;
		explode gate2b type	NOHEATCLOUD | FALL;
		explode wall2 type	NOHEATCLOUD | FALL;
		explode gate3a type	NOHEATCLOUD | FALL;
		explode gate3b type	NOHEATCLOUD | FALL;
		explode gate4a type	NOHEATCLOUD | FALL;
		explode gate4b type	NOHEATCLOUD | FALL;
		return(corpsetype);
		}
	if (severity <= 99)
		{
		corpsetype = 3;
		explode wall1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate1a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate1b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate2a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate2b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode wall2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate3a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate3b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate4a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode gate4b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return(corpsetype);
		}
	corpsetype = 3;
	explode wall1 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate1a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate1b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate2a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate2b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode wall2 type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate3a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate3b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate4a type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode gate4b type	FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return(corpsetype);
	}
