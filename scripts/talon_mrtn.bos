#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, Rflare, Lflare, 
       Rbarrel1, Rbarrel2, Rbarrel3, Lbarrel1, Lbarrel2, Lbarrel3, 
       Rsleeves, Lsleeves, gine1, gine2, gine3, Rcanon, Lcanon;

static-var  restore_delay, gun1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.021978>;
	turn base to x-axis anglex speed <105.021978>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	restore_delay = 3000;
	gun1 = 0;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <10.000000>;
	turn Rsleeves to x-axis <0.000000> speed <4.000000>;
	turn Lsleeves to x-axis <0.000000> speed <4.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn Rsleeves to x-axis <0.000000> - pitch speed <50.000000>;
	turn Lsleeves to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn Rsleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun1 == 0)
	{
		sleep 500;
		turn Rcanon to z-axis <120.000000> speed <150.000000>;

	}
	if (gun1 == 1)
	{
		sleep 500;
		turn Lcanon to z-axis <120.000000> speed <150.000000>;
	}
	if (gun1 == 2)
	{
		sleep 500;
		turn Rcanon to z-axis <240.000000> speed <150.000000>;
	}
	if (gun1 == 3)
	{
		sleep 500;
		turn Lcanon to z-axis <240.000000> speed <150.000000>;

	}
	if (gun1 == 4)
	{
		sleep 500;
		turn Rcanon to z-axis <0.000000> speed <150.000000>;
	}
	if (gun1 == 5)
	{
		sleep 500;
		turn Lcanon to z-axis <0.000000> speed <150.000000>;
	}
	
	++gun1;
	if (gun1 == 6)
	{
		gun1 = 0;
	}
}

QueryPrimary(piecenum)
{
	if (gun1 == 0 or gun1 == 2 or gun1 == 4 )
	{
		piecenum = Rflare;
	}
	if (gun1 == 1 or gun1 == 3 or gun1 == 5 )
	{
		piecenum = Lflare;
	}	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode Rsleeves type NOHEATCLOUD;
		explode Lsleeves type NOHEATCLOUD;
		explode gine1 type NOHEATCLOUD;
		explode gine2 type NOHEATCLOUD;
		explode gine3 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode Rcanon type NOHEATCLOUD;
		explode Lcanon type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gine1 type NOHEATCLOUD;
		explode gine2 type NOHEATCLOUD;
		explode gine3 type NOHEATCLOUD;
		explode Rcanon type NOHEATCLOUD | FALL;
		explode Lcanon type NOHEATCLOUD | FALL;
		explode Rsleeves type NOHEATCLOUD | FALL;
		explode Lsleeves type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode gine1 type NOHEATCLOUD;
	explode gine2 type NOHEATCLOUD;
	explode gine3 type NOHEATCLOUD;
	explode Rcanon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lcanon type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rsleeves type NOHEATCLOUD | FALL;
	explode Lsleeves type NOHEATCLOUD | FALL;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
