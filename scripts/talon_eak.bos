#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, body, weapona, weaponb, sleevesa, sleevesb, flarea, flareb,
       rthigh, lthigh, rleg, lleg, msl, msl1, msl2, msl3, msl4;

static-var  bSpeed, gun_1, bMoving, bAiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_1			8
#define SIG_AIM_2			16
#define SIG_AIM_3			32


Walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] speed [11.927710] * bSpeed / [0.000610];
		turn pelvis to x-axis <7.000000> speed <83.489011> * bSpeed / <0.549451>;
		turn lthigh to x-axis <-42.000000> speed <500.961538> * bSpeed / <0.549451>;
		turn rthigh to x-axis <18.000000> speed <214.697802> * bSpeed / <0.549451>;
		turn pelvis to y-axis <4.000000> speed <47.708791> * bSpeed / <0.549451>;;
		turn rleg to x-axis <39.000000> speed <465.175824> * bSpeed / <0.549451>;
		turn lleg to x-axis <35.000000> speed <500.961538> * bSpeed / <0.549451>;
		sleep 4000 / bSpeed;
	}
	if( bMoving )
	{
		turn pelvis to y-axis <4.000000> now;
		sleep 4000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn pelvis to x-axis <5.000000> speed <13.285714> * bSpeed / <0.549451>;
		turn lthigh to x-axis <-30.000000> speed <79.730769> * bSpeed / <0.549451>;
		turn rthigh to x-axis <9.000000> speed <59.796703> * bSpeed / <0.549451>;
		turn pelvis to y-axis <3.000000> speed <6.642857> * bSpeed / <0.549451>;
		turn rleg to x-axis <52.000000> speed <86.373626> * bSpeed / <0.549451>;
		turn lleg to x-axis <20.000000> speed <93.016484> * bSpeed / <0.549451>;
		sleep 10000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed [8.534479] * bSpeed / [0.000610];
		turn pelvis to x-axis <5.000000> speed <30.>;
		turn lthigh to x-axis <-16.000000> speed <119.478022> * bSpeed / <0.549451>;
		turn rthigh to x-axis <0.000000> speed <76.807692> * bSpeed / <0.549451>;
		turn pelvis to y-axis <1.000000> speed <17.065934> * bSpeed / <0.549451>;
		turn rleg to x-axis <58.000000> speed <51.203297> * bSpeed / <0.549451>;
		turn lleg to x-axis <0.000000> speed <102.412088> * bSpeed / <0.549451>;
		sleep 9000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn pelvis to x-axis <4.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn lthigh to x-axis <7.000000> speed <196.291209> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-6.000000> speed <51.203297> * bSpeed / <0.549451>;
		turn pelvis to y-axis <0.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn rleg to x-axis <44.000000> speed <119.478022> * bSpeed / <0.549451>;
		turn lleg to x-axis <6.000000> speed <85.340659> * bSpeed / <0.549451>;
		sleep 9000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn pelvis to x-axis <5.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn lthigh to x-axis <11.000000> speed <34.137363> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-34.000000> speed <238.961538> * bSpeed / <0.549451>;
		turn pelvis to y-axis <-1.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn rleg to x-axis <60.000000> speed <230.428571> * bSpeed / <0.549451>;
		turn lleg to x-axis <15.000000> speed <119.478022> * bSpeed / <0.549451>;
		sleep 8000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <13.000000> speed <17.065934> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-43.000000> speed <76.807692> * bSpeed / <0.549451>;
		turn pelvis to y-axis <-2.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn rleg to x-axis <35.000000> speed <136.549451> * bSpeed / <0.549451>;
		sleep 7000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn pelvis to x-axis <5.000000> speed <30.>;
		turn lthigh to x-axis <17.000000> speed <34.137363> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-48.000000> speed <42.670330> * bSpeed / <0.549451>;
		turn pelvis to y-axis <-3.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn lleg to x-axis <20.000000> speed <30.>;
		sleep 8000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] speed [11.927710] * bSpeed / [0.000610];
		turn pelvis to x-axis <7.000000> speed <23.851648> * bSpeed / <0.549451>;
		turn lthigh to x-axis <15.000000> speed <23.851648> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-40.000000> speed <95.417582> * bSpeed / <0.549451>;
		turn pelvis to y-axis <-4.000000> speed <11.923077> * bSpeed / <0.549451>;
		turn lleg to x-axis <31.000000> speed <131.203297> * bSpeed / <0.549451>;
		sleep 4000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-1.000000] now;
		turn pelvis to x-axis <5.000000> speed <13.285714> * bSpeed / <0.549451>;
		turn lthigh to x-axis <9.000000> speed <39.862637> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-34.000000> speed <39.862637> * bSpeed / <0.549451>;
		turn pelvis to y-axis <-3.000000> speed <6.642857> * bSpeed / <0.549451>;
		turn lleg to x-axis <44.000000> speed <86.373626> * bSpeed / <0.549451>;
		sleep 10000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed [8.534479] * bSpeed / [0.000610];
		turn pelvis to x-axis <5.000000> now;
		turn lthigh to x-axis <1.000000> speed <68.274725> * bSpeed / <0.549451>;
		turn rthigh to x-axis <-26.000000> speed <68.274725> * bSpeed / <0.549451>;
		turn lleg to x-axis <55.000000> speed <93.879121> * bSpeed / <0.549451>;
		sleep 9000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn pelvis to x-axis <4.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn lthigh to x-axis <-17.000000> speed <153.615385> * bSpeed / <0.549451>;
		turn rthigh to x-axis <4.000000> speed <256.032967> * bSpeed / <0.549451>;
		turn pelvis to y-axis <0.000000> speed <17.065934> * bSpeed / <0.549451>;
		turn rleg to x-axis <0.000000> speed <273.098901> * bSpeed / <0.549451>;
		turn lleg to x-axis <60.000000> speed <42.670330> * bSpeed / <0.549451>;
		sleep 8000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn pelvis to x-axis <5.000000> speed <8.532967> * bSpeed / <0.549451>;
		turn lthigh to x-axis <-30.000000> speed <110.945055> * bSpeed / <0.549451>;
		turn rthigh to x-axis <10.000000> speed <51.203297> * bSpeed / <0.549451>;
		turn rleg to x-axis <5.000000> speed <153.615385> * bSpeed / <0.549451>;
		turn lleg to x-axis <56.000000> speed <34.137363> * bSpeed / <0.549451>;
		sleep 8000 / bSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] now;
		turn lthigh to x-axis <-44.000000> speed <119.478022> * bSpeed / <0.549451>;
		turn rthigh to x-axis <12.000000> speed <17.065934> * bSpeed / <0.549451>;
		turn pelvis to y-axis <2.000000> speed <30.>;
		turn lleg to x-axis <56.000000> speed <30.>;
		sleep 7000 / bSpeed;
	}
	move pelvis to y-axis [0.000000] now;
	turn pelvis to x-axis <5.000000> speed <30.>;
	turn lthigh to x-axis <-44.000000> speed <30.>;
	turn rthigh to x-axis <14.000000> speed <17.065934> * bSpeed / <0.549451>;
	turn pelvis to y-axis <3.000000> speed <8.532967> * bSpeed / <0.549451>;
	turn lleg to x-axis <26.000000> speed <256.032967> * bSpeed / <0.549451>;
	sleep 8000 / bSpeed;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script Walk();
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn rthigh to x-axis <0.000000> speed <75.000000>;
				turn rleg to x-axis <0.000000> speed <75.000000>;
				turn lthigh to x-axis <0.000000> speed <75.000000>;
				turn lleg to x-axis <0.000000> speed <75.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from pelvis;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	gun_1 = 0;
	bSpeed = 40;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

RestoreAfterDelay()
{
	sleep 4000;
	turn body to y-axis <0.000000> speed <100.000000>;
	turn sleevesa to x-axis <0.000000> speed <20.000000>;
	turn sleevesb to x-axis <0.000000> speed <20.000000>;
}

AimWeapon1(heading, pitch)
{
    signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn body to y-axis heading speed <150.0>;
	turn sleevesa to x-axis <0.0> - pitch speed <100.0>;
	wait-for-turn body around y-axis;
	wait-for-turn sleevesa around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{

}

AimFromWeapon1(piecenum)
{
	piecenum = body;
}

QueryWeapon1(piecenum)
{
	piecenum = flarea;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn sleevesb to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn body around y-axis;
	wait-for-turn sleevesb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{

}

QuerySecondary(piecenum)
{
	piecenum = flareb;
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	++gun_1;
	if( gun_1 == 4 )
	{	
		gun_1 = 0;
    }
}

QueryTertiary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = msl1;
	}
	if( gun_1 == 1 )
	{
		piecenum = msl2;
	}
	if( gun_1 == 2 )
	{
		piecenum = msl3;
	}
	if( gun_1 == 3 )
	{
		piecenum = msl4;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = msl;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pelvis type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode weapona type NOHEATCLOUD;
		explode weaponb type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode rthigh type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pelvis type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode weapona type NOHEATCLOUD | FALL;
		explode weaponb type NOHEATCLOUD | FALL;
		explode lleg type NOHEATCLOUD | FALL;
		explode rthigh type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pelvis type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	explode weapona type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode weaponb type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rthigh type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
