#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, body, ring, antihull, turret, pitchturret, 
		fire, gem1, gem2, wake1, wake2, wake3, wake4, wake5, wake6;

static-var  Static_Var_1;

StartMoving()
{
	signal 4;
	set-signal-mask 4;
}

StopMoving()
{
	signal 4;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
		}
		sleep 325;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script waking();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	hide fire;
	hide wake1;
	hide wake2;
	hide wake3;
	hide wake4;
	hide wake5;
	hide wake6;	
	move turret to y-axis [-1.5] now;
	turn pitchturret to x-axis <-90.> now;	
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	spin ring around z-axis speed <0.0> accelerate <-1.0>;
	turn pitchturret to x-axis <-90.> speed <60.>;
	wait-for-turn pitchturret around x-axis;
	move turret to y-axis [-1.5] speed [1.];
	
}

QueryPrimary(PieceNum)
{
	PieceNum = fire;
}

AimFromPrimary(PieceNum)
{
	PieceNum = pitchturret;
}

AimPrimary(Heading, Pitch)
{
	signal 2;
	set-signal-mask 2;
	spin ring around z-axis speed <15.0>;
	move turret to y-axis [0.] speed [9.];
	wait-for-move turret along y-axis;
	turn turret to y-axis Heading speed <180.00>;
	turn pitchturret to x-axis <0.00> - Pitch speed <120.00>;
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	start-script RestoreAfterDelay();
	return(1);
}

FirePrimary(Random)
{

}

SweetSpot(PieceNum)
{
	PieceNum = base;
}

Killed(Severity, CorpseType, Random)
{
	CorpseType = 1;
	explode hull type NOHEATCLOUD;
	explode ring type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (CorpseType);
	if( Severity <= 50 )
	{
		CorpseType = 2;
		explode gem1 type NOHEATCLOUD | FALL;
		explode gem2 type NOHEATCLOUD | FALL;
		return (CorpseType);
		
	}
	explode pitchturret type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	CorpseType = 3;
	return (CorpseType);
	
}
