#define TA			// This is a TA script
					// Made by skymyj

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, trap, missile, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14,
		turret2, airsleeve2, airbarrel2a, airbarrel2b, airflare2a, airflare2b,
		turret3, airsleeve3, airbarrel3a, airbarrel3b, airflare3a, airflare3b, 
		torpedo1, torpedo2, flare1a, flare1b, flare2a, flare2b,
		pad1, pad2, pad3, pad4, pads, aimpad, light, land1, land2, land3, land4 ;

static-var  gun_1, gun_2, gun_3, gun_4, gun_5, gun_6, gun_7, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_3			4
#define SIG_AIM_4			8
#define SIG_AIM_5			16
#define SIG_AIM_6			32
#define SIG_AIM_7			64
#define SIG_AIM_8			128
#define SIG_AIM_9			256
#define SIG_MOVE			512

RockOnWaves()
{
	while( TRUE )
	{
		turn base to x-axis <0.75> speed <0.25>;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <-0.75> speed <0.25>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.75> speed <0.25>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from missile;
			emit-sfx smoketype from body;
			emit-sfx smoketype from pad1;
			emit-sfx smoketype from pad4;
			emit-sfx smoketype from turret3;			
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	gun_4 = 0;
	gun_5 = 0;
	gun_6 = 0;
	gun_7 = 0;	
	
	restore_delay = 3000;
	
	hide airflare2a;
	hide airflare2b;
	hide airflare3a;
	hide airflare3b;
	turn turret2 to y-axis <180.000000> now;
	turn airsleeve2 to x-axis <-30.000000> now;
	turn airsleeve3 to x-axis <-30.000000> now;
	start-script SmokeUnit();	
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from w1;
		emit-sfx 2 from w2;
		emit-sfx 2 from w3;
		emit-sfx 2 from w4;
		emit-sfx 2 from w5;
		emit-sfx 2 from w6;
		emit-sfx 2 from w7;
		emit-sfx 2 from w8;
		emit-sfx 2 from w9;
		emit-sfx 2 from w10;
		emit-sfx 2 from w11;
		emit-sfx 2 from w12;
		emit-sfx 2 from w13;
		emit-sfx 2 from w14;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4)
{
	Func_Var_1 = land1;
	Func_Var_2 = land2;
	Func_Var_3 = land3;
	Func_Var_4 = land4;
}

CloseTrap()
{
	sleep restore_delay * 1.5;
	turn trap to x-axis <0.000000> speed <30.000000>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn trap to x-axis <120.000000> speed <30.000000>;
	wait-for-turn trap around x-axis;
	start-script CloseTrap();
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
}

AimFromTertiary(piecenum)
{
	piecenum = light;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <180> speed <50>;
	turn airsleeve2 to x-axis <-30> speed <50>;
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn turret3 to y-axis <0> speed <50>;
	turn airsleeve3 to x-axis <-30> speed <50>;
}

AimFromWeapon4(piecenum)
{
	piecenum = turret2;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret3;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret2 to y-axis heading speed <275>;
	turn airsleeve2 to x-axis <0.000000> - pitch speed <275>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn airsleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn turret3 to y-axis heading speed <275>;
	turn airsleeve3 to x-axis <0.000000> - pitch speed <275>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn airsleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireWeapon4()
{
	if( gun_2 == 0 )
	{
		emit-sfx 1026 from airflare2a;
		move airbarrel2a to z-axis [-3.] now;
		sleep 80;
		move airbarrel2a to z-axis [0.] speed [5.];
	}
	if( gun_2 == 1 )
	{
		emit-sfx 1026 from airflare2b;
		move airbarrel2b to z-axis [-3.] now;
		sleep 80;
		move airbarrel2b to z-axis [0.] speed [5.];
	}
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
}

FireWeapon5()
{
	if( gun_3 == 0 )
	{
		emit-sfx 1026 from airflare3a;
		move airbarrel3a to z-axis [-3.] now;
		sleep 80;
		move airbarrel3a to z-axis [0.] speed [5.];
	}
	if( gun_3 == 1 )
	{
		emit-sfx 1026 from airflare3b;
		move airbarrel3b to z-axis [-3.] now;
		sleep 80;
		move airbarrel3b to z-axis [0.] speed [5.];
	}
	++gun_3;
	if( gun_3 == 2 )
	{
		gun_3 = 0;
	}
}

QueryWeapon4(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = airflare2a;
	}
	if( gun_2 == 1 )
	{
		piecenum = airflare2b;
	}
}

QueryWeapon5(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = airflare3a;
	}
	if( gun_3 == 1 )
	{
		piecenum = airflare3b;
	}
}

//torpedo

RestoreTorpedo1()
{
	sleep restore_delay;
	turn torpedo1 to y-axis <0> speed <75>;
	wait-for-turn torpedo1 around y-axis;
}

RestoreTorpedo2()
{
	sleep restore_delay;
	turn torpedo2 to y-axis <0> speed <75>;
	wait-for-turn torpedo2 around y-axis;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn torpedo1 to y-axis heading speed <75>;
	turn torpedo1 to x-axis <0> - pitch speed <75>;
	wait-for-turn torpedo1 around y-axis;
	wait-for-turn torpedo1 around x-axis;
	start-script RestoreTorpedo1();
	return (1);
}

AimWeapon7(heading, pitch)
{
	signal SIG_AIM_7;
	set-signal-mask SIG_AIM_7;
	turn torpedo2 to y-axis heading speed <75>;
	turn torpedo2 to x-axis <0> - pitch speed <75>;
	wait-for-turn torpedo2 around y-axis;
	wait-for-turn torpedo2 around x-axis;
	start-script RestoreTorpedo2();
	return (1);
}

FireWeapon6()
{
	++gun_4;
	if (gun_4 == 2)
	{
		gun_4 = 0;
	}
}

FireWeapon7()
{
	++gun_5;
	if (gun_5 == 2)
	{
		gun_5 = 0;
	}
}

QueryWeapon6(piecenum)
{
	if (gun_4 == 0)
	{
		piecenum = flare1a;
	}
	if (gun_4 == 1)
	{
		piecenum = flare1b;
	}
}

QueryWeapon7(piecenum)
{
	if (gun_5 == 0)
	{
		piecenum = flare2a;
	}
	if (gun_5 == 1)
	{
		piecenum = flare2b;
	}
}

AimFromWeapon6(piecenum)
{
	piecenum = torpedo1;
}

AimFromWeapon7(piecenum)
{
	piecenum = torpedo2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode turret3 type NOHEATCLOUD;
		explode airsleeve2 type NOHEATCLOUD;
		explode airsleeve3 type NOHEATCLOUD;
		explode trap type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD | FALL;
		explode turret3 type NOHEATCLOUD | FALL;
		explode airsleeve2 type NOHEATCLOUD | FALL;
		explode airsleeve3 type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode airsleeve2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode airsleeve3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode trap type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
