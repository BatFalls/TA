#define TA			// This is a TA script
					// Made by skymyj

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, trap, missile, deck1, deck2,
		w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, 
		msl1, msl2, msl3, msl4, msl,
		pad1, pad2, pad3, pad4, pad5, pad6, pads, land1, land2, land3, land4, land5, land6 ;

static-var  gun_1, restore_delay;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_3			4
#define SIG_MOVE			8

RockOnWaves()
{
	while( TRUE )
	{
		turn base to x-axis <0.75> speed <0.25>;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <-0.75> speed <0.25>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.75> speed <0.25>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from missile;
			emit-sfx smoketype from body;
			emit-sfx smoketype from pad1;
			emit-sfx smoketype from pad4;			
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	restore_delay = 5000;
	start-script SmokeUnit();	
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from w1;
		emit-sfx 2 from w2;
		emit-sfx 2 from w3;
		emit-sfx 2 from w4;
		emit-sfx 2 from w5;
		emit-sfx 2 from w6;
		emit-sfx 2 from w7;
		emit-sfx 2 from w8;
		emit-sfx 2 from w9;
		emit-sfx 2 from w10;
		emit-sfx 2 from w11;
		emit-sfx 2 from w12;
		emit-sfx 2 from w13;
		emit-sfx 2 from w14;
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5, Func_Var_6)
{
	Func_Var_1 = land1;
	Func_Var_2 = land2;
	Func_Var_3 = land3;
	Func_Var_4 = land4;
	Func_Var_5 = land5;
	Func_Var_6 = land6;
}

CloseTrap()
{
	sleep restore_delay;
	turn trap to x-axis <0.000000> speed <30.000000>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn trap to x-axis <120.000000> speed <30.000000>;
	wait-for-turn trap around x-axis;
	start-script CloseTrap();
	return (1);
}

QueryTertiary(piecenum)
{
	piecenum = missile;
}

AimFromTertiary(piecenum)
{
	piecenum = missile;
}

AimFromWeapon1(piecenum)
{
	piecenum = msl;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	return (1);
}

FireWeapon4()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	}
}

QueryWeapon1(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = msl1;
	}
	if( gun_1 == 1 )
	{
		piecenum = msl2;
	}
	if( gun_1 == 2 )
	{
		piecenum = msl3;
	}
	if( gun_1 == 3 )
	{
		piecenum = msl4;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode deck1 type NOHEATCLOUD;
		explode deck2 type NOHEATCLOUD;
		explode trap type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode deck1 type NOHEATCLOUD | FALL;
		explode deck2 type NOHEATCLOUD | FALL;
		explode trap type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode deck1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode deck2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode trap type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
