#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, beam3, beam4, doors1, doors2, plate1, plate2,
       plate3, plate4, post1, post2, post3, post4, nano1, nano2,
       nano3, nano4, fusion1, fusion2, dome1a, dome1b, dome2a, dome2b,
       base, body, yard, pad, arrow, shield;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7;

activatescr()
{
	if( TRUE )
	{
		turn doors1 to z-axis <0.> now;
		turn doors1 to z-axis <-90.> speed <175.>;
		turn doors2 to z-axis <0.> now;
		turn doors2 to z-axis <90.> speed <175.>;
		sleep 514;
	}
	if( TRUE )
	{
		move plate1 to y-axis [6.] speed [7.];
		move plate2 to y-axis [6.] speed [7.];
		move plate3 to y-axis [6.] speed [7.];
		move plate4 to y-axis [6.] speed [7.];
		sleep 519;
	}
	if( TRUE )
	{
		turn nano1 to y-axis <90.> speed <173.>;
		turn nano2 to y-axis <-90.> speed <173.>;
		turn nano3 to y-axis <-90.> speed <173.>;
		turn nano4 to y-axis <90.> speed <173.>;
		sleep 519;
	}
	sleep 13;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate1 to y-axis [6.] now;
		move plate2 to y-axis [6.] now;
		move plate3 to y-axis [6.] now;
		move plate4 to y-axis [6.] now;
		turn doors1 to z-axis <-90.> now;
		turn doors2 to z-axis <90.> now;
		turn nano1 to y-axis <90.> now;
		turn nano2 to y-axis <-90.> now;
		turn nano3 to y-axis <-90.> now;
		turn nano4 to y-axis <90.> now;
		sleep 518;
	}
	if( TRUE )
	{
		turn nano1 to y-axis <0.> speed <173.>;
		turn nano2 to y-axis <0.> speed <173.>;
		turn nano3 to y-axis <0.> speed <173.>;
		turn nano4 to y-axis <0.> speed <173.>;
		sleep 520;
	}
	if( TRUE )
	{
		move plate1 to y-axis [0.] speed [7.];
		move plate2 to y-axis [0.] speed [7.];
		move plate3 to y-axis [0.] speed [7.];
		move plate4 to y-axis [0.] speed [7.];
		sleep 519;
	}
	if( TRUE )
	{
		turn doors1 to z-axis <0.> speed <173.>;
		turn doors2 to z-axis <0.> speed <173.>;
		sleep 520;
	}
	sleep 23;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	Static_Var_3 = 1;
	Static_Var_4 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_4 )
	{
		Static_Var_3 = requestedstate;
		return (0);
	}
	Static_Var_4 = 1;
	currentstate = Static_Var_3;
	Static_Var_3 = requestedstate;
	while( Static_Var_3 != currentstate )
	{
		if( Static_Var_3 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_3 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	Static_Var_7 = 0;
	Static_Var_6 = 0;
	Static_Var_5 = 0;
	move pad to z-axis [2.] now;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam3;
	}
	if( Static_Var_1 == 3 )
	{
		piecenum = beam4;
	}
	++Static_Var_1;
	if( Static_Var_1 == 4 )
	{
		Static_Var_1 = 0;
	}
}

Demo()
{
	Static_Var_2 = 1;
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	if( !Static_Var_2 )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
}

StopBuilding()
{
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

QueryTertiary(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode beam1 type NOHEATCLOUD;
		explode beam2 type NOHEATCLOUD;
		explode doors1 type NOHEATCLOUD;
		explode doors2 type NOHEATCLOUD;
		explode plate1 type NOHEATCLOUD;
		explode plate2 type NOHEATCLOUD;
		explode post1 type NOHEATCLOUD;
		explode post2 type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode beam1 type FALL;
		explode beam2 type FALL;
		explode doors1 type NOHEATCLOUD;
		explode doors2 type NOHEATCLOUD;
		explode plate1 type NOHEATCLOUD;
		explode plate2 type NOHEATCLOUD;
		explode post1 type FALL;
		explode post2 type FALL;
		explode nano1 type FALL;
		explode nano2 type SHATTER;
		explode pad type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode doors1 type NOHEATCLOUD;
	explode doors2 type NOHEATCLOUD;
	explode plate1 type NOHEATCLOUD;
	explode plate2 type NOHEATCLOUD;
	explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode nano2 type SHATTER | EXPLODE_ON_HIT;
	explode pad type NOHEATCLOUD;
	return (corpsetype);
}
