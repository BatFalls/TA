#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, dome, legs, arm1, claw1a, door1a, turret1a,
       stand1a, gun1a, beam1a, claw1b, door1b, turret1b, stand1b, gun1b,
       beam1b, arm2, claw2a, door2a, turret2a, stand2a, gun2a, beam2a,
       claw2b, door2b, turret2b, stand2b, gun2b, beam2b, rupleg1, rloleg1a,
       rloleg1b, rupleg2, rloleg2a, rloleg2b, rupleg3, rloleg3a, rloleg3b, lupleg1,
       lloleg1a, lloleg1b, lupleg2, lloleg2a, lloleg2b, lupleg3, lloleg3a, lloleg3b;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from gun1a;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from gun2b;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
		if( !Static_Var_6 )
		{
			Static_Var_7 = 0;
		}
		if( Static_Var_6 )
		{
			Static_Var_7 = Static_Var_7 + sleeptime;
			if( Static_Var_7 > 11000 )
			{
				Static_Var_6 = 0;
				Static_Var_7 = 0;
			}
		}
	}
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_2 = get XZ_ATAN(-419);
		Static_Var_8 = 0;
		if( Func_Var_2 != Func_Var_1 )
		{
			Static_Var_8 = 1;
		}
		sleep 100;
		Func_Var_1 = Func_Var_2;
		if( Static_Var_2 OR Static_Var_8 )
		{
			turn rupleg1 to y-axis <0.> speed <40.>;
			turn rupleg1 to z-axis <0.> speed <40.>;
			turn rupleg2 to z-axis <15.> speed <40.>;
			turn rupleg3 to y-axis <17.> speed <40.>;
			turn rupleg3 to z-axis <0.> speed <40.>;
			turn lupleg1 to y-axis <-20.> speed <40.>;
			turn lupleg1 to z-axis <0.> speed <40.>;
			turn lupleg2 to y-axis <0.> speed <40.>;
			turn lupleg2 to z-axis <0.> speed <40.>;
			turn lupleg3 to y-axis <-15.> speed <40.>;
			turn lupleg3 to z-axis <-23.> speed <40.>;
			sleep 225;
			turn rupleg2 to y-axis <17.> speed <40.>;
			turn rupleg2 to z-axis <15.> speed <40.>;
			turn lupleg1 to y-axis <0.> speed <40.>;
			turn lupleg2 to z-axis <-15.> speed <40.>;
			turn lupleg3 to z-axis <1.> speed <40.>;
			turn rupleg1 to z-axis <15.> speed <40.>;
			turn rupleg3 to y-axis <0.> speed <40.>;
			turn rupleg3 to z-axis <0.> speed <40.>;
			sleep 225;
			turn lupleg2 to y-axis <-15.> speed <40.>;
			turn lupleg2 to z-axis <-15.> speed <40.>;
			turn lupleg3 to y-axis <2.> speed <40.>;
			turn rupleg2 to y-axis <17.> speed <40.>;
			turn rupleg2 to z-axis <0.> speed <40.>;
			turn rupleg3 to z-axis <15.> speed <40.>;
			turn rupleg1 to y-axis <27.> speed <40.>;
			turn rupleg1 to z-axis <15.> speed <40.>;
			turn lupleg1 to y-axis <0.> speed <40.>;
			turn lupleg1 to z-axis <-15.> speed <40.>;
			sleep 225;
			turn lupleg2 to y-axis <-18.> speed <40.>;
			turn lupleg2 to z-axis <0.> speed <40.>;
			turn lupleg3 to y-axis <0.> speed <40.>;
			turn lupleg3 to z-axis <-23.> speed <40.>;
			turn rupleg2 to y-axis <0.> speed <40.>;
			turn rupleg2 to z-axis <0.> speed <40.>;
			turn rupleg3 to y-axis <17.> speed <40.>;
			turn rupleg1 to y-axis <21.> speed <40.>;
			turn rupleg1 to z-axis <0.> speed <40.>;
			turn rupleg3 to z-axis <15.> speed <40.>;
			turn lupleg1 to y-axis <-20.> speed <40.>;
			turn lupleg1 to z-axis <-15.> speed <40.>;
			sleep 225;
		}
		if( !Static_Var_2 )
		{
			move rupleg1 to y-axis [0.] now;
			move rupleg2 to y-axis [0.] now;
			move rupleg3 to y-axis [0.] now;
			move lupleg1 to y-axis [0.] now;
			move lupleg2 to y-axis [0.] now;
			move lupleg3 to y-axis [0.] now;
			sleep 50;
		}
	}
}

RequestState()
{
	while( !Static_Var_6 & Static_Var_3 != Static_Var_4 )
	{
		Static_Var_6 = 1;
		if( Static_Var_3 & !Static_Var_4 )
		{
			turn door1a to z-axis <150.> speed <308.>;
			turn door1b to z-axis <-150.> speed <311.>;
			turn door2a to z-axis <150.> speed <308.>;
			turn door2b to z-axis <-150.> speed <311.>;
			wait-for-turn door1a around z-axis;
			wait-for-turn door1b around z-axis;
			wait-for-turn door2a around z-axis;
			wait-for-turn door2b around z-axis;
			move stand1a to y-axis [3.] speed [12.];
			move gun1a to y-axis [1.] speed [2.];
			move stand1b to y-axis [3.] speed [12.];
			move gun1b to y-axis [1.] speed [2.];
			move stand2a to y-axis [3.] speed [12.];
			move gun2a to y-axis [1.] speed [2.];
			move stand2b to y-axis [3.] speed [12.];
			move gun2b to y-axis [1.] speed [2.];
			turn turret1a to y-axis Static_Var_1 speed <160.>;
			turn turret1b to y-axis Static_Var_1 speed <160.>;
			turn turret2a to y-axis Static_Var_1 speed <160.>;
			turn turret2b to y-axis Static_Var_1 speed <160.>;
			wait-for-turn turret1b around y-axis;
			wait-for-turn turret2b around y-axis;
			wait-for-turn turret1a around y-axis;
			wait-for-turn turret2a around y-axis;
			set INBUILDSTANCE to 1;
			Static_Var_4 = 1;
		}
		if( !Static_Var_3 & Static_Var_4 )
		{
			Static_Var_4 = 0;
			set INBUILDSTANCE to 0;
			turn turret1a to y-axis <0.> speed <160.>;
			wait-for-turn turret1a around y-axis;
			turn turret1b to y-axis <0.> speed <160.>;
			wait-for-turn turret1b around y-axis;
			turn turret2a to y-axis <0.> speed <160.>;
			wait-for-turn turret2a around y-axis;
			turn turret2b to y-axis <0.> speed <160.>;
			wait-for-turn turret2b around y-axis;
			move stand1a to y-axis [0.] speed [5.];
			move gun1a to y-axis [0.] speed [1.];
			move stand1b to y-axis [0.] speed [5.];
			move gun1b to y-axis [0.] speed [1.];
			move stand2a to y-axis [0.] speed [5.];
			move gun2a to y-axis [0.] speed [1.];
			move stand2b to y-axis [0.] speed [5.];
			move gun2b to y-axis [0.] speed [1.];
			wait-for-turn door1a around z-axis;
			wait-for-turn door1b around z-axis;
			wait-for-turn door2a around z-axis;
			wait-for-turn door2b around z-axis;
			sleep 250;
			turn door1a to z-axis <0.> speed <212.>;
			turn door1b to z-axis <0.> speed <212.>;
			turn door2a to z-axis <0.> speed <212.>;
			turn door2b to z-axis <0.> speed <212.>;
			sleep 488;
		}
		Static_Var_6 = 0;
	}
}

Shield()
{
	Static_Var_9 = !Static_Var_9;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeUnit();
	start-script MotionControl();
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	Static_Var_3 = 1;
	sleep Rand( 25, 250 );
	start-script RequestState();
}

StopBuilding()
{
	Static_Var_3 = 0;
	sleep 5000;
	if( !Static_Var_3 )
	{
		start-script RequestState();
	}
}

StartMoving()
{
	Static_Var_2 = 1;
}

StopMoving()
{
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	return (Static_Var_9);
}

FirePrimary()
{
	explode dome type 128 | FALL;
	sleep 100;
}

QueryPrimary(piecenum)
{
	piecenum = dome;
}

AimFromPrimary(piecenum)
{
	piecenum = dome;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = beam1a;
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = beam1b;
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = beam2a;
	}
	if( Static_Var_5 == 3 )
	{
		piecenum = beam2b;
	}
	++Static_Var_5;
	if( Static_Var_5 == 4 )
	{
		Static_Var_5 = 0;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type BITMAPONLY | BITMAP1;
		explode lupleg2 type BITMAPONLY | BITMAP5;
		explode lupleg3 type BITMAPONLY | BITMAP1;
		explode rupleg1 type BITMAPONLY | BITMAP1;
		explode rupleg2 type BITMAPONLY | BITMAP1;
		explode rupleg3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type FALL | BITMAP1;
		explode lupleg2 type FALL | BITMAP5;
		explode lupleg3 type FALL | BITMAP1;
		explode rupleg1 type FALL | BITMAP1;
		explode rupleg2 type FALL | BITMAP1;
		explode rupleg3 type FALL | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	if( severity <= 99 )
	{
		explode body type BITMAPONLY | BITMAP1;
		explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	explode body type BITMAPONLY | BITMAP1;
	explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
