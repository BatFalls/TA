#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret1, turret2, turret3, barrel1, barrel2, barrel3,
       flare1, flare2, flare3, sleeve1, support;

static-var  restore_delay, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	Static_Var_2 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> speed <50.000000>;
}

RestoreAfterDelay3()
{
	set-signal-mask SIG_AIM_3;
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <85.000000>;
	turn turret3 to y-axis <0.000000> speed <85.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <50.000000>;
	turn sleeve1 to x-axis <1.000000> - pitch speed <50.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <100.000000>;
	wait-for-turn turret3 around y-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireTertiary()
{
	emit-sfx 1024 + 1 from flare3;
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}

QueryTertiary(piecenum)
{
	piecenum = flare3;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <100.000000>;
	wait-for-turn turret2 around y-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 1 from flare2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret1 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode turret3 type NOHEATCLOUD;
		explode support type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode body type NOHEATCLOUD;		
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret1 type NOHEATCLOUD | FALL;
		explode turret2 type NOHEATCLOUD | FALL;
		explode turret3 type NOHEATCLOUD | FALL;
		explode support type NOHEATCLOUD | FALL;
		explode barrel1 type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD;		
		return (corpsetype);
	}
	corpsetype = 3;
	explode turret1 type NOHEATCLOUD | FALL | SHATTER | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SHATTER | EXPLODE_ON_HIT;
	explode turret3 type NOHEATCLOUD | FALL | SHATTER | EXPLODE_ON_HIT;
	explode support type NOHEATCLOUD | FALL | SHATTER | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD | FALL;
	explode body type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;	
	return (corpsetype);
}
