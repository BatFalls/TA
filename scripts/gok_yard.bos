#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body1, body2, body3, pad,
		pillar1a, pillar1b, pillar2a, pillar2b, pillar3a, pillar3b,
		support1, support2, support3, support4,
        plate1, plate2, plate3, beam1, beam2, beam3;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE		2
#define SIG_AIM				4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body1;
			emit-sfx smoketype from body2;
			emit-sfx smoketype from body3;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
	}
	if( Static_Var_1 == 2 )
	{
		piecenum = beam2;
	}
	++Static_Var_1;
	if( Static_Var_1 == 3 )
	{
		Static_Var_1 = 0;
	}
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin plate1 around y-axis speed <18.0>;
	spin plate2 around y-axis speed <-18.0>;
	spin plate3 around y-axis speed <18.0>;
}

StopBuilding()
{
	stop-spin plate1 around y-axis;
	stop-spin plate2 around y-axis;
	stop-spin plate3 around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 33 )
	{
		corpsetype = 1;
		explode body1 type NOHEATCLOUD | FALL | SMOKE;
		explode body2 type NOHEATCLOUD | FALL | SMOKE;
		explode body3 type NOHEATCLOUD | FALL | SMOKE;		
		explode pillar1a type NOHEATCLOUD | FALL | SMOKE;
		explode pillar1a type NOHEATCLOUD | FALL | SMOKE;
		explode pillar2a type NOHEATCLOUD | FALL | SMOKE;
		explode pillar2a type NOHEATCLOUD | FALL | SMOKE;
		explode pillar3a type NOHEATCLOUD | FALL | SMOKE;
		explode pillar3a type NOHEATCLOUD | FALL | SMOKE;
		explode plate1 type NOHEATCLOUD | FALL | SMOKE;
		explode plate2 type NOHEATCLOUD | FALL | SMOKE;
		explode plate3 type NOHEATCLOUD | FALL | SMOKE;
		explode support1 type NOHEATCLOUD | FALL | SMOKE;
		explode support2 type NOHEATCLOUD | FALL | SMOKE;
		explode support3 type NOHEATCLOUD | FALL | SMOKE;
		explode support4 type NOHEATCLOUD | FALL | SMOKE;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body1 type NOHEATCLOUD | FALL | SMOKE;
	explode body2 type NOHEATCLOUD | FALL | SMOKE;
	explode body3 type NOHEATCLOUD | FALL | SMOKE;		
	explode pillar1a type NOHEATCLOUD | FALL | SMOKE;
	explode pillar1a type NOHEATCLOUD | FALL | SMOKE;
	explode pillar2a type NOHEATCLOUD | FALL | SMOKE;
	explode pillar2a type NOHEATCLOUD | FALL | SMOKE;
	explode pillar3a type NOHEATCLOUD | FALL | SMOKE;
	explode pillar3a type NOHEATCLOUD | FALL | SMOKE;
	explode plate1 type NOHEATCLOUD | FALL | SMOKE;
	explode plate2 type NOHEATCLOUD | FALL | SMOKE;
	explode plate3 type NOHEATCLOUD | FALL | SMOKE;
	explode support1 type NOHEATCLOUD | FALL | SMOKE;
	explode support2 type NOHEATCLOUD | FALL | SMOKE;
	explode support3 type NOHEATCLOUD | FALL | SMOKE;
	explode support4 type NOHEATCLOUD | FALL | SMOKE;
	return (corpsetype);
}
