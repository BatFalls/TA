#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, pelvis, lleg, rleg, turret, gunbase, rmiss, rmiss_fire,
       lmiss, lmiss_fire, flak, flak_fire, fire1, fire2, fire3, fire4,
       fire5, fire6;

static-var  bMoving, Static_Var_2, gun_1, gun_2, Main_Gun_Heading;


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [2.000000] speed [23.855420];
			move rleg to y-axis [0.000000] now;
			move rleg to z-axis [-2.000000] speed [23.855420];
			turn pelvis to x-axis <6.000000> speed <71.565934>;
			turn lleg to x-axis <-6.000000> speed <71.565934>;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-1.000000] now;
			move lleg to y-axis [1.000000] now;
			move rleg to y-axis [1.000000] now;
			turn pelvis to x-axis <5.000000> now;
			turn lleg to x-axis <-5.000000> now;
			turn rleg to x-axis <1.000000> now;
			sleep 30;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <2.000000> now;
			turn lleg to x-axis <-2.000000> now;
			turn rleg to x-axis <3.000000> now;
			sleep 20;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <1.000000> now;
			turn lleg to x-axis <-1.000000> now;
			turn rleg to x-axis <3.000000> now;
			sleep 10;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [1.000000] speed [11.927710];
			move rleg to z-axis [-2.000000] now;
			turn pelvis to x-axis <0.000000> speed <71.565934>;
			turn lleg to x-axis <0.000000> speed <71.565934>;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [1.000000] speed [11.927710];
			move rleg to z-axis [0.000000] speed [23.855420];
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to y-axis [0.000000] now;
			move lleg to z-axis [0.000000] speed [11.927710];
			move rleg to z-axis [0.000000] now;
			turn pelvis to x-axis <0.000000> now;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] speed [6.644293];
			move rleg to z-axis [1.000000] speed [6.644293];
			turn rleg to x-axis <-9.000000> speed <59.796703>;
			sleep 100;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] now;
			move rleg to y-axis [0.000000] speed [11.927710];
			turn pelvis to x-axis <6.000000> speed <71.565934>;
			turn rleg to x-axis <-6.000000> speed <35.780220>;
			sleep 60;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [1.000000] now;
			move rleg to y-axis [1.000000] now;
			turn pelvis to x-axis <5.000000> now;
			turn lleg to x-axis <1.000000> now;
			turn rleg to x-axis <-5.000000> now;
			sleep 30;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <2.000000> now;
			turn lleg to x-axis <3.000000> now;
			turn rleg to x-axis <-2.000000> now;
			sleep 20;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn pelvis to x-axis <1.000000> now;
			turn lleg to x-axis <2.000000> now;
			turn rleg to x-axis <-1.000000> now;
			sleep 10;
		}
		if( bMoving )
		{
			move lleg to y-axis [1.000000] speed [11.927710];
			move lleg to z-axis [-2.000000] speed [11.927710];
			move rleg to y-axis [1.000000] speed [11.927710];
			turn pelvis to x-axis <0.000000> speed <71.565934>;
			turn lleg to x-axis <0.000000> now;
			turn rleg to x-axis <0.000000> speed <71.565934>;
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [-1.000000] speed [11.927710];
			move rleg to z-axis [0.000000] speed [11.927710];
			sleep 60;
		}
		if( bMoving )
		{
			move lleg to z-axis [0.000000] speed [11.927710];
			move rleg to y-axis [0.000000] speed [11.927710];
			move rleg to z-axis [0.000000] now;
			turn rleg to x-axis <0.000000> now;
			sleep 60;
		}
		move lleg to z-axis [1.000000] speed [6.644293];
		move rleg to y-axis [0.000000] now;
		move rleg to z-axis [-1.000000] speed [6.644293];
		turn lleg to x-axis <-10.000000> speed <66.439560>;
		turn rleg to x-axis <0.000000> now;
		sleep 100;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn lleg to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn turret to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

Create()
{
	bMoving = FALSE;
	gun_1 = 0;
	gun_2 = 0;
	Main_Gun_Heading = 0;
	start-script SmokeUnit();
	start-script MotionControl();	
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn rmiss to x-axis <0.000000> speed <90.000000>;
	turn lmiss to x-axis <0.000000> speed <90.000000>;
}

AimWeapon1(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn turret to y-axis heading speed <225.000000>;
	turn gunbase to x-axis <0.000000> - pitch speed <225.000000>;
	Main_Gun_Heading = heading;
	wait-for-turn turret around y-axis;
	wait-for-turn gunbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimFromWeapon1(piecenum)
{
	piecenum = gunbase;
}

FireWeapon1()
{
	++gun_2;
	if(gun_2 == 2)
	{
		gun_2 = 0;
	}
}

QueryWeapon1(piecenum)
{
	if(gun_2 == 0)
	{
		piecenum = lmiss_fire;
	}
	if(gun_2 == 1)
	{
		piecenum = rmiss_fire;
	}
}

AimFromWeapon3(piecenum)
{
	piecenum = gunbase;
}

AimWeapon3(heading, pitch)
{
	signal 32;
	set-signal-mask 32;
	if (heading > (Main_Gun_Heading + 1000) or heading < (Main_Gun_Heading - 1000))
	{
		return (0);
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gunbase around x-axis;
	return (1);
}

QueryWeapon3(piecenum)
{
	piecenum = flak_fire;
}

FireWeapon3()
{
	show flak_fire;
	sleep 100;
	hide flak_fire;
}

FireWeapon2()
{
	++gun_1;
	if(gun_1 == 6)
	{
		gun_1 = 0;
	}
}

QueryWeapon2(piecenum)
{
	if(gun_1 == 0)
	{
		piecenum = fire1;
	}
	if(gun_1 == 1)
	{
		piecenum = fire2;
	}
	if(gun_1 == 2)
	{
		piecenum = fire3;
	}
	if(gun_1 == 3)
	{
		piecenum = fire4;
	}
	if(gun_1 == 4)
	{
		piecenum = fire5;
	}
	if(gun_1 == 5)
	{
		piecenum = fire6;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = gunbase;
}

AimWeapon2(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	if (heading > (Main_Gun_Heading + 2000) or heading < (Main_Gun_Heading - 2000))
	{
		return (0);
	}
	wait-for-turn turret around y-axis;
	wait-for-turn gunbase around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type NOHEATCLOUD;
		explode pelvis type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD;
		explode rleg type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode gunbase type NOHEATCLOUD;
		explode rmiss type NOHEATCLOUD;
		explode lmiss type NOHEATCLOUD;
		explode flak type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type NOHEATCLOUD | FALL;
		explode pelvis type NOHEATCLOUD | FALL;
		explode lleg type NOHEATCLOUD | FALL;
		explode rleg type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode gunbase type NOHEATCLOUD;
		explode lmiss type NOHEATCLOUD | FALL;
		explode rmiss type NOHEATCLOUD;
		explode flak type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode gunbase type NOHEATCLOUD;
		explode rmiss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lmiss type NOHEATCLOUD;
		explode flak type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode ground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode pelvis type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode gunbase type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode rmiss type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lmiss type NOHEATCLOUD;
	explode flak type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
