#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, mainhull, pillar, turret, lsystem, llathe, rsystem, rlathe, 
		aft, front, rfloat, lfloat, wake1, wake2, wake3, wake4;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from front;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from turret;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		emit-sfx 256 | 3 from wake3;
		emit-sfx 256 | 3 from wake4;
		sleep 250;
	}
}

StopMoving()
{
	signal 2;
}

Create()
{
	Static_Var_1 = 1;
	Static_Var_4 = 0;
	hide pillar;
	start-script SmokeUnit();
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

StartBuilding(Func_Var_1)
{
	signal 4;
	turn turret to y-axis Func_Var_1 speed <160.0>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 3000;
	set-signal-mask 0;
	signal 4;
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.0> speed <120.0>;
	wait-for-turn turret around y-axis;
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_4 == 0 )
	{
		piecenum = llathe;
		Static_Var_4 = 1;
		return (0);
	}
	if( Static_Var_4 == 1 )
	{
		piecenum = rlathe;
		Static_Var_4 = 0;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode lsystem type NOHEATCLOUD;
		explode rsystem type NOHEATCLOUD;
		explode front type NOHEATCLOUD;
		explode rfloat type NOHEATCLOUD;
		explode lfloat type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode lsystem type NOHEATCLOUD;
		explode rsystem type NOHEATCLOUD;
		explode front type NOHEATCLOUD;
		explode rfloat type NOHEATCLOUD;
		explode lfloat type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | BITMAP1;
	explode lsystem type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rsystem type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode front type NOHEATCLOUD;
	explode rfloat type NOHEATCLOUD;
	explode lfloat type NOHEATCLOUD;
	return (corpsetype);
}
