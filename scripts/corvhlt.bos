#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tower, spindle, turret, flare, side1, side2;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn turret to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1  == 0 )
	{
		sleep 250;
		turn spindle to z-axis <0.000000> speed <400.000000>;
		wait-for-turn spindle around z-axis;
	}
	else if( gun_1 == 1 )
	{
		sleep 250;
		turn spindle to z-axis <72.000000> speed <400.000000>;
		wait-for-turn spindle around z-axis;
	}
	else if( gun_1 == 2 )
	{
		sleep 250;
		turn spindle to z-axis <144.000000> speed <400.000000>;
		wait-for-turn spindle around z-axis;
	}
	else if( gun_1 == 3 )
	{
		sleep 250;
		turn spindle to z-axis <216.000000> speed <400.000000>;
		wait-for-turn spindle around z-axis;
	}
	else if( gun_1== 4 )
	{
		sleep 250;
		turn spindle to z-axis <288.000000> speed <400.000000>;
		wait-for-turn spindle around z-axis;
	}
	++gun_1;
	if( gun_1 == 5 )
	{
		gun_1 = 0;
	}
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode tower type NOHEATCLOUD;
		explode side1 type NOHEATCLOUD;
		explode side2 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode tower type NOHEATCLOUD;
		explode side1 type NOHEATCLOUD;
		explode side2 type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode tower type NOHEATCLOUD;
	explode side1 type NOHEATCLOUD;
	explode side2 type NOHEATCLOUD | SHATTER;
	return (corpsetype);
}
