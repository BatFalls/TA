#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, pad, build1, build2, nano11, nano12, point11, point12, nano21, nano22, point21, point22,
       pole, s1, s2, nanobar1, nanobar2;

static-var  spray, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		turn nanobar1 to z-axis <90.> speed <90.>;
		move nanobar1 to x-axis [2.] speed [2.];
		move nano11 to y-axis [3.] speed [3.];
		move nano12 to y-axis [3.] speed [3.];
		
		turn nanobar2 to z-axis <-90.> speed <90.>;
		move nanobar2 to x-axis [-2.] speed [2.];
		move nano21 to y-axis [3.] speed [3.];
		move nano22 to y-axis [3.] speed [3.];
		
		wait-for-move nano11 along y-axis;
	}
}

deactivatescr()
{
	if( TRUE )
	{
		turn nanobar1 to z-axis <0.> speed <90.>;
		move nanobar1 to x-axis [0.] speed [2.];
		move nano11 to y-axis [0.] speed [3.];
		move nano12 to y-axis [0.] speed [3.];
		
		turn nanobar2 to z-axis <0.> speed <90.>;
		move nanobar2 to x-axis [0.] speed [2.];
		move nano21 to y-axis [0.] speed [3.];
		move nano22 to y-axis [0.] speed [3.];
		
		wait-for-move nano11 along y-axis;
	}
}

bubble()
{
	emit-sfx 256 | 3 from nano11;
	sleep 200;
	emit-sfx 256 | 3 from nano12;
	sleep 200;
	emit-sfx 256 | 3 from point11;
	sleep 200;
	emit-sfx 256 | 3 from point12;
	sleep 200;
	emit-sfx 256 | 3 from nanobar1;
	sleep 200;
	emit-sfx 256 | 3 from body;
	sleep 200;
	emit-sfx 256 | 3 from pad;
	sleep 200;
	emit-sfx 256 | 3 from base;
	sleep 200;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 3000;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	sleep 7500;
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	start-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	spray = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 1 )
	{
		piecenum = point11;
	}
	if( spray == 2 )
	{
		piecenum = point12;
	}
	if( spray == 3 )
	{
		piecenum = point21;
	}
	if( spray == 3 )
	{
		piecenum = point22;
	}
	
	++spray;
	if( spray == 4 )
	{
		spray = 0;
	}
}

Activate()
{
	signal 2;
	start-script RequestState(0);
}

Deactivate()
{
	signal 2;
	set-signal-mask 2;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	dont-cache pad;
	spin pad around y-axis speed <30.>;
}

StopBuilding()
{
	cache pad;
	stop-spin pad around y-axis;
	turn pad to y-axis <0.> speed <30.>;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD ;
		explode pad type NOHEATCLOUD ;
		explode nanobar1 type NOHEATCLOUD ;
		explode nano11 type NOHEATCLOUD ;
		explode s1 type NOHEATCLOUD ;
		explode s2 type NOHEATCLOUD ;
		explode nano12 type NOHEATCLOUD ;
		explode point11 type NOHEATCLOUD ;
		explode point12 type NOHEATCLOUD ;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type FALL | NOHEATCLOUD ;
		explode pad type FALL | NOHEATCLOUD ;
		explode nanobar1 type SHATTER | NOHEATCLOUD ;
		explode nano11 type SHATTER | NOHEATCLOUD ;
		explode s1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode s2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano12 type SHATTER | NOHEATCLOUD ;
		explode point11 type FALL | NOHEATCLOUD ;
		explode point12 type FALL | NOHEATCLOUD ;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode pad type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode s1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode s2 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode nanobar1 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode nano11 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode nano12 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode point11 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode point12 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	return (corpsetype);
}
