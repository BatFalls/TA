#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, Rbarrel, Lbarrel, bsupport, msupport,
		Lsupport, Rsupport, flare, top, bground, mground, fground, 
		brground, blground, mrground, mlground, frground, flground, 
		Rback, Rfront, Rtrap, Ltrap, Lback, Lfront, rfoot1, lfoot1;

static-var  statechg_DesiredState, statechg_StateChanging, bAiming, bMoving, WeaponToggle;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	WeaponToggle = 0;
	bAiming = 0;
	bMoving = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 5000;
	turn turret to y-axis <0> speed <45.>;
	turn sleeves to x-axis <0.> speed <45.>;
}

AimPrimary(heading, pitch)
{
	//if(!WeaponToggle OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) 
	//{
	//	return 0;
	//}

	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	//while( !bAiming OR bMoving)
	//{
	//	sleep 250;
	//}
	
	turn turret to y-axis heading speed <60.>;
	turn sleeves to x-axis <0.> - pitch speed <60.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [-4.5] speed [150.];
	move Lbarrel to z-axis [-4.5] speed [150.];
	sleep 50;
	move Rbarrel to z-axis [0.] speed [2.];
	move Lbarrel to z-axis [0.] speed [2.];
}

QueryPrimary(piecenum)
{
	piecenum = flare;	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [1.] speed [150.];
	move Lbarrel to z-axis [1.] speed [150.];
	emit-sfx 1024 + 0 from Flare;
	sleep 200;
	move Rbarrel to z-axis [3.] speed [2.];
	move Lbarrel to z-axis [3.] speed [2.];

}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode top type NOHEATCLOUD;
		explode Rbarrel type NOHEATCLOUD;
		explode Lbarrel type NOHEATCLOUD;
		explode brground type NOHEATCLOUD;
		explode blground type NOHEATCLOUD;
		explode mrground type NOHEATCLOUD;
		explode mlground type NOHEATCLOUD;
		explode frground type NOHEATCLOUD;
		explode flground type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode top type NOHEATCLOUD | FALL;
		explode Rbarrel type NOHEATCLOUD | FALL;
		explode Lbarrel type NOHEATCLOUD | FALL;
		explode brground type NOHEATCLOUD | FALL;
		explode blground type NOHEATCLOUD | FALL;
		explode mrground type NOHEATCLOUD | FALL;
		explode mlground type NOHEATCLOUD | FALL;
		explode frground type NOHEATCLOUD | FALL;
		explode flground type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode brground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode blground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mrground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mlground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode frground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}