#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, sphere, shield_pos, 
		turret1, sleeves1a, sleeves1b, flare1a, flare1b, minigun1a, minigun1b,
		turret2, sleeves2, msl1a, msl1b,
		turret3, sleeves3, msl2a, msl2b,
		ruparm, luparm, lthigh, rthigh, rleg, rfoot, lleg, lfoot, lloarm, lhand, rloarm, rhand;

static-var  Gatling_1, msl_1, msl_2, shield_onoff;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_MOVE			32

Shield()
{
	shield_onoff = !shield_onoff;
}

walk()
{
	while( TRUE )
	{
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			//turn pelvis to z-axis <-4.> speed <15.000000>;
			turn body to z-axis <1.> speed <5.000000>;
			turn lthigh to x-axis <24.> speed <15.000000>;
			turn rthigh to x-axis <-15.> speed <15.000000>;
			turn rleg to x-axis <15.> speed <15.000000>;
			turn rfoot to x-axis <-32.> speed <15.000000>;
			turn lleg to x-axis <7.> speed <15.000000>;
			turn lfoot to x-axis <-6.> speed <15.000000>;
			turn ruparm to x-axis <30.> speed <15.000000>;
			turn luparm to x-axis <-51.> speed <15.000000>;
			turn lloarm to x-axis <21.> speed <15.000000>;
			turn lhand to x-axis <36.> speed <15.000000>;
			turn rloarm to x-axis <0.> speed <15.000000>;
			turn rhand to x-axis <-6.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			//turn pelvis to z-axis <-2.> speed <15.000000>;
			turn body to z-axis <2.> speed <15.000000>;
			turn lthigh to x-axis <28.> speed <15.000000>;
			turn rthigh to x-axis <-7.> speed <15.000000>;
			turn rleg to x-axis <-20.> speed <15.000000>;
			turn rfoot to x-axis <17.> speed <15.000000>;
			turn lleg to x-axis <0.> speed <15.000000>;
			turn lfoot to x-axis <0.> speed <15.000000>;
			turn ruparm to x-axis <7.> speed <15.000000>;
			turn luparm to x-axis <-29.> speed <15.000000>;
			turn lloarm to x-axis <14.> speed <15.000000>;
			turn lhand to x-axis <16.> speed <15.000000>;
			turn rloarm to x-axis <4.> speed <15.000000>;
			turn rhand to x-axis <106.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			//turn pelvis to z-axis <-1.> speed <15.000000>;
			turn body to z-axis <1.> speed <15.000000>;
			turn lthigh to x-axis <35.> speed <15.000000>;
			turn rthigh to x-axis <9.> speed <15.000000>;
			turn rleg to x-axis <11.> speed <15.000000>;
			turn rfoot to x-axis <-10.> speed <15.000000>;
			turn lleg to x-axis <0.> speed <15.000000>;
			turn lfoot to x-axis <18.> speed <15.000000>;
			turn luparm to x-axis <0.> speed <15.000000>;
			turn lloarm to x-axis <0.> speed <15.000000>;
			turn lhand to x-axis <0.> speed <15.000000>;
			turn rloarm to x-axis <-41.> speed <15.000000>;
			turn rhand to x-axis <143.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			//turn pelvis to z-axis <2.> speed <15.000000>;
			turn body to z-axis <-2.> speed <5.000000>;
			turn lthigh to x-axis <12.> speed <15.000000>;
			turn rthigh to x-axis <21.> speed <15.000000>;
			turn rleg to x-axis <4.> speed <15.000000>;
			turn rfoot to x-axis <-15.> speed <15.000000>;
			turn lleg to x-axis <35.> speed <15.000000>;
			turn lfoot to x-axis <1.> speed <15.000000>;
			turn ruparm to x-axis <-18.> speed <15.000000>;
			turn luparm to x-axis <18.> speed <15.000000>;
			turn lloarm to x-axis <-3.> speed <15.000000>;
			turn lhand to x-axis <-5.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed <5.000000>;
			move ruparm to y-axis [-0.] speed <15.000000>;
			move ruparm to z-axis [0.] speed <15.000000>;
			//turn pelvis to z-axis <4.> speed <15.000000>;
			turn body to z-axis <-2.> speed <5.000000>;
			turn lthigh to x-axis <-58.> speed <15.000000>;
			turn rthigh to x-axis <35.> speed <15.000000>;
			turn rfoot to x-axis <-9.> speed <15.000000>;
			turn lleg to x-axis <55.> speed <15.000000>;
			turn lfoot to x-axis <-22.> speed <15.000000>;
			turn ruparm to x-axis <-49.> speed <15.000000>;
			turn luparm to x-axis <20.> speed <15.000000>;
			turn lloarm to x-axis <9.> speed <15.000000>;
			turn lhand to x-axis <-17.> speed <15.000000>;
			turn rloarm to x-axis <14.> speed <15.000000>;
			turn rhand to x-axis <46.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			//turn pelvis to z-axis <2.> speed <15.000000>;
			turn body to z-axis <-2.> speed <5.000000>;
			turn lthigh to x-axis <-25.> speed <15.000000>;
			turn rthigh to x-axis <20.> speed <15.000000>;
			turn rfoot to x-axis <6.> speed <15.000000>;
			turn lleg to x-axis <0.> speed <15.000000>;
			turn lfoot to x-axis <0.> speed <15.000000>;
			turn ruparm to x-axis <-34.> speed <15.000000>;
			turn luparm to x-axis <11.> speed <15.000000>;
			turn lloarm to x-axis <0.> speed <15.000000>;
			turn lhand to x-axis <117.> speed <15.000000>;
			turn rhand to x-axis <20.> speed <15.000000>;
			sleep 500;
		}
		if( TRUE )
		{
			move body to y-axis [0.] speed [5.000000];
			move ruparm to z-axis [0.] speed <15.000000>;
			move luparm to y-axis [1.] speed <15.000000>;
			//turn pelvis to z-axis <1.> speed <15.000000>;
			turn body to z-axis <1.> speed <5.000000>;
			turn lthigh to x-axis <-5.> speed <15.000000>;
			turn rthigh to x-axis <5.> speed <15.000000>;
			turn rfoot to x-axis <11.> speed <15.000000>;
			turn lleg to x-axis <13.> speed <15.000000>;
			turn lfoot to x-axis <-15.> speed <15.000000>;
			turn ruparm to x-axis <5.> speed <15.000000>;
			turn luparm to x-axis <-9.> speed <15.000000>;
			turn lloarm to x-axis <-29.> speed <15.000000>;
			turn lhand to x-axis <149.> speed <15.000000>;
			turn rloarm to x-axis <-6.> speed <15.000000>;
			turn rhand to x-axis <7.> speed <15.000000>;
			sleep 500;
		}
		move body to y-axis [0.] speed [5.000000];
		move ruparm to z-axis [0.] speed <15.000000>;
		move luparm to y-axis [0.] speed <15.000000>;
		//turn pelvis to z-axis <-2.> speed <15.000000>;
		turn body to z-axis <2.> speed <5.000000>;
		turn lthigh to x-axis <32.> speed <15.000000>;
		turn rthigh to x-axis <-27.> speed <15.000000>;
		turn rleg to x-axis <29.> speed <15.000000>;
		turn lleg to x-axis <-0.> speed <15.000000>;
		turn lfoot to x-axis <-17.> speed <15.000000>;
		turn luparm to x-axis <-21.> speed <15.000000>;
		turn lloarm to x-axis <-41.> speed <15.000000>;
		turn lhand to x-axis <90.> speed <15.000000>;
		turn rloarm to x-axis <4.> speed <15.000000>;
		turn rhand to x-axis <-10.> speed <15.000000>;
		sleep 500;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256;
			}
			emit-sfx smoketype from body;
			sleep 20;
			emit-sfx smoketype from turret2;
			sleep 20;
			emit-sfx smoketype from turret3;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	shield_onoff = 1;
	Gatling_1 = 0;
	//Gatling_1b = 0;
	msl_1 = 0;
	msl_2 = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	move body to y-axis [0.] speed [15.000000];
	turn body to z-axis <0.> speed <5.000000>;
	turn lthigh to x-axis <0.> speed <15.000000>;
	turn rthigh to x-axis <0.> speed <15.000000>;
	turn rleg to x-axis <0.> speed <15.000000>;
	turn rfoot to x-axis <0.> speed <15.000000>;
	turn lleg to x-axis <0.> speed <15.000000>;
	turn lfoot to x-axis <0.> speed <15.000000>;
	turn ruparm to x-axis <0.> speed <15.000000>;
	turn luparm to x-axis <0.> speed <15.000000>;
	turn lloarm to x-axis <0.> speed <15.000000>;
	turn lhand to x-axis <0.> speed <15.000000>;
	turn rloarm to x-axis <0.> speed <15.000000>;
	turn rhand to x-axis <0.> speed <15.000000>;
	signal SIG_MOVE;
}

RestoreAfterDelay()
{
	sleep 3000;
	turn turret1 to y-axis <0.000000> speed <75.000000>;
	turn sleeves1a to x-axis <0.000000> speed <75.000000>;
	turn sleeves1b to x-axis <0.000000> speed <75.000000>;
}

RestoreMsl1()
{
	sleep 2500;
	turn turret2 to y-axis <0.000000> speed <75.000000>;
	turn sleeves2 to x-axis <0.000000> speed <75.000000>;

}

RestoreMsl2()
{
	sleep 2500;
	turn turret3 to y-axis <0.000000> speed <75.000000>;
	turn turret3 to y-axis <0.000000> speed <75.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret1 to y-axis heading speed <75.000000>;
	turn sleeves1a to x-axis <0.000000> - pitch speed <75.000000>;
	turn sleeves1b to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeves1a around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++Gatling_1;
	if(Gatling_1 == 6)
	{
		Gatling_1 = 0;
	}
	sleep 50;
	turn minigun1a to z-axis <60.> * Gatling_1 speed <500.>;
	turn minigun1b to z-axis <60.> * Gatling_1 speed <500.>;
}

QueryPrimary(piecenum)
{
	if( Gatling_1 == 1 or Gatling_1 == 3 or Gatling_1 == 5 )
	{
		piecenum = flare1b;
	}
	else
	{
		piecenum = flare1a;
	}
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <75.000000>;
	turn sleeves2 to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeves3 around x-axis;
	start-script RestoreMsl1();
	return (1);
}

QuerySecondary(piecenum)
{
	if( msl_1 == 0)
	{
		piecenum = msl1a;
	}
	if( msl_1 == 1)
	{
		piecenum = msl1b;
	}
}

FireSecondary()
{
	++msl_1;
	if( msl_1 == 2)
	{
		msl_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <75.000000>;
	turn sleeves3 to x-axis <0.000000> - pitch speed <75.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeves3 around x-axis;
	start-script RestoreMsl2();
	return (1);
}

QueryTertiary(piecenum)
{
	if( msl_2 == 0)
	{
		piecenum = msl2a;
	}
	if( msl_2 == 1)
	{
		piecenum = msl2b;
	}
}

FireTertiary()
{
	++msl_2;
	if( msl_2 == 2)
	{
		msl_2 = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret3;
}


AimWeapon4(heading, pitch)
{
	return (shield_onoff);
}

QueryWeapon4(piecenum)
{
	piecenum = shield_pos;
}

FireWeapon4()
{
	sleep 150;
}

AimFromWeapon4(piecenum)
{
	piecenum = shield_pos;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 66 )
	{
		corpsetype = 1;
		explode lfoot type NOHEATCLOUD;
		explode lhand type NOHEATCLOUD ;
		explode lleg type NOHEATCLOUD ;
		explode lloarm type NOHEATCLOUD ;
		explode lthigh type NOHEATCLOUD ;
		explode luparm type NOHEATCLOUD ;
		//explode pelvis type NOHEATCLOUD ;
		explode rfoot type NOHEATCLOUD ;
		explode rhand type NOHEATCLOUD ;
		explode rleg type NOHEATCLOUD ;
		explode rloarm type NOHEATCLOUD ;
		explode rthigh type NOHEATCLOUD ;
		explode ruparm type NOHEATCLOUD ;
		explode body type NOHEATCLOUD ;
		//explode turret type NOHEATCLOUD ;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	//explode pelvis type NOHEATCLOUD  | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode body type NOHEATCLOUD ;
	//explode turret type NOHEATCLOUD ;
	return (corpsetype);
}
