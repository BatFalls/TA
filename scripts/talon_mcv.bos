#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, Rbarrel, Lbarrel, bsupport, msupport,
		Lsupport, Rsupport, flare, top, bground, mground, fground, 
		brground, blground, mrground, mlground, frground, flground, 
		Rback, Rfront, Rtrap, Ltrap, Lback, Lfront, rfoot1, lfoot1;

static-var  statechg_DesiredState, statechg_StateChanging, bAiming, bMoving, WeaponToggle;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

deactivatescr()
{
	turn turret to y-axis <0> speed <45.>;
	turn sleeves to x-axis <0.> speed <45.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	sleep 50;
	
	if( TRUE )
	{
		move Rsupport to y-axis [0] speed [0.5];
		move Lsupport to y-axis [0] speed [0.5];
		turn Lsupport to z-axis <0.000000> speed <10.>;
		turn Rsupport to z-axis <0.000000> speed <10.>;
		move Rbarrel to z-axis [0] speed [1];
		move Lbarrel to z-axis [0] speed [1];
		move Rfront to z-axis [0] speed [0.5];
		move Lfront to z-axis [0] speed [0.5];
		move Lback to z-axis [0] speed [0.5];
		move Rback to z-axis [0] speed [0.5];
		turn Ltrap to z-axis <0.000000> speed <15.>;
		turn Rtrap to z-axis <0.000000> speed <15.>;
		move rfoot1 to x-axis [0.0] speed [2.5];
		move lfoot1 to x-axis [0.0] speed [2.5];
		wait-for-turn Lsupport around y-axis;
		wait-for-turn Ltrap around z-axis;
		wait-for-move Rbarrel along z-axis;
		wait-for-move Rfront along z-axis;		
		sleep 50;
	}
	if( TRUE )
	{
		
		move mrground to x-axis [0] speed [1];
		move mlground to x-axis [0] speed [1];
		wait-for-move mrground along x-axis;
			
		move body to y-axis [0] speed [2.5];
			
		turn brground to x-axis <0.000000> speed <10.>;
		turn blground to x-axis <0.000000> speed <10.>;
		turn brground to y-axis <0.000000> speed <10.>;
		turn blground to y-axis <0.000000> speed <10.>;
		turn frground to x-axis <0.000000> speed <10.>;
		turn flground to x-axis <0.000000> speed <10.>;
		turn frground to y-axis <0.000000> speed <10.>;
		turn flground to y-axis <0.000000> speed <10.>;		
		
		wait-for-move body along y-axis;
		
		move bground to z-axis [0] speed [1.5];
		move fground to z-axis [0] speed [1.5];
	}
	sleep 50;
}

activatescr()
{
	if( TRUE )
	{
		move bground to z-axis [-10.5] speed [2.5];
		move fground to z-axis [9.75] speed [2.5];
		wait-for-move bground along z-axis;
		
		move body to y-axis [8.25] speed [5];
		
		turn brground to x-axis <-25.000000> speed <12.>;
		turn blground to x-axis <-25.000000> speed <12.>;
		turn brground to y-axis <-30.000000> speed <25.>;
		turn blground to y-axis <30.000000> speed <25.>;
		
		turn frground to x-axis <20.000000> speed <12.>;
		turn flground to x-axis <20.000000> speed <12.>;
		turn frground to y-axis <30.000000> speed <25.>;
		turn flground to y-axis <-30.000000> speed <25.>;
		
		wait-for-move body along y-axis;
		
		move mrground to x-axis [7.5] speed [2];
		move mlground to x-axis [-7.5] speed [2];
		wait-for-move mrground along x-axis;
	}
	sleep 50;
	
	if( TRUE )
	{	
		turn Rtrap to z-axis <38.000000> speed <15.>;
		turn Ltrap to z-axis <-38.000000> speed <15.>;
		move Rfront to z-axis [-4.725] speed [0.5];
		move Rback to z-axis [4.8] speed [0.5];
		move Lfront to z-axis [4.725] speed [0.5];
		move Lback to z-axis [-4.8] speed [0.5];
		wait-for-move Rfront along z-axis;
		wait-for-turn Ltrap around z-axis;
		
		move rfoot1 to x-axis [-6.75] speed [2.5];
		move lfoot1 to x-axis [6.75] speed [2.5];

	//	wait-for-move rfoot1 along x-axis;
	/*	
		move rfoot1 to x-axis [-7.5] speed [2];
		move rfoot2 to x-axis [-2.5] speed [2];
		wait-for-move rfoot1 along x-axis;
		
		turn rfoot2 to z-axis <45.000000> speed <60>;
		sleep 50;
		turn rfoot3 to z-axis <165.000000> speed <45>;
		turn rfoot4 to z-axis <60.000000> speed <45>;
		sleep 250;
		turn rfoot5 to z-axis <90.000000> speed <75>;
		*/
	}
	sleep 50;
	
	if( TRUE )
	{		
		move Rsupport to y-axis [0.75] speed [0.5];
		move Lsupport to y-axis [0.75] speed [0.5];
		turn Lsupport to z-axis <20.000000> speed <10.>;
		turn Rsupport to z-axis <-20.000000> speed <10.>;
		wait-for-move Rsupport along y-axis;
		wait-for-turn Lsupport around z-axis;
		
		move Rbarrel to z-axis [4.5] speed [1.];
		move Lbarrel to z-axis [4.5] speed [1.];
	}
	sleep 50;
}

Go()
{
	if( !bAiming )
	{
		call-script activatescr();
	}
	sleep 3750;
	bAiming = 1;
	set ARMORED to 0;
}

Stop()
{
	bAiming = 0;
	sleep 50;	
	call-script deactivatescr();
	set ARMORED to 1;	
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

//Communicate with cob_buttons in LuaRules
/*
Dive()
{
	WeaponToggle = !WeaponToggle;
	//get PRINT(WeaponToggle);
	
	if (WeaponToggle == 1 ) 
	{
		call-script RequestState(0);
	}
	else if (WeaponToggle == 0 ) 
	{
		call-script RequestState(1);
	}	
}
*/

Create()
{
	WeaponToggle = 0;
	bAiming = 0;
	bMoving = 0;
	call-script InitState();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = 1;
	//call-script RequestState(1);
}


StopMoving()
{
	bMoving = 0;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn turret to y-axis <0> speed <45.>;
	turn sleeves to x-axis <0.> speed <45.>;

}


AimPrimary(heading, pitch)
{
//	if(!WeaponToggle OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) 
//	{
//		return 0;
//	}

	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	//while( !bAiming OR bMoving)
	//{
	//	sleep 250;
	//}
	
	turn turret to y-axis heading speed <60.>;
	turn sleeves to x-axis <0.> - pitch speed <60.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [-4.5] speed [150.];
	move Lbarrel to z-axis [-4.5] speed [150.];
	sleep 50;
	move Rbarrel to z-axis [0.] speed [2.];
	move Lbarrel to z-axis [0.] speed [2.];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	//if(WeaponToggle OR (get WEAPON_RELOADSTATE(1) > get GAME_FRAME)) 
	//{
	//	return 0;
	//}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [1.] speed [150.];
	move Lbarrel to z-axis [1.] speed [150.];
	emit-sfx 1024 + 0 from Flare;
	sleep 200;
	move Rbarrel to z-axis [3.] speed [2.];
	move Lbarrel to z-axis [3.] speed [2.];

}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode top type NOHEATCLOUD;
		explode Rbarrel type NOHEATCLOUD;
		explode Lbarrel type NOHEATCLOUD;
		explode brground type NOHEATCLOUD;
		explode blground type NOHEATCLOUD;
		explode mrground type NOHEATCLOUD;
		explode mlground type NOHEATCLOUD;
		explode frground type NOHEATCLOUD;
		explode flground type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode top type NOHEATCLOUD | FALL;
		explode Rbarrel type NOHEATCLOUD | FALL;
		explode Lbarrel type NOHEATCLOUD | FALL;
		explode brground type NOHEATCLOUD | FALL;
		explode blground type NOHEATCLOUD | FALL;
		explode mrground type NOHEATCLOUD | FALL;
		explode mlground type NOHEATCLOUD | FALL;
		explode frground type NOHEATCLOUD | FALL;
		explode flground type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode brground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode blground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mrground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mlground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode frground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}