#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, turret, sleeves, Rbarrel, Lbarrel, bsupport, msupport,
		Lsupport, Rsupport, flare, top, bground, mground, fground, 
		brground, blground, mrground, mlground, frground, flground;

static-var  statechg_DesiredState, statechg_StateChanging, bAiming, bMoving, WeaponToggle;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

deactivatescr()
{
	if( TRUE )
	{
		move Rsupport to y-axis [0] speed [0.5];
		move Lsupport to y-axis [0] speed [0.5];
		turn Lsupport to z-axis <0.000000> speed <10.>;
		turn Rsupport to z-axis <0.000000> speed <10.>;
		move Rbarrel to z-axis [0] speed [1];
		move Lbarrel to z-axis [0] speed [1];
		sleep 50;
	}
	if( TRUE )
	{
		move bground to z-axis [0] speed [1];
		move fground to z-axis [0] speed [1];
		
		
	//	move brground to z-axis [0.5] speed [0.5];
	//	move blground to z-axis [0.5] speed [0.5];
	//	move frsupport to z-axis [0.5] speed [0.5];
	//	move flsupport to z-axis [0.5] speed [0.5];
		
		move mrground to x-axis [0] speed [1];
		move mlground to x-axis [0] speed [1];
		
		turn brground to x-axis <0.000000> speed <10.>;
		turn blground to x-axis <0.000000> speed <10.>;
		turn brground to y-axis <0.000000> speed <10.>;
		turn blground to y-axis <0.000000> speed <10.>;
		turn frground to x-axis <0.000000> speed <10.>;
		turn flground to x-axis <0.000000> speed <10.>;
		turn frground to y-axis <0.000000> speed <10.>;
		turn flground to y-axis <0.000000> speed <10.>;
		
		move body to y-axis [0] speed [0.5];
	}
	sleep 50;
}

activatescr()
{
	if( TRUE )
	{
		move Rsupport to y-axis [0.5] speed [0.5];
		move Lsupport to y-axis [0.5] speed [0.5];
		turn Lsupport to z-axis <15.000000> speed <10.>;
		turn Rsupport to z-axis <-15.000000> speed <10.>;
		move Rbarrel to z-axis [3] speed <1.>;
		move Lbarrel to z-axis [3] speed <1.>;
	}
	sleep 50;
	if( TRUE )
	{
		move bground to z-axis [-7] speed [1];
		move fground to z-axis [6.5] speed [1];
		wait-for-move bground along z-axis;
		
		move body to y-axis [4] speed [2.5];
		
		turn brground to x-axis <-35.000000> speed <20.>;
		turn blground to x-axis <-35.000000> speed <20.>;
		turn brground to y-axis <-20.000000> speed <20.>;
		turn blground to y-axis <20.000000> speed <20.>;
		
		turn frground to x-axis <30.000000> speed <20.>;
		turn flground to x-axis <30.000000> speed <20.>;
		turn frground to y-axis <20.000000> speed <20.>;
		turn flground to y-axis <-20.000000> speed <20.>;
		
	//	move frsupport to z-axis [0.5] speed [0.5];
	//	move flsupport to z-axis [0.5] speed [0.5];
		
		//move body to y-axis [2] speed [0.5];
		wait-for-move body along y-axis;
		
		move mrground to x-axis [5] speed [2];
		move mlground to x-axis [-5] speed [2];
		
	}
	sleep 50;
}

Go()
{
	if( !bAiming )
	{
		call-script activatescr();
	}
	sleep 4500;
	bAiming = 1;
}

Stop()
{
	bAiming = 0;
	if( TRUE )
	{
		turn turret to y-axis <0.000000> speed <20.>;
		turn sleeves to x-axis <0.000000> speed <20.>;
		wait-for-turn turret around y-axis;
		sleep 50;
	}
	sleep 50;	
	call-script deactivatescr();	
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

//Communicate with cob_buttons in LuaRules
Dive()
{
	WeaponToggle = !WeaponToggle;
	//get PRINT(WeaponToggle);
	
	if (WeaponToggle == 1 ) 
	{
		call-script RequestState(0);
	}
	else if (WeaponToggle == 0 ) 
	{
		call-script RequestState(1);
	}	
}

Create()
{
	WeaponToggle = 0;
	bAiming = 0;
	bMoving = 0;
	call-script InitState();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = 1;
	//call-script RequestState(1);
}


StopMoving()
{
	bMoving = 0;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn turret to y-axis <0> speed <45.>;
	turn sleeves to x-axis <0.> speed <45.>;

}


AimPrimary(heading, pitch)
{
	if(!WeaponToggle OR (get WEAPON_RELOADSTATE(2) > get GAME_FRAME)) 
	{
		return 0;
	}

	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	
	while( !bAiming OR bMoving)
	{
		sleep 250;
	}
	
	turn turret to y-axis heading speed <90.>;
	turn sleeves to x-axis <0.> - pitch speed <90.>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [-3.] speed [150.];
	move Lbarrel to z-axis [-3.] speed [150.];
	sleep 50;
	move Rbarrel to z-axis [0.] speed [2.];
	move Lbarrel to z-axis [0.] speed [2.];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimSecondary(heading, pitch)
{
	if(WeaponToggle OR (get WEAPON_RELOADSTATE(1) > get GAME_FRAME)) 
	{
		return 0;
	}
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <60.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <60.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	emit-sfx 1024 + 0 from flare;
	move Rbarrel to z-axis [-1.] speed [150.];
	move Lbarrel to z-axis [-1.] speed [150.];
	emit-sfx 1024 + 0 from Flare;
	sleep 200;
	move Rbarrel to z-axis [0.] speed [2.];
	move Lbarrel to z-axis [0.] speed [2.];

}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode top type NOHEATCLOUD;
		explode Rbarrel type NOHEATCLOUD;
		explode Lbarrel type NOHEATCLOUD;
		explode brground type NOHEATCLOUD;
		explode blground type NOHEATCLOUD;
		explode mrground type NOHEATCLOUD;
		explode mlground type NOHEATCLOUD;
		explode frground type NOHEATCLOUD;
		explode flground type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode top type NOHEATCLOUD | FALL;
		explode Rbarrel type NOHEATCLOUD | FALL;
		explode Lbarrel type NOHEATCLOUD | FALL;
		explode brground type NOHEATCLOUD | FALL;
		explode blground type NOHEATCLOUD | FALL;
		explode mrground type NOHEATCLOUD | FALL;
		explode mlground type NOHEATCLOUD | FALL;
		explode frground type NOHEATCLOUD | FALL;
		explode flground type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode sleeves type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode top type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Rbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode Lbarrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode brground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode blground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mrground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode mlground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode frground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode flground type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}