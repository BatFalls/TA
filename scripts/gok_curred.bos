#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pod, ring, support, servo, leg, boot, claw, head,
       support2, servo2, leg2, boot2, claw2, support3, servo3, leg3,
       boot3, claw3, support4, servo4, leg4, boot4, claw4, 
       pitchturret1, pitchturret2,
       system1, system2, system3, system4, system5,
       system6, system7, system8, system9, system10,
       flare1, flare2;

static-var  bMoving, gun_1;

MotionControl(Func_Var_1, Func_Var_2)
{
	Func_Var_2 = 1;
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			if( bMoving )
			{
				turn servo to y-axis <65.> speed <180.>;
				turn leg to z-axis <30.> speed <40.>;
				turn boot to z-axis <15.> speed <60.>;
				turn claw to z-axis <-5.> speed <40.>;
				turn servo2 to y-axis <10.> speed <180.>;
				turn leg2 to z-axis <0.> speed <20.>;
				turn boot2 to z-axis <30.> speed <40.>;
				turn claw2 to z-axis <-35.> speed <80.>;
				turn servo3 to y-axis <-35.> speed <180.>;
				turn leg3 to z-axis <5.> speed <20.>;
				turn boot3 to z-axis <-35.> speed <20.>;
				turn claw3 to z-axis <25.> speed <90.>;
				turn servo4 to y-axis <30.> speed <140.>;
				turn leg4 to z-axis <-40.> speed <40.>;
				turn boot4 to z-axis <0.> speed <60.>;
				turn claw4 to z-axis <-5.> speed <40.>;
				turn pod to z-axis <5.> speed <20.>;
				sleep 250;
			}
			if( bMoving )
			{
				turn servo to y-axis <70.> speed <20.>;
				turn leg to z-axis <-10.> speed <160.>;
				turn boot to z-axis <30.> speed <60.>;
				turn claw to z-axis <-10.> speed <20.>;
				turn servo2 to y-axis <25.> speed <60.>;
				turn leg2 to z-axis <-15.> speed <60.>;
				turn boot2 to z-axis <45.> speed <60.>;
				turn servo3 to y-axis <-70.> speed <90.>;
				turn leg3 to z-axis <-10.> speed <60.>;
				turn boot3 to z-axis <30.> speed <260.>;
				turn claw3 to z-axis <-10.> speed <140.>;
				turn servo4 to y-axis <5.> speed <90.>;
				turn leg4 to z-axis <-15.> speed <90.>;
				turn boot4 to z-axis <45.> speed <90.>;
				turn claw4 to z-axis <-35.> speed <120.>;
				turn pod to x-axis <5.> speed <20.>;
				turn pod to z-axis <0.> speed <10.>;
				sleep 250;
			}
			if( bMoving )
			{
				turn servo to y-axis <40.> speed <100.>;
				turn leg to z-axis <5.> speed <60.>;
				turn boot to z-axis <-20.> speed <180.>;
				turn claw to z-axis <15.> speed <90.>;
				turn servo2 to y-axis <-10.> speed <130.>;
				turn leg2 to z-axis <-40.> speed <90.>;
				turn boot2 to z-axis <0.> speed <180.>;
				turn claw2 to z-axis <-5.> speed <120.>;
				turn servo3 to y-axis <-65.> speed <20.>;
				turn leg3 to z-axis <30.> speed <160.>;
				turn boot3 to z-axis <15.> speed <60.>;
				turn claw3 to z-axis <-5.> speed <20.>;
				turn servo4 to y-axis <-20.> speed <100.>;
				turn leg4 to z-axis <0.> speed <60.>;
				turn boot4 to z-axis <40.> speed <20.>;
				turn claw4 to z-axis <-25.> speed <40.>;
				turn pod to x-axis <0.> speed <20.>;
				sleep 250;
			}
			if( bMoving )
			{
				turn servo to y-axis <-10.> speed <180.>;
				turn leg to z-axis <0.> speed <20.>;
				turn boot to z-axis <-30.> speed <40.>;
				turn claw to z-axis <35.> speed <80.>;
				turn servo2 to y-axis <-65.> speed <180.>;
				turn leg2 to z-axis <-30.> speed <40.>;
				turn boot2 to z-axis <-15.> speed <60.>;
				turn claw2 to z-axis <5.> speed <40.>;
				turn servo3 to y-axis <-30.> speed <130.>;
				turn leg3 to z-axis <40.> speed <40.>;
				turn boot3 to z-axis <0.> speed <60.>;
				turn claw3 to z-axis <5.> speed <40.>;
				turn servo4 to y-axis <35.> speed <180.>;
				turn leg4 to z-axis <-5.> speed <20.>;
				turn boot4 to z-axis <35.> speed <20.>;
				turn pod to z-axis <-5.> speed <20.>;
				sleep 250;
			}
			if( bMoving )
			{
				turn servo to y-axis <-25.> speed <60.>;
				turn leg to z-axis <15.> speed <60.>;
				turn boot to z-axis <-45.> speed <60.>;
				turn servo2 to y-axis <-70.> speed <20.>;
				turn leg2 to z-axis <10.> speed <160.>;
				turn boot2 to z-axis <-30.> speed <60.>;
				turn claw2 to z-axis <10.> speed <20.>;
				turn servo3 to y-axis <-5.> speed <90.>;
				turn leg3 to z-axis <15.> speed <90.>;
				turn boot3 to z-axis <-45.> speed <180.>;
				turn claw3 to z-axis <35.> speed <120.>;
				turn servo4 to y-axis <70.> speed <120.>;
				turn leg4 to z-axis <10.> speed <60.>;
				turn boot4 to z-axis <-30.> speed <260.>;
				turn claw4 to z-axis <10.> speed <130.>;
				turn pod to x-axis <5.> speed <20.>;
				turn pod to z-axis <0.> speed <10.>;
				sleep 250;
			}
			if( bMoving )
			{
				turn servo to y-axis <10.> speed <130.>;
				turn leg to z-axis <40.> speed <90.>;
				turn boot to z-axis <0.> speed <180.>;
				turn claw to z-axis <5.> speed <120.>;
				turn servo2 to y-axis <-40.> speed <110.>;
				turn leg2 to z-axis <-5.> speed <60.>;
				turn boot2 to z-axis <20.> speed <180.>;
				turn claw2 to z-axis <-15.> speed <90.>;
				turn servo3 to y-axis <20.> speed <90.>;
				turn leg3 to z-axis <0.> speed <60.>;
				turn boot3 to z-axis <-40.> speed <20.>;
				turn claw3 to z-axis <25.> speed <40.>;
				turn servo4 to y-axis <65.> speed <20.>;
				turn leg4 to z-axis <-30.> speed <150.>;
				turn boot4 to z-axis <-15.> speed <60.>;
				turn claw4 to z-axis <5.> speed <20.>;
				turn pod to x-axis <0.> speed <20.>;
				sleep 250;
			}
			Func_Var_2 = 1;
		}
		if( !Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				turn servo to y-axis <45.> speed <90.>;
				turn leg to z-axis <0.> speed <90.>;
				turn boot to z-axis <0.> speed <90.>;
				turn claw to z-axis <0.> speed <90.>;
				turn servo2 to y-axis <-45.> speed <90.>;
				turn leg2 to z-axis <0.> speed <90.>;
				turn boot2 to z-axis <0.> speed <90.>;
				turn claw2 to z-axis <0.> speed <90.>;
				turn servo3 to y-axis <-45.> speed <90.>;
				turn leg3 to z-axis <0.> speed <90.>;
				turn boot3 to z-axis <0.> speed <90.>;
				turn claw3 to z-axis <0.> speed <90.>;
				turn servo4 to y-axis <45.> speed <90.>;
				turn leg4 to z-axis <0.> speed <90.>;
				turn boot4 to z-axis <0.> speed <90.>;
				turn claw4 to z-axis <0.> speed <90.>;
				turn pod to x-axis <0.> speed <10.>;
				turn pod to z-axis <0.> speed <10.>;
				Func_Var_2 = 0;
			}
			sleep 100;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	start-script MotionControl();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn servo to y-axis <45.> now;
	turn servo2 to y-axis <-45.> now;
	turn servo3 to y-axis <-45.> now;
	turn servo4 to y-axis <45.> now;
	gun_1 = 0;
	bMoving = 0;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = 1;
}

StopMoving()
{
	bMoving = 0;
}

AimFromPrimary(pieceNum)
{
	pieceNum = pitchturret1;
}

QueryPrimary(pieceNum)
{
	pieceNum = flare1;
}

AimFromSecondary(pieceNum)
{
	pieceNum = pitchturret2;
}

QuerySecondary(pieceNum)
{
	pieceNum = flare2;
}

RestoreAfterDelay()
{
	sleep 3500;
	turn pitchturret1 to y-axis <0.0>  speed <90.00>;
	move pitchturret1 to y-axis [0.00] speed [5.00];
	turn pitchturret1 to x-axis <0.00> speed <90.00>;
	
	turn pitchturret2 to y-axis <0.0>  speed <90.00>;
	move pitchturret2 to y-axis [0.00] speed [5.00];
	turn pitchturret2 to x-axis <0.00> speed <90.00>;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	move pitchturret1 to y-axis [2.50] speed [15.00];
	turn pitchturret1 to y-axis heading speed <250.00>;
	turn pitchturret1 to x-axis <0.00> - pitch speed <180.00>;	
	wait-for-turn pitchturret1 around y-axis;
	wait-for-turn pitchturret1 around x-axis;
	wait-for-move pitchturret1 along y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	move pitchturret2 to y-axis [2.50] speed [15.00];
	turn pitchturret2 to y-axis heading speed <250.00>;
	turn pitchturret2 to x-axis <0.00> - pitch speed <180.00>;	
	wait-for-turn pitchturret2 around y-axis;
	wait-for-turn pitchturret2 around x-axis;
	wait-for-move pitchturret2 along y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode pod type NOHEATCLOUD;
		explode pitchturret2 type NOHEATCLOUD;
		explode system1 type NOHEATCLOUD;
		explode system2 type NOHEATCLOUD;
		explode system7 type NOHEATCLOUD;
		explode system8 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode pod type NOHEATCLOUD;
		explode pitchturret1 type SHATTER | NOHEATCLOUD;
		explode pitchturret2 type SHATTER | NOHEATCLOUD;
		explode boot type FALL | NOHEATCLOUD;
		explode boot3 type FALL | SMOKE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode system1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode system2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode system7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode system8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode pod type NOHEATCLOUD;
	explode ring type SHATTER | NOHEATCLOUD;
	explode pitchturret1 type SHATTER | NOHEATCLOUD;
	explode pitchturret2 type SHATTER | NOHEATCLOUD;
	explode system1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode system2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode system7 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode system8 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode boot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode boot3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
