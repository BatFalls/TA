#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  turret1, turret2, sleeve1, sleeve2, base,
		barrel1, barrel2, barrel3, barrel4, barrel5, barrel6, flare1, flare2, flare3, flare4, flare5, flare6,
		cover1, cover2, cover3, cover4, cover5, cover6, 
		w1, w2, w3, w4, w5, w6, w7, flare21, flare22, flare23, flare24, 
		wakes1, body, torpedo1, torpedo2, flaret1a, flaret1b, flaret2a, flaret2b;

static-var  gun_1, restore_delay, gun_2, turret_1, laser, beforehealth, torpedo_1, torpedo_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_MOVE			64

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
			emit-sfx smoketype from wakes1;
			emit-sfx smoketype from turret2;
			emit-sfx smoketype from turret1;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare6;
	turn turret2 to y-axis <180.000000> now;
	
	gun_1 = 0;
	gun_2 = 7;
	laser = 0;
	torpedo_1 = 0;
	torpedo_2 = 0;
	
	restore_delay = 6000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn sleeve1 to x-axis <0> speed <50>;
	turn sleeve2 to x-axis <0> speed <50>;
	turn turret1 to y-axis <0.000000> speed <25>;
	gun_1 = 0;
	gun_2 = 0;
}

RestoreAfterDelay2()
{
	sleep restore_delay / 2;
	turn turret2 to y-axis <180.000000> speed <50>;
}

RestoreTorpedo1()
{
	sleep restore_delay / 2;
	turn torpedo1 to y-axis <0.000000> speed <75>;
	turn torpedo1 to x-axis <0.000000> speed <75>;
}

RestoreTorpedo2()
{
	sleep restore_delay / 2;
	turn torpedo2 to y-axis <0.000000> speed <75>;
	turn torpedo2 to x-axis <0.000000> speed <75>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		sleep 500;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <25>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <75>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <75>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}
	
QueryPrimary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = flare1;
	}
	if (gun_1 == 1)
	{
		piecenum = flare2;
	}
	if (gun_1 == 2)
	{
		piecenum = flare3;
	}
	if (gun_1 == 3)
	{
		piecenum = flare4;
	}
	if (gun_1 == 4)
	{
		piecenum = flare5;
	}
	if (gun_1 == 5)
	{
		piecenum = flare6;
	}
}

FirePrimary()
{
		if( gun_1 == 0 )
		{
			move barrel1 to z-axis [-2.400000] now;
			show flare1;
			sleep 150;
			hide flare1;
			move barrel1 to z-axis [0.000000] speed [3.000000];
		}
		if( gun_1 == 1 )
		{
			move barrel2 to z-axis [-2.400000] now;
			show flare2;
			sleep 150;
			hide flare2;
			move barrel2 to z-axis [0.000000] speed [3.000000];
		}
		if( gun_1 == 2 )
		{
			move barrel3 to z-axis [-2.400000] now;
			show flare3;
			sleep 150;
			hide flare3;
			move barrel3 to z-axis [0.000000] speed [3.000000];
		}
		if( gun_1 == 3 )
		{
			move barrel4 to z-axis [-2.400000] now;
			show flare4;
			sleep 150;
			hide flare4;
			move barrel4 to z-axis [0.000000] speed [3.000000];
		}
		if( gun_1 == 4 )
		{
			move barrel5 to z-axis [-2.400000] now;
			show flare5;
			sleep 150;
			hide flare5;
			move barrel5 to z-axis [0.000000] speed [3.000000];
		}
		if( gun_1 == 5 )
		{
			move barrel6 to z-axis [-2.400000] now;
			show flare6;
			sleep 150;
			hide flare6;
			move barrel6 to z-axis [0.000000] speed [3.000000];
		}
		++gun_1;
		if( gun_1 == 6 )
		{
			gun_1 = 0;
		}
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <90.000000>;
	wait-for-turn turret2 around y-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

QuerySecondary(piecenum)
{
	if (laser == 0)
	{
		piecenum = flare21;
	}
	if (laser == 1)
	{
		piecenum = flare22;
	}
	if (laser == 2)
	{
		piecenum = flare23;
	}
	if (laser == 3)
	{
		piecenum = flare24;
	}
		
}

FireSecondary() 
{
	++laser;
	if (laser == 4)
	{
		laser = 0;
	}
}

/*
AimFromTertiary(piecenum)
{
	piecenum = mis1;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	//explode mis1 type NOHEATCLOUD;
	++gun_2;
	if( gun_2 == 2 )
	{
		gun_2 = 0;
	}
}

QueryTertiary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = mis1;
	}
	if( gun_2 == 1 )
	{
		piecenum = mis2;
	}

}
*/

AimFromWeapon4(piecenum)
{
	piecenum = torpedo1;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn torpedo1 to y-axis heading speed <75>;
	turn torpedo1 to x-axis <0> - pitch speed <75>;
	wait-for-turn torpedo1 around y-axis;
	wait-for-turn torpedo1 around x-axis;
	start-script RestoreTorpedo1();
	return (1);
}

FireWeapon4()
{
	++torpedo_1;
	if (torpedo_1 == 2)
	{
		torpedo_1 = 0;
	}
}

QueryWeapon4(piecenum)
{
	if (torpedo_1 == 0)
	{
		piecenum = flaret1a;
	}
	if (torpedo_1 == 1)
	{
		piecenum = flaret1b;
	}
}

AimFromWeapon5(piecenum)
{
	piecenum = torpedo2;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn torpedo2 to y-axis heading speed <75>;
	turn torpedo2 to x-axis <0> - pitch speed <75>;
	wait-for-turn torpedo2 around y-axis;
	wait-for-turn torpedo2 around x-axis;
	start-script RestoreTorpedo1();
	return (1);
}

FireWeapon5()
{
	++torpedo_2;
	if (torpedo_2 == 2)
	{
		torpedo_2 = 0;
	}
}

QueryWeapon5(piecenum)
{
	if (torpedo_2 == 0)
	{
		piecenum = flaret2a;
	}
	if (torpedo_2 == 1)
	{
		piecenum = flaret2b;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
	corpsetype = 1;
	explode turret1 type NOHEATCLOUD;
	explode sleeve1 type NOHEATCLOUD;
	explode barrel1 type NOHEATCLOUD;
	explode barrel2 type NOHEATCLOUD;
	explode turret2 type NOHEATCLOUD;
	explode sleeve2 type NOHEATCLOUD;
	explode barrel3 type NOHEATCLOUD;
	explode barrel6 type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	return (corpsetype);
	}
	if( severity <= 50 )
	{
	corpsetype = 2;
	explode turret1 type NOHEATCLOUD |FALL;
	explode sleeve1 type NOHEATCLOUD |FALL;
	explode barrel1 type NOHEATCLOUD |FALL;
	explode barrel2 type NOHEATCLOUD |FALL;
	explode turret2 type NOHEATCLOUD |FALL;
	explode sleeve2 type NOHEATCLOUD |FALL;
	explode barrel3 type NOHEATCLOUD |FALL;
	explode barrel6 type NOHEATCLOUD |FALL;
	explode body type NOHEATCLOUD;
	return (corpsetype);
	}
	corpsetype = 3;
	explode turret1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve2 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel3 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel6 type NOHEATCLOUD |FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD;
	return (corpsetype);
}
