#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, door1, door2, plate1, plate2,
       nano2, nano1, post1, post2, body, supports, node;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;
static-var	shield_on, nbr_shield, dome_on, nbr_dome ; 

// Signal definitions
#define SIG_ACTIVATE			2

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-90.021978> speed <175.000000>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <90.021978> speed <175.000000>;
		sleep 514;
	}

/*	if( TRUE )
	{
		move door1 to y-axis [-5.250000] speed [10.000000];
		move door2 to y-axis [-5.850000] speed [11.000000];
		sleep 518;
	}
*/
	if( TRUE )
	{
		move plate1 to y-axis [4.021160] speed [7.000000];
		move plate2 to y-axis [4.021160] speed [7.000000];
		sleep 519;
	}
	if( TRUE )
	{
		turn nano2 to y-axis <-90.021978> speed <173.000000>;
		turn nano1 to y-axis <90.021978> speed <173.000000>;
		sleep 519;
	}
	sleep 13;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate1 to y-axis [4.021160] now;
//		move door1 to y-axis [-5.250000] now;
		move plate2 to y-axis [4.021160] now;
//		move door2 to y-axis [-5.850000] now;
		turn door1 to z-axis <-90.021978> now;
		turn door2 to z-axis <90.021978> now;
		turn nano2 to y-axis <-90.021978> now;
		turn nano2 to y-axis <0.000000> speed <173.000000>;
		turn nano1 to y-axis <90.021978> now;
		turn nano1 to y-axis <0.000000> speed <173.000000>;
		sleep 518;
	}
	if( TRUE )
	{
		move plate1 to y-axis [0.000000] speed [7.000000];
		move plate2 to y-axis [0.000000] speed [7.000000];
		sleep 519;
	}
/*
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [10.000000];
		move door2 to y-axis [0.000000] speed [11.000000];
		sleep 520;
	}
*/
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <173.000000>;
		turn door2 to z-axis <0.000000> speed <173.000000>;
		sleep 520;
	}
	sleep 23;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
	}
	++Static_Var_1;
	if( Static_Var_1 == 2 )
	{
		Static_Var_1 = 0;
	}
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
//	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
//	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD ;
		explode beam1 type NOHEATCLOUD ;
		explode beam2 type NOHEATCLOUD ;
		explode door1 type NOHEATCLOUD ;
		explode door2 type NOHEATCLOUD ;
		explode plate1 type NOHEATCLOUD ;
		explode plate2 type NOHEATCLOUD ;
		explode post1 type NOHEATCLOUD ;
		explode post2 type NOHEATCLOUD ;
		explode nano1 type NOHEATCLOUD ;
		explode nano2 type NOHEATCLOUD ;
		explode pad type NOHEATCLOUD ;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD ;
		explode beam1 type FALL | NOHEATCLOUD;
		explode beam2 type FALL | NOHEATCLOUD;
		explode door1 type NOHEATCLOUD ;
		explode door2 type NOHEATCLOUD  | NOHEATCLOUD ;
		explode plate1 type NOHEATCLOUD ;
		explode plate2 type NOHEATCLOUD ;
		explode post1 type FALL | NOHEATCLOUD;
		explode post2 type FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD ;
		explode nano2 type SHATTER | NOHEATCLOUD;
		explode pad type NOHEATCLOUD ;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD ;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode door1 type NOHEATCLOUD ;
		explode door2 type NOHEATCLOUD  | NOHEATCLOUD ;
		explode plate1 type NOHEATCLOUD ;
		explode plate2 type NOHEATCLOUD ;
		explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode nano2 type SHATTER | BITMAP1;
		explode pad type NOHEATCLOUD ;
		return (0);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD ;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode door1 type NOHEATCLOUD ;
	explode door2 type NOHEATCLOUD  | NOHEATCLOUD ;
	explode plate1 type NOHEATCLOUD ;
	explode plate2 type NOHEATCLOUD ;
	explode post1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode post2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pad type NOHEATCLOUD ;
}
