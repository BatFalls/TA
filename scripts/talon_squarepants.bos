#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel, sleeve, wake1, wake2, wake3,
       wake4, torp, launch, radar;

static-var  Static_Var_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_1			4
#define SIG_MOVE			8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activate()
{
	spin radar around y-axis speed <100.000000> accelerate <1.000000>;
}

Deactivate()
{
	spin radar around y-axis speed <0.000000> accelerate <1.000000>;
}

Create()
{	
	hide flare;
	start-script SmokeUnit();	
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 or Static_Var_1 == 2 )
		{
			sleep 100;
			emit-sfx 256 | 3 from wake1;
			sleep 100;
			emit-sfx 256 | 3 from wake2;
			sleep 100;
			emit-sfx 256 | 3 from wake3;
			sleep 100;
			emit-sfx 256 | 3 from wake4;
		}
		
		sleep 125;
	}
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed <0.000000> accelerate <-10.000000>;
	sleep 2000;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis <180.000000> + heading speed <100.000000>;
	turn sleeve to x-axis pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0.0> speed <100.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1025 from flare;
	move sleeve to z-axis [1.] now;
	move sleeve to z-axis [0.] speed [1.];
	move barrel to z-axis [1.] now;
	move barrel to z-axis [0.] speed [1.];
	spin barrel around z-axis speed <300.000000>;	
	sleep 300;
}

FireTertiary()
{
	move torp to z-axis [-1.000000] now;
	move torp to z-axis [0.000000] speed [3.000000];
	emit-sfx 256 | 3 from launch; //buble
}

AimFromPrimary(piecenum)
{
	piecenum = flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromTertiary(piecenum)
{
	piecenum = launch;
}

QueryTertiary(piecenum)
{
	piecenum = launch;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode barrel type NOHEATCLOUD ;
		explode base type NOHEATCLOUD ;
		explode flare type NOHEATCLOUD ;
		explode sleeve type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | NOHEATCLOUD;
		explode base type FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode turret type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode base type NOHEATCLOUD;
	explode flare type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type SHATTER | NOHEATCLOUD;
	return (corpsetype);
}