#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, nanoturd, nanobase, nanoturn, door1, door2, nano1, nano4, lath4,
       nano2, nano3, lath1, lath2, lath3, w1, w2, w3,
       w4, w5, w6, w7, w8, wakes;

static-var  Aiming, Static_Var_Sea, Emit, statechg_DesiredState, statechg_StateChanging;


WobbleUnit()
{
	while( TRUE )
	{
		move base to y-axis [1.1] speed [1.];
		wait-for-move base along y-axis;
		move base to y-axis [-0.] speed [1.];
		sleep 500;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	turn body to z-axis <0.> * anglez speed <105.>;
	turn body to x-axis <0.> * anglex speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

activatescr()
{
	if( TRUE )
	{
		move door1 to x-axis [-2.0] speed [4.];
		move door2 to x-axis [2.0] speed [4.];
		wait-for-move door1 along x-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [6.] speed [6.];
		move nano2 to y-axis [8.] speed [8.];
		move nano3 to y-axis [10.] speed [10.];
		move nano4 to y-axis [10.] speed [12.];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		spin nano1 around y-axis speed <360.>;
		spin nano2 around y-axis speed <90.>;
		spin nano3 around y-axis speed <180.>;
		spin nano4 around y-axis speed <240.>;
	}
	sleep 750;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	move nanobase to z-axis [0.] speed [15.];
	
	turn nanoturd to y-axis <0.> speed <100.>;
	
	if( TRUE )
	{
		stop-spin nano1 around y-axis;
		stop-spin nano2 around y-axis;
		stop-spin nano3 around y-axis;
		stop-spin nano4 around y-axis;
		turn nano1 to y-axis <0.> speed <360.>;
		turn nano2 to y-axis <0.> speed <360.>;
		turn nano3 to y-axis <0.> speed <360.>;
		turn nano4 to y-axis <0.> speed <360.>;
		wait-for-turn nano2 around y-axis;
		wait-for-turn nano1 around y-axis;
		wait-for-turn nano3 around y-axis;
		wait-for-turn nano4 around y-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [0.] speed [6.];
		move nano2 to y-axis [0.] speed [8.];
		move nano3 to y-axis [0.] speed [10.];
		move nano4 to y-axis [0.] speed [12.];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		move door1 to x-axis [0.0] speed [4.];
		move door2 to x-axis [0.0] speed [4.];
		wait-for-move door1 along x-axis;
	}
	sleep 50;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
			Aiming = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
			Aiming = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Stop()
{
	set INBUILDSTANCE to 0;
	move nanobase to z-axis [0.] speed [15.];
	turn nanoturd to y-axis <0.> now;
	call-script deactivatescr();
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
}

StopMoving()
{
	signal 2;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_Sea == 2 OR Static_Var_Sea == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_Sea = state;
}

Create()
{
	start-script waking();
	Aiming = 1;
	Emit = 1;
	call-script InitState();
	start-script SmokeUnit();
	start-script WobbleUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	start-script RequestState(0);
	while( Aiming )
	{
		sleep 100;
	}
	signal 4;
	turn nanoturd to y-axis Func_Var_1 speed <180.>;
	move nanobase to z-axis [25.] speed [15.];
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal 4;
	set-signal-mask 4;
	sleep 2000;
	set-signal-mask 0;
	signal 4;
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Emit == 1 )
	{
		piecenum = lath1;
	}
	if( Emit == 2 )
	{
		piecenum = lath2;
	}
	if( Emit == 3 )
	{
		piecenum = lath3;
	}
	if( Emit == 4 )
	{
		piecenum = lath4;
	}
	++Emit;
	if( Emit == 5 )
	{
		Emit = 1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lath1 type NOHEATCLOUD;
	explode lath1 type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode nano1 type NOHEATCLOUD;
	explode nano2 type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode nanoturd type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	return (corpsetype);
}
