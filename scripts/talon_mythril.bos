#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pelvis, lthigh, lleg, lfoot, rthigh, rleg, rfoot, body, shield_pos,
		sleeves, engine, gun1, gun2, gun3, gun4, rminigun, lminigun,
		rflare, lflare, rbarrel, lbarrel,
       flare1, flare2, flare3, flare4, 
       beamflare1, beamflare2, beamflare3, beamflare4,
       msl1, msl2, msl3, msl4, msl5, msl6, msl7, msl8,
       rckflare1, rckflare2, rckflare3, rckflare4, rckflare5, rckflare6;
  

static-var  Static_Var_1, gun_1, gatling_1, gatling_2, bMoving, Main_Gun_Heading, beam_1, msl_1, rck_1, shield_onoff;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16
#define SIG_AIM_4			32
#define SIG_AIM_5			64
#define SIG_AIM_6			128

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

walk()
{
	if( TRUE )
	{
		//turn lgun to x-axis <10.000000> speed <8.000000>;
		//turn rgun to x-axis <-10.000000> speed <16.000000>;
		turn lthigh to x-axis <20.000000> speed <35.000000>;
		turn rthigh to x-axis <-10.000000> speed <35.000000>;
		turn lfoot to x-axis <-5.005495> speed <60.000000>;
		turn rfoot to x-axis <1.600000> speed <45.000000>;
		turn rleg to x-axis <-10.000000> speed <50.000000>;
		//turn body to x-axis <3.000000> speed <5.000000>;
		sleep 505;
		turn lfoot to x-axis <7.005495> speed <60.000000>;
		turn rfoot to x-axis <3.500000> speed <45.000000>;
		turn rleg to x-axis <20.005495> speed <60.000000>;
		sleep 600;
		turn pelvis to z-axis <4.000000> speed <3.000000>;
	}
	if( TRUE )
	{
		//turn lgun to x-axis <-10.000000> speed <17.000000>;
		//turn rgun to x-axis <10.000000> speed <17.000000>;
		turn lthigh to x-axis <-10.005495> speed <37.000000>;
		turn rthigh to x-axis <10.005495> speed <40.000000>;
		turn rfoot to x-axis <-3.005495> speed <80.000000>;
		turn lleg to x-axis <-10.005495> speed <80.000000>;
		sleep 1050;
		turn rfoot to x-axis <7.005495> speed <60.000000>;
		turn lleg to x-axis <20.005495> speed <60.000000>;
		sleep 600;
		turn pelvis to z-axis <-4.000000> speed <7.000000>;
		//turn lgun to x-axis <0.000000> speed <12.000000>;
		//turn rgun to x-axis <0.000000> speed <12.000000>;
	}
	while( TRUE )
	{
		if( TRUE )
		{
			turn pelvis to y-axis <-5.000000> speed <10.000000>;
			turn pelvis to x-axis <-2.000000> speed <5.000000>;
			turn lthigh to x-axis <20.005495> speed <37.000000>;
			turn rthigh to x-axis <-20.005495> speed <40.000000>;
			turn lfoot to x-axis <-7.005495> speed <85.000000>;
			turn rleg to x-axis <-3.005495> speed <60.000000>;
			sleep 1050;
			turn lfoot to x-axis <7.005495> speed <60.000000>;
			turn rfoot to x-axis <7.005495> speed <45.000000>;
			turn rleg to x-axis <10.005495> speed <50.000000>;
			sleep 600;
			turn pelvis to z-axis <4.000000> speed <7.000000>;
		}
		if( TRUE )
		{
			turn pelvis to y-axis <4.000000> speed <11.000000>;
			turn pelvis to x-axis <6.000000> speed <5.000000>;
			turn lthigh to x-axis <-20.005495> speed <35.000000>;
			turn rthigh to x-axis <20.005495> speed <45.000000>;
			turn rfoot to x-axis <-7.005495> speed <70.000000>;
			turn lleg to x-axis <-10.005495> speed <50.000000>;
			sleep 1050;
			turn rfoot to x-axis <12.005495> speed <50.000000>;
			turn lleg to x-axis <10.005495> speed <50.000000>;
			sleep 600;		
			turn pelvis to z-axis <-3.000000> speed <7.000000>;
		}
	}
}

stop()
{
	turn lthigh to x-axis <0.000000> speed <50.000000>;
	turn rthigh to x-axis <0.000000> speed <50.000000>;
	turn lleg to x-axis <0.000000> speed <80.000000>;
	turn rleg to x-axis <0.000000> speed <80.000000>;
	turn pelvis to y-axis <0.000000> speed <80.000000>;
	turn pelvis to x-axis <0.000000> speed <20.000000>;
	move pelvis to y-axis [0.000000] speed [20.000000];
	turn pelvis to z-axis <0.000000> speed <20.000000>;
	turn rfoot to x-axis <0.000000> speed <80.000000>;
	turn lfoot to x-axis <0.000000> speed <80.000000>;
	//wait-for-turn body around x-axis;
	turn pelvis to x-axis <10.000000> speed <46.000000>;
	//turn lgun to x-axis <-10.000000> speed <46.000000>;
	//turn rgun to x-axis <-10.000000> speed <46.000000>;
	//wait-for-turn body around x-axis;
	turn pelvis to x-axis <-3.000000> speed <46.000000>;
	turn pelvis to x-axis <0.000000> speed <46.000000>;
	//turn lgun to x-axis <0.000000> speed <46.000000>;
	//turn rgun to x-axis <0.000000> speed <46.000000>;
	wait-for-turn pelvis around x-axis;
	sleep 20;
}

Shield()
{
	shield_onoff = !shield_onoff;
}

Create()
{
	gun_1 = 0;
	beam_1 = 0;
	msl_1 = 0;
	rck_1 = 0;
	gatling_1 = 0;	
	gatling_2 = 0;
	shield_onoff = 1;
	start-script SmokeUnit();
	Main_Gun_Heading = 0;
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	start-script stop();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep 5000;
	turn body to y-axis <0.000000> speed <25.000000>;
	turn sleeves to x-axis <0.000000> speed <25.000000>;
	wait-for-turn body around y-axis;
	Main_Gun_Heading = 0;
}

RestoreAfterDelay2()
{
	sleep 2500;
	turn lminigun to x-axis <0.000000> speed <25.000000>;
	turn rminigun to x-axis <0.000000> speed <25.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimPrimary(heading, pitch)
{
	
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn body to y-axis heading speed <55.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <35.000000>;
	Main_Gun_Heading = heading;
	//get PRINT(heading);
	wait-for-turn body around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 0;
	
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare3;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare4;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = body;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn body to y-axis heading speed <55.000000>;
	wait-for-turn body around y-axis;
	return (1);
}

FireSecondary()
{
		rck_1 = 0;
		sleep 100;
		rck_1 = 1;
		sleep 100;
		rck_1 = 2;
		sleep 100;
		rck_1 = 3;
		sleep 100;
		rck_1 = 4;
		sleep 100;
		rck_1 = 5;
		sleep 100;
}

QuerySecondary(piecenum)
{
	if( rck_1 == 0 )
	{
		piecenum = rckflare1;
	}
	if( rck_1 == 1 )
	{
		piecenum = rckflare3;
	}	
	if( rck_1 == 2 )
	{
		piecenum = rckflare5;
	}	
	if( rck_1 == 3 )
	{
		piecenum = rckflare2;
	}
	if( rck_1 == 4 )
	{
		piecenum = rckflare4;
	}
	if( rck_1 == 5 )
	{
		piecenum = rckflare6;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = body;
}

AimTertiary(heading, pitch)
{	
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	wait-for-turn body around y-axis;
	return (1);
}

FireTertiary()
{
	++beam_1;
	if( beam_1 == 4 )
	{
		beam_1 = 0;	
	}
}

QueryTertiary(piecenum)
{
	if( beam_1 == 0 )
	{
		piecenum = beamflare1;
	}
	if( beam_1 == 1 )
	{
		piecenum = beamflare3;
	}
	if( beam_1 == 2 )
	{
		piecenum = beamflare2;
	}
	if( beam_1 == 3 )
	{
		piecenum = beamflare4;
	}
}

AimFromWeapon4(piecenum)
{
	piecenum = body;
}

AimWeapon4(heading, pitch)
{	
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;	
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	wait-for-turn body around y-axis;
	return (1);
}

FireWeapon4()
{
	++msl_1;		
	if (msl_1 == 8) 
	{
		msl_1 = 0;
	}
	
}

QueryWeapon4(piecenum)
{
	if( msl_1 == 0 )
	{
		piecenum = msl1;
	}
	if( msl_1 == 1 )
	{
		piecenum = msl5;
	}
	if( msl_1 == 2 )
	{
		piecenum = msl2;
	}
	if( msl_1 == 3 )
	{
		piecenum = msl6;
	}
	if( msl_1 == 4 )
	{
		piecenum = msl3;
	}
	if( msl_1 == 5 )
	{
		piecenum = msl7;
	}
	if( msl_1 == 6 )
	{
		piecenum = msl4;
	}
	if( msl_1 == 7 )
	{
		piecenum = msl8;
	}
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn rminigun to x-axis <0.000000> - pitch speed <75.000000>;
	turn lminigun to x-axis <0.000000> - pitch speed <75.000000>;
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	wait-for-turn body around y-axis;
	wait-for-turn rminigun around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

QueryWeapon5(piecenum)
{
	if( gatling_1 == 1 or gatling_1 == 3 or gatling_1 == 5 )
	{
		piecenum = lflare;
	}
	else
	{
		piecenum = rflare;
	}
}

FireWeapon5()
{
	++gatling_1;
	if( gatling_1 >= 6 )
	{
		gatling_1 = 0;
	}
	turn rbarrel to z-axis <60.000000> * gatling_1 speed <500.000000>;
	turn lbarrel to z-axis <60.000000> * gatling_1 speed <500.000000>;
}

AimFromWeapon5(piecenum)
{
	piecenum = body;
}

/*
AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn lminigun to x-axis <0.000000> - pitch speed <75.000000>;
	if (heading > (Main_Gun_Heading + 3000) or heading < (Main_Gun_Heading - 3000))
	{
		return (0);
	}
	wait-for-turn body around y-axis;
	wait-for-turn lminigun around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

QueryWeapon6(piecenum)
{
	piecenum = lflare;
}

FireWeapon6()
{
	emit-sfx 1024 + 0 from lflare;
	++gatling_2;
	if( gatling_2 >= 6 )
	{
		gatling_2 = 0;
	}
	turn lbarrel to z-axis <60.000000> * gatling_2 speed <500.000000>;
}

AimFromWeapon6(piecenum)
{
	piecenum = body;
}
*/

AimWeapon6(heading, pitch)
{
	return (shield_onoff);
}

FireWeapon6()
{
}

AimFromWeapon6(piecenum)
{
	piecenum = shield_pos;
}

QueryWeapon6(piecenum)
{
	piecenum = shield_pos;
}

Killed(severity, corpsetype)
{

	if( severity <= 66 )
	{
		corpsetype = 1;
		explode lfoot type NOHEATCLOUD;
		explode lleg type NOHEATCLOUD ;
		explode lthigh type NOHEATCLOUD ;
		explode sleeves type NOHEATCLOUD ;
		explode pelvis type NOHEATCLOUD ;
		explode rfoot type NOHEATCLOUD ;
		explode rleg type NOHEATCLOUD ;
		explode rthigh type NOHEATCLOUD ;
		explode body type NOHEATCLOUD ;
		explode rminigun type NOHEATCLOUD ;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pelvis type NOHEATCLOUD  | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode body type NOHEATCLOUD ;
	return (corpsetype);
}
