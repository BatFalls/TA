#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, plate, pillar, turret, lsystem, llathe, rsystem, rlathe,
       door1, door2, control1, control2, tail, wake1, wake2;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10;

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake1;
		emit-sfx 256 | 3 from wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal 2;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_3 )
	{
		Static_Var_2 = requestedstate;
		return (0);
	}
	Static_Var_3 = 1;
	currentstate = Static_Var_2;
	Static_Var_2 = requestedstate;
	while( Static_Var_2 != currentstate )
	{
		if( !Static_Var_2 )
		{
			show pillar;
			move door1 to x-axis [3.] speed [6.];
			move door1 to y-axis [-1.] speed [2.];
			move door2 to x-axis [-3.] speed [6.];
			move door2 to y-axis [-1.] speed [2.];
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 250;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 250;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			move pillar to y-axis [7.] speed [7.];
			sleep 1000;
			turn lsystem to y-axis <90.> speed <180.>;
			turn rsystem to y-axis <-90.> speed <180.>;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 500;
			turn lsystem to x-axis <-90.> speed <180.>;
			turn rsystem to x-axis <90.> speed <180.>;
			turn turret to y-axis <90.> + Static_Var_1 speed <90.>;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 500;
			wait-for-turn turret around y-axis;
			set INBUILDSTANCE to 1;
			currentstate = 0;
		}
		if( Static_Var_2 )
		{
			set INBUILDSTANCE to 0;
			turn lsystem to x-axis <0.> speed <180.>;
			turn rsystem to x-axis <0.> speed <180.>;
			turn turret to y-axis <0.> speed <90.>;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 500;
			wait-for-turn turret around y-axis;
			turn lsystem to y-axis <0.> speed <180.>;
			turn rsystem to y-axis <0.> speed <180.>;
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 500;
			move pillar to y-axis [0.] speed [7.];
			emit-sfx 256 | 3 from llathe;
			emit-sfx 256 | 3 from rlathe;
			sleep 1000;
			move door1 to x-axis [0.] speed [6.];
			move door1 to y-axis [0.] speed [2.];
			move door2 to x-axis [0.] speed [6.];
			move door2 to y-axis [0.] speed [2.];
			sleep 500;
			hide pillar;
			currentstate = 1;
		}
	}
	Static_Var_3 = 0;
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 1;
	Static_Var_3 = 0;
	Static_Var_4 = 5;
	Static_Var_5 = 16;
	Static_Var_6 = 0;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_9 = 1100;
	Static_Var_10 = 1100;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	Static_Var_6 = 1;
	Static_Var_7 = 1;
	Static_Var_8 = 600;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_4 == 5 )
	{
		piecenum = llathe;
		Static_Var_4 = 7;
		return (0);
	}
	if( Static_Var_4 == 7 )
	{
		piecenum = rlathe;
		Static_Var_4 = 5;
		return (0);
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode lsystem type BITMAPONLY | BITMAP2;
		explode rsystem type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode control1 type BITMAPONLY | BITMAP1;
		explode control2 type BITMAPONLY | BITMAP1;
		explode tail type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode lsystem type BITMAPONLY | BITMAP2;
		explode rsystem type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP2;
		explode door2 type FALL | BITMAP2;
		explode control1 type BITMAPONLY | BITMAP1;
		explode control2 type BITMAPONLY | BITMAP1;
		explode tail type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode lsystem type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rsystem type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode control1 type BITMAPONLY | BITMAP1;
	explode control2 type BITMAPONLY | BITMAP1;
	explode tail type BITMAPONLY | BITMAP1;
}
