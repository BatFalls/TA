#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, post, nano, lathe, beam, rupleg3, rleg3, rupleg2, rleg2, rupleg1, 
		rleg1, lupleg3, lleg3, lupleg2, lleg2, lupleg1, lleg1;

static-var  bMoving, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5;

// Signal definitions
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	while( !Static_Var_4 AND Static_Var_3 != Static_Var_5 )
	{
		Static_Var_4 = 1;
		if( Static_Var_3 AND !Static_Var_5 )
		{
			move post to y-axis [3.100000] speed [6.200000];
			sleep 250;
			turn nano to x-axis <120.000000> speed <270.000000>;
			sleep 450;
			move lathe to z-axis [-3.200000] speed [8.000000];
			turn nano to x-axis <179.895604> speed <120.000000>;
			sleep 500;
			turn turret to y-axis Static_Var_2 speed <160.000000>;
			wait-for-turn turret around y-axis;
			set INBUILDSTANCE to 1;
			Static_Var_5 = 1;
		}
		if( !Static_Var_3 AND Static_Var_5 )
		{
			Static_Var_5 = 0;
			set INBUILDSTANCE to 0;
			turn turret to y-axis <0.000000> speed <160.000000>;
			move lathe to z-axis [0.000000] speed [8.000000];
			sleep 500;
			turn nano to x-axis <60.000000> speed <270.000000>;
			sleep 450;
			turn nano to x-axis <0.000000> speed <120.000000>;
			move post to y-axis [0.000000] speed [6.200000];
			sleep 500;
		}
	}
	Static_Var_4 = 0;
}

Create()
{
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 1;
	Static_Var_4 = 0;
	Static_Var_5 = 0;
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	Static_Var_3 = 1;
	start-script RequestState();
}

StopBuilding()
{
	Static_Var_3 = 0;
	sleep 3000;
	if( !Static_Var_3 )
	{
		start-script RequestState();
	}
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <14.000000>;
			turn base to y-axis <0.000000> speed <2.000000>;
			turn rupleg1 to y-axis <25.000000> speed <135.000000>;
			turn rupleg1 to z-axis <0.000000> speed <97.000000>;
			turn rupleg2 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg3 to y-axis <0.000000> speed <135.000000>;
			turn rupleg3 to z-axis <32.500000> speed <67.000000>;
			turn lupleg1 to y-axis <0.000000> speed <135.000000>;
			turn lupleg1 to z-axis <-32.500000> speed <67.000000>;
			turn lupleg2 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg2 to z-axis <0.000000> speed <97.000000>;
			turn lupleg3 to y-axis <25.000000> speed <95.000000>;
			turn rleg1 to z-axis <0.000000> speed <97.000000>;
			turn rleg3 to z-axis <-16.247253> speed <67.000000>;
			turn lleg1 to z-axis <16.247253> speed <67.000000>;
			turn lleg2 to z-axis <0.000000> speed <97.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to y-axis <11.247253> speed <135.000000>;
			turn rupleg2 to z-axis <16.247253> speed <77.000000>;
			turn rupleg3 to y-axis <12.500000> speed <115.000000>;
			turn rupleg3 to z-axis <16.247253> speed <77.000000>;
			turn lupleg1 to y-axis <-12.500000> speed <115.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <77.000000>;
			turn lupleg2 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to y-axis <12.500000> speed <115.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <77.000000>;
			turn rleg2 to z-axis <-8.115385> speed <77.000000>;
			turn rleg3 to z-axis <-8.115385> speed <77.000000>;
			turn lleg1 to z-axis <8.115385> speed <77.000000>;
			turn lleg3 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn rupleg1 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to z-axis <32.500000> speed <67.000000>;
			turn rupleg3 to y-axis <25.000000> speed <135.000000>;
			turn rupleg3 to z-axis <0.000000> speed <97.000000>;
			turn lupleg1 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg1 to z-axis <0.000000> speed <97.000000>;
			turn lupleg2 to y-axis <25.000000> speed <135.000000>;
			turn lupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to z-axis <-32.500000> speed <67.000000>;
			turn rleg2 to z-axis <-16.247253> speed <67.000000>;
			turn rleg3 to z-axis <0.000000> speed <97.000000>;
			turn lleg1 to z-axis <0.000000> speed <97.000000>;
			turn lleg3 to z-axis <16.247253> speed <67.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <4.000000>;
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <-12.500000> speed <95.000000>;
			turn rupleg1 to z-axis <16.247253> speed <77.000000>;
			turn rupleg2 to y-axis <12.500000> speed <115.000000>;
			turn rupleg2 to z-axis <16.247253> speed <77.000000>;
			turn rupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg1 to y-axis <0.000000> speed <135.000000>;
			turn lupleg2 to y-axis <12.500000> speed <95.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <77.000000>;
			turn lupleg3 to y-axis <-12.500000> speed <95.000000>;
			turn lupleg3 to z-axis <-16.247253> speed <87.000000>;
			turn rleg1 to z-axis <-8.115385> speed <77.000000>;
			turn rleg2 to z-axis <-8.115385> speed <77.000000>;
			turn lleg2 to z-axis <8.115385> speed <77.000000>;
			turn lleg3 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <9.000000>;
			turn rupleg1 to y-axis <0.000000> speed <115.000000>;
			turn rupleg1 to z-axis <32.500000> speed <67.000000>;
			turn rupleg2 to y-axis <25.000000> speed <115.000000>;
			turn rupleg2 to z-axis <0.000000> speed <97.000000>;
			turn rupleg3 to y-axis <-25.000000> speed <95.000000>;
			turn lupleg1 to y-axis <25.000000> speed <95.000000>;
			turn lupleg2 to y-axis <0.000000> speed <115.000000>;
			turn lupleg2 to z-axis <-32.500000> speed <67.000000>;
			turn lupleg3 to y-axis <-25.000000> speed <135.000000>;
			turn lupleg3 to z-axis <0.000000> speed <97.000000>;
			turn rleg1 to z-axis <-16.247253> speed <67.000000>;
			turn rleg2 to z-axis <0.000000> speed <97.000000>;
			turn lleg2 to z-axis <16.247253> speed <67.000000>;
			turn lleg3 to z-axis <0.000000> speed <97.000000>;
			sleep 210;
		}
		if( bMoving )
		{
			turn rupleg1 to y-axis <12.500000> speed <135.000000>;
			turn rupleg1 to z-axis <16.247253> speed <77.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg3 to y-axis <-12.500000> speed <115.000000>;
			turn rupleg3 to z-axis <16.247253> speed <87.000000>;
			turn lupleg1 to y-axis <12.500000> speed <115.000000>;
			turn lupleg1 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg2 to y-axis <-12.500000> speed <115.000000>;
			turn lupleg2 to z-axis <-16.247253> speed <87.000000>;
			turn lupleg3 to y-axis <0.000000> speed <115.000000>;
			turn rleg1 to z-axis <-8.115385> speed <77.000000>;
			turn rleg3 to z-axis <-8.115385> speed <77.000000>;
			turn lleg1 to z-axis <8.115385> speed <77.000000>;
			turn lleg2 to z-axis <8.115385> speed <77.000000>;
			sleep 210;
		}
	}
	turn base to x-axis <0.000000> speed <14.000000>;
	turn base to y-axis <0.000000> speed <2.000000>;
	turn rupleg1 to y-axis <0.000000> speed <115.000000>;
	turn rupleg1 to z-axis <0.000000> speed <87.000000>;
	turn rupleg2 to y-axis <0.000000> speed <115.000000>;
	turn rupleg2 to z-axis <0.000000> speed <87.000000>;
	turn rupleg3 to y-axis <0.000000> speed <115.000000>;
	turn rupleg3 to z-axis <0.000000> speed <87.000000>;
	turn lupleg1 to y-axis <0.000000> speed <115.000000>;
	turn lupleg1 to z-axis <0.000000> speed <87.000000>;
	turn lupleg2 to y-axis <0.000000> speed <115.000000>;
	turn lupleg2 to z-axis <0.000000> speed <87.000000>;
	turn lupleg3 to y-axis <0.000000> speed <115.000000>;
	turn lupleg3 to z-axis <0.000000> speed <87.000000>;
	turn lleg1 to z-axis <0.000000> speed <87.000000>;
	turn lleg2 to z-axis <0.000000> speed <87.000000>;
	turn lleg3 to z-axis <0.000000> speed <87.000000>;
	turn rleg1 to z-axis <0.000000> speed <87.000000>;
	turn rleg2 to z-axis <0.000000> speed <87.000000>;
	turn rleg3 to z-axis <0.000000> speed <87.000000>;
	sleep 210;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

Killed(severity, corpsetype)
{
	hide nano;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode lathe type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD;
		explode lleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lupleg1 type NOHEATCLOUD;
		explode lupleg2 type NOHEATCLOUD;
		explode lupleg3 type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode rleg3 type NOHEATCLOUD;
		explode rupleg1 type NOHEATCLOUD;
		explode rupleg2 type NOHEATCLOUD;
		explode rupleg3 type NOHEATCLOUD;

		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD | SHATTER;
		explode lathe type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD | FALL;
		explode lleg2 type NOHEATCLOUD | FALL;
		explode lleg3 type NOHEATCLOUD | FALL;
		explode lupleg1 type NOHEATCLOUD | FALL;
		explode lupleg2 type NOHEATCLOUD | FALL;
		explode lupleg3 type NOHEATCLOUD | FALL;
		explode rleg1 type NOHEATCLOUD | FALL;
		explode rleg2 type NOHEATCLOUD | FALL;
		explode rleg3 type NOHEATCLOUD | FALL;
		explode rupleg1 type NOHEATCLOUD | FALL;
		explode rupleg2 type NOHEATCLOUD | FALL;
		explode rupleg3 type NOHEATCLOUD | FALL;

		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode nano type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode lathe type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode lupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		explode rupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode nano type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lathe type NOHEATCLOUD;
	explode lleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode lupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg1 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg2 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	explode rupleg3 type NOHEATCLOUD | FALL | FIRE | SMOKE | EXPLODE_ON_HIT;
	return (corpsetype);
}
