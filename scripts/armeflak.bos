#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flarea, flareb, turret, base, body, sleeves, barrela, barrelb,
		msl1, msl2, msl3, msl4, msl5, msl6;

static-var  restore_delay, gun_1, missile;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_3			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Create()
{
	hide flarea;
	hide flareb;
	gun_1 = 0;
	missile = 0;
	restore_delay = 5000;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeves to x-axis <0.000000> speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <450.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <450.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrela to z-axis [-4.000000] now;
		show flarea;
		sleep 150;
		hide flarea;
		move barrela to z-axis [0.000000] speed [15.000000];
	}
	if( gun_1 == 1 )
	{
		move barrelb to z-axis [-4.000000] now;
		show flareb;
		sleep 150;
		hide flareb;
		move barrelb to z-axis [0.000000] speed [15.000000];
	}
	sleep 50;
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = 0;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flarea;
	}
	if( gun_1 == 1 )
	{
		piecenum = flareb;
	}
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	return (1);
}

FireTertiary()
{
	++missile;
	if( missile == 6 )
	{
		missile = 0;
	}
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

QueryTertiary(piecenum)
{
	if( missile == 0 )
	{
		piecenum = msl1;
	}
	if( missile == 1 )
	{
		piecenum = msl2;
	}
	if( missile == 2 )
	{
		piecenum = msl3;
	}
	if( missile == 3 )
	{
		piecenum = msl4;
	}
	if( missile == 4 )
	{
		piecenum = msl5;
	}
	if( missile == 5 )
	{
		piecenum = msl6;
	}
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeves type NOHEATCLOUD;
		explode barrela type NOHEATCLOUD;
		explode barrelb type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | SHATTER;
		explode sleeves type NOHEATCLOUD | SHATTER;
		explode barrela type NOHEATCLOUD | SHATTER;
		explode barrelb type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode sleeves type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode barrela type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode barrelb type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);
}
