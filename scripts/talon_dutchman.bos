#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, barrel1, barrel2,
       barrel3, barrel4,  base, body, turret1, sleeve1,
       turret2, sleeve2, w1, w2, w3, w4, w5, w6,
       w7, w8, w9, wakes, boob, miss1, miss2, aimmsl;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8, Static_Var_9, Static_Var_10, gun_miss;

// Signal definitions
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_MOVE			16
#define SIG_ROCK			32


WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_7 )
		{
			move base to y-axis [1.] speed [0.4];
		}
		else
		{
			move base to y-axis [-1.] speed [0.4];
		}
		Static_Var_7 = !Static_Var_7;
		sleep 750;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to z-axis <0.1> * anglez * 0.5 speed <105.>;
	turn body to x-axis <0.1> * anglex * 0.5 speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= 163840 )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 40 / 20;
		}
		turn body to z-axis Func_Var_3 speed <20.>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

wakes2()
{
	while( TRUE )
	{
		if( Static_Var_6 == 2 OR Static_Var_6 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
		}
		sleep 325;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WobbleUnit();
	start-script wakes2();
	start-script BankClerck();
	
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	turn turret2 to y-axis <180.> now;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_miss = 1;
	Static_Var_3 = 0;
	Static_Var_4 = 0;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3000;
	turn sleeve2 to x-axis <0.> speed <60.>;
	turn turret2 to y-axis <180.> speed <30.>;
	turn sleeve1 to x-axis <0.> speed <60.>;
	turn turret1 to y-axis <0.> speed <30.>;
}

setSFXoccupy(state)
{
	Static_Var_6 = state;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

StopMoving()
{
	signal SIG_MOVE;
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	return (1);
}

FirePrimary()
{
	++gun_miss;
	if(gun_miss == 3 )
	{	
		gun_miss = 1;	
	}
}

AimFromPrimary(piecenum)
{
	piecenum = aimmsl;
}

QueryPrimary(piecenum)
{
	if(gun_miss == 1 )
	{	
		piecenum = miss1;	
	}
	if(gun_miss == 2 )
	{	
		piecenum = miss2;	
	}
}

Rock()
{
	signal SIG_ROCK;
	set-signal-mask SIG_ROCK;
	turn body to x-axis <1.> speed <50.>;
	turn body to z-axis <1.> speed <50.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <20.>;
	turn body to x-axis <0.> speed <20.>;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret1 to y-axis heading speed <75.>;
	turn sleeve1 to x-axis <0.> - pitch speed <75.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	start-script Rock();
	if( Static_Var_1 == 0 )
	{
		emit-sfx 1025 from flare1;
		move barrel1 to z-axis [-2.] now;
		sleep 150;
		move barrel1 to z-axis [0.] speed [2.];
		sleep 150;
	}
	if( Static_Var_1 == 1 )
	{
		emit-sfx 1025 from flare2;
		move barrel2 to z-axis [-2.] now;
		sleep 150;
		move barrel2 to z-axis [0.] speed [2.];
		sleep 150;
	}
	
	++Static_Var_1;
	
	if (Static_Var_1 == 2)
	{
		Static_Var_1 = 0;
	}
}

AimFromSecondary(piecenum)
{
	piecenum = turret1;
}

QuerySecondary(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = flare1;
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimTertiary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn turret2 to y-axis heading speed <75.>;
	turn sleeve2 to x-axis <0.> - pitch speed <75.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	start-script Rock();
	if( Static_Var_2 == 0 )
	{
		emit-sfx 1025 from flare3;
		move barrel3 to z-axis [-3.] now;
		sleep 150;
		move barrel3 to z-axis [0.] speed [1.];
		sleep 150;
	}
	if( Static_Var_2 == 1 )
	{
		emit-sfx 1025 from flare4;
		move barrel4 to z-axis [-3.] now;
		sleep 150;
		move barrel4 to z-axis [0.] speed [1.];
		sleep 150;
	}
	
	++Static_Var_2;
	
	if (Static_Var_2 == 2)
	{
		Static_Var_2 = 0;
	}

}

AimFromTertiary(piecenum)
{
	piecenum = turret2;
}

QueryTertiary(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = flare3;
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = flare4;
	}
	
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		explode sleeve2 type NOHEATCLOUD;
		explode turret2 type NOHEATCLOUD;
		explode sleeve1 type NOHEATCLOUD;
		explode turret1 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | FALL;
		explode body type NOHEATCLOUD | FALL;
		explode sleeve2 type NOHEATCLOUD | FALL;
		explode turret2 type NOHEATCLOUD | FALL;
		explode sleeve1 type NOHEATCLOUD | FALL;
		explode turret1 type NOHEATCLOUD | FALL;
		return (corpsetype);
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
