#define TA

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, turret, pitchturret, flare, gem,  thrust,
		wake1, wake2, wake3, wake4, wake5, wake6;

static-var  Static_Var_1;

// Signal definitions
#define SIG_AIM				22
#define SIG_MOVE			44


lua_FlameShot(Func_Var_1)
{
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 2 or Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
		}
		sleep 300;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	hide flare;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 1500;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn pitchturret to x-axis <0.000000> speed <90.000000>;
}

QueryPrimary(PieceNum)
{
	PieceNum = flare;
}

AimFromPrimary(PieceNum)
{
	PieceNum = pitchturret;
}

AimPrimary(Heading, Pitch)
{
	signal 2;
	set-signal-mask 2;
	turn turret to y-axis Heading speed <180.00>;
	turn pitchturret to x-axis <0.00> - Pitch speed <60.00>;	
	wait-for-turn turret around y-axis;
	wait-for-turn pitchturret around x-axis;
	start-script RestoreAfterDelay();
	return(1);
}

Shot1()
{
	call-script lua_FlameShot(1);
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

SweetSpot(PieceNum)
{
	PieceNum = base;
}

Killed(Severity, CorpseType, Random)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode gem type NOHEATCLOUD;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode gem type NOHEATCLOUD | FALL;
		explode hull type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode gem type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode hull type NOHEATCLOUD;
	explode turret type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	return (corpsetype);	
}
