#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, sides, nose,
		
		plate1, plate2, plate3, plate4, plate5, plate6, plate7, 
		plate8, plate9, plate10, plate11, plate12, plate13, plate14,
		land1, land2, land3, land4, land5, land6, land7,
		land8, land9, land10, land11, land12, land13, land14,
		circle1, circle2, circle3, circle4, circle5, circle6, circle7,
		circle8, circle9, circle10, circle11, circle12, circle13, circle14,
		antinuke, silo, rocket1, udoor, ldoor, ddoor, rdoor,
		radar, sphere, gem, pylon, dish1, dish2, dish3, dish4, dish5, dish6, dish7,
		wake1, wake2, wake3;
		
		

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_RADAR			8


RockOnWaves(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = -18;
	Func_Var_2 = -18;
	while( TRUE )
	{
		while( get ABS(Func_Var_2) < 202 )
		{
			Func_Var_3 = 227 - get ABS(Func_Var_2);
			turn base to x-axis Func_Var_2 speed Func_Var_3 * <0.010989>;
			wait-for-turn base around x-axis;
			Func_Var_2 = Func_Var_2 + Func_Var_1;
		}
		Func_Var_1 = 0 - Func_Var_1;
		Func_Var_2 = Func_Var_2 + Func_Var_1 + Func_Var_1;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Activatescr()
{
	if( TRUE )
	{
		show rocket1;
		//move silo to y-axis [20.0] speed [30.0];
		//spin silo around y-axis speed <0>;
		//wait-for-move silo along y-axis;			
		turn udoor to x-axis <-90.> speed <250.>;
		turn ddoor to x-axis <90.> speed <250.>;
		turn ldoor to z-axis <90.> speed <250.>;
		turn rdoor to z-axis <-90.> speed <250.>;
		wait-for-turn udoor around x-axis;
		wait-for-turn ddoor around x-axis;
		wait-for-turn ldoor around z-axis;
		wait-for-turn rdoor around z-axis;
		sleep 400;
		gun_1 = 1;
	}
	sleep 25;
}

Deactivatescr()
{
	if( TRUE )
	{
		gun_1 = 0;
		turn udoor to x-axis <0.> speed <45.>;
		turn ddoor to x-axis <0.> speed <45.>;
		turn ldoor to z-axis <0.> speed <45.>;
		turn rdoor to z-axis <0.> speed <45.>;
		wait-for-turn udoor around x-axis;
		wait-for-turn ddoor around x-axis;
		wait-for-turn ldoor around z-axis;
		wait-for-turn rdoor around z-axis;
		//move silo to y-axis [-10.0] speed [1.0];
		//wait-for-move silo along y-axis;
		//spin silo around y-axis speed <1.5>;
	}
	sleep 15;
}

Go()
{
	show rocket1;
	call-script Activatescr();
}

Stop()
{
	sleep 4000;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	move pylon to y-axis [-18.] now;
	move sphere to y-axis [-16.] now;
	//move base to y-axis [20.] now;
}

Activate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	move sphere to y-axis [0.] speed [5.];
	move pylon to y-axis [0.] speed [5.];
	sleep 1000;
	spin pylon around y-axis speed <60.> accelerate <1.>;
	spin sphere around y-axis speed <-60.> accelerate <1.>;
	sleep 500;
}

Deactivate()
{
	signal SIG_RADAR;
	set-signal-mask SIG_RADAR;
	spin pylon around y-axis speed <0.> accelerate <-1.>;
	spin sphere around y-axis speed <0.> accelerate <-1.>;
	move sphere to y-axis [-18.] speed [10.];
	move pylon to y-axis [-16.] speed [8.];
	sleep 1000;
	move pylon to y-axis [-16.] speed [5.];
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.000000> speed <1.000000>;
		move base to y-axis [0.229999] speed [0.169995];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.000000> speed <1.000000>;
		move base to y-axis [0.000000] speed [0.169995];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var Func_Var_1;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		emit-sfx 2 from wake3;
		sleep 350;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.000000> speed <1.000000>;
	move base to y-axis [0.000000] speed [0.169995];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3, Func_Var_4, Func_Var_5, Func_Var_6, Func_Var_7, Func_Var_8, Func_Var_9, Func_Var_10, Func_Var_11, Func_Var_12, Func_Var_13, Func_Var_14)
{
	Func_Var_1 = land1;
	Func_Var_2 = land2;
	Func_Var_3 = land3;
	Func_Var_4 = land4;
	Func_Var_5 = land5;
	Func_Var_6 = land6;
	Func_Var_7 = land7;
	Func_Var_8 = land8;
	Func_Var_9 = land9;
	Func_Var_10 = land10;
	Func_Var_11 = land11;
	Func_Var_12 = land12;
	Func_Var_13 = land13;
	Func_Var_14 = land14;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimWeapon1(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( gun_1 == 0 )
	{
		sleep 250;
	}
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 from rocket1;
	sleep 2000;
	hide rocket1;
	gun_1 = 0;
	start-script RequestState(1);
}

QueryWeapon1(piecenum)
{
	piecenum = antinuke;
}

AimFromWeapon3(piecenum)
{
	piecenum = rocket1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode circle3 type NOHEATCLOUD;
		explode circle9 type NOHEATCLOUD;
		explode radar type NOHEATCLOUD;
		explode plate1 type NOHEATCLOUD;
		explode plate2 type NOHEATCLOUD;
		explode udoor type NOHEATCLOUD;
		explode ddoor type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode circle3 type NOHEATCLOUD | FALL;
		explode circle9 type NOHEATCLOUD | FALL;
		explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
		explode plate1 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode plate2 type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode udoor type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		explode ddoor type NOHEATCLOUD | FALL | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD;
	explode circle3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode circle9 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode radar type NOHEATCLOUD | SHATTER | EXPLODE_ON_HIT;
	explode nose type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode plate2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode udoor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode ddoor type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
