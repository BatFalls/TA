#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, turret, sleeve, flare, barrel, base, 
		rupleg3, rleg3, rupleg2, rleg2, rupleg1,
        rleg1, lupleg3, lleg3, lupleg2, lleg2, lupleg1, lleg1;

static-var  bMoving, bAiming;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <8.000000>;
	turn base to x-axis <0.000000> speed <8.000000>;
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	start-script SmokeUnit();
}

StartMoving()
{
	if( bMoving )
	{
		return (0);
	}
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	bMoving = TRUE;
	while( bMoving )
	{
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <2.093407> now;
				turn base to y-axis <1.049451> now;
			}
			turn base to x-axis <0.000000> speed <14.000000>;
			turn base to y-axis <0.000000> speed <2.000000>;
			turn rupleg1 to y-axis <25.000000> speed <45.000000>;
			turn rupleg1 to z-axis <0.000000> speed <97.000000>;
			turn rupleg2 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg3 to y-axis <0.000000> speed <45.000000>;
			turn rupleg3 to z-axis <32.500000> speed <67.000000>;
			turn lupleg1 to y-axis <0.000000> speed <45.000000>;
			turn lupleg1 to z-axis <-15.200000> speed <67.000000>;
			turn lupleg2 to y-axis <-25.000000> speed <45.000000>;
			turn lupleg2 to z-axis <0.000000> speed <97.000000>;
			turn lupleg3 to y-axis <25.000000> speed <95.000000>;
			turn rleg1 to z-axis <0.000000> speed <97.000000>;
			turn rleg3 to z-axis <9.147253> speed <67.000000>;
			turn lleg1 to z-axis <10.147253> speed <67.000000>;
			turn lleg2 to z-axis <0.000000> speed <97.000000>;
			sleep 450;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <-1.000000> speed <7.000000>;
			}
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to y-axis <11.247253> speed <45.000000>;
			turn rupleg2 to z-axis <10.147253> speed <25.000000>;
			turn rupleg3 to y-axis <8.100000> speed <32.000000>;
			turn rupleg3 to z-axis <10.147253> speed <25.000000>;
			turn lupleg1 to y-axis <9.100000> speed <32.000000>;
			turn lupleg1 to z-axis <9.147253> speed <25.000000>;
			turn lupleg2 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to y-axis <8.100000> speed <32.000000>;
			turn lupleg3 to z-axis <9.147253> speed <25.000000>;
			turn rleg2 to z-axis <-8.115385> speed <25.000000>;
			turn rleg3 to z-axis <-8.115385> speed <25.000000>;
			turn lleg1 to z-axis <8.115385> speed <25.000000>;
			turn lleg3 to z-axis <8.115385> speed <25.000000>;
			sleep 450;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <-1.000000> speed <2.000000>;
				turn base to y-axis <-1.000000> speed <4.000000>;
			}
			turn rupleg1 to y-axis <-25.000000> speed <95.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg2 to z-axis <32.500000> speed <67.000000>;
			turn rupleg3 to y-axis <25.000000> speed <45.000000>;
			turn rupleg3 to z-axis <0.000000> speed <97.000000>;
			turn lupleg1 to y-axis <-25.000000> speed <45.000000>;
			turn lupleg1 to z-axis <0.000000> speed <97.000000>;
			turn lupleg2 to y-axis <25.000000> speed <45.000000>;
			turn lupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg3 to z-axis <-15.200000> speed <67.000000>;
			turn rleg2 to z-axis <9.147253> speed <67.000000>;
			turn rleg3 to z-axis <0.000000> speed <97.000000>;
			turn lleg1 to z-axis <0.000000> speed <97.000000>;
			turn lleg3 to z-axis <10.147253> speed <67.000000>;
			sleep 450;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <4.000000>;
			turn base to y-axis <0.000000> speed <7.000000>;
			turn rupleg1 to y-axis <9.100000> speed <95.000000>;
			turn rupleg1 to z-axis <10.147253> speed <25.000000>;
			turn rupleg2 to y-axis <8.100000> speed <32.000000>;
			turn rupleg2 to z-axis <10.147253> speed <25.000000>;
			turn rupleg3 to y-axis <0.000000> speed <95.000000>;
			turn lupleg1 to y-axis <0.000000> speed <45.000000>;
			turn lupleg2 to y-axis <8.100000> speed <95.000000>;
			turn lupleg2 to z-axis <9.147253> speed <25.000000>;
			turn lupleg3 to y-axis <9.100000> speed <95.000000>;
			turn lupleg3 to z-axis <9.147253> speed <21.000000>;
			turn rleg1 to z-axis <-8.115385> speed <25.000000>;
			turn rleg2 to z-axis <-8.115385> speed <25.000000>;
			turn lleg2 to z-axis <8.115385> speed <25.000000>;
			turn lleg3 to z-axis <8.115385> speed <25.000000>;
			sleep 450;
		}
		if( bMoving )
		{
			turn base to x-axis <0.000000> speed <9.000000>;
			if( !bAiming )
			{
				turn base to y-axis <1.000000> speed <9.000000>;
			}
			turn rupleg1 to y-axis <0.000000> speed <32.000000>;
			turn rupleg1 to z-axis <32.500000> speed <67.000000>;
			turn rupleg2 to y-axis <25.000000> speed <32.000000>;
			turn rupleg2 to z-axis <0.000000> speed <97.000000>;
			turn rupleg3 to y-axis <-25.000000> speed <95.000000>;
			turn lupleg1 to y-axis <25.000000> speed <95.000000>;
			turn lupleg2 to y-axis <0.000000> speed <32.000000>;
			turn lupleg2 to z-axis <-15.200000> speed <67.000000>;
			turn lupleg3 to y-axis <-25.000000> speed <45.000000>;
			turn lupleg3 to z-axis <0.000000> speed <97.000000>;
			turn rleg1 to z-axis <9.147253> speed <67.000000>;
			turn rleg2 to z-axis <0.000000> speed <97.000000>;
			turn lleg2 to z-axis <10.147253> speed <67.000000>;
			turn lleg3 to z-axis <0.000000> speed <97.000000>;
			sleep 450;
		}
		if( bMoving )
		{
			if( !bAiming )
			{
				turn base to x-axis <1.000000> speed <4.000000>;
				turn base to y-axis <1.000000> speed <2.000000>;
			}
			turn rupleg1 to y-axis <8.100000> speed <45.000000>;
			turn rupleg1 to z-axis <10.147253> speed <25.000000>;
			turn rupleg2 to y-axis <0.000000> speed <95.000000>;
			turn rupleg3 to y-axis <9.100000> speed <32.000000>;
			turn rupleg3 to z-axis <10.147253> speed <21.000000>;
			turn lupleg1 to y-axis <8.100000> speed <32.000000>;
			turn lupleg1 to z-axis <9.147253> speed <21.000000>;
			turn lupleg2 to y-axis <9.100000> speed <32.000000>;
			turn lupleg2 to z-axis <9.147253> speed <21.000000>;
			turn lupleg3 to y-axis <0.000000> speed <32.000000>;
			turn rleg1 to z-axis <-8.115385> speed <25.000000>;
			turn rleg3 to z-axis <-8.115385> speed <25.000000>;
			turn lleg1 to z-axis <8.115385> speed <25.000000>;
			turn lleg2 to z-axis <8.115385> speed <25.000000>;
			sleep 450;
		}
	}
	turn base to x-axis <0.000000> speed <14.000000>;
	turn base to y-axis <0.000000> speed <2.000000>;
	turn rupleg1 to y-axis <0.000000> speed <32.000000>;
	turn rupleg1 to z-axis <0.000000> speed <21.000000>;
	turn rupleg2 to y-axis <0.000000> speed <32.000000>;
	turn rupleg2 to z-axis <0.000000> speed <21.000000>;
	turn rupleg3 to y-axis <0.000000> speed <32.000000>;
	turn rupleg3 to z-axis <0.000000> speed <21.000000>;
	turn lupleg1 to y-axis <0.000000> speed <32.000000>;
	turn lupleg1 to z-axis <0.000000> speed <21.000000>;
	turn lupleg2 to y-axis <0.000000> speed <32.000000>;
	turn lupleg2 to z-axis <0.000000> speed <21.000000>;
	turn lupleg3 to y-axis <0.000000> speed <32.000000>;
	turn lupleg3 to z-axis <0.000000> speed <21.000000>;
	turn lleg1 to z-axis <0.000000> speed <21.000000>;
	turn lleg2 to z-axis <0.000000> speed <21.000000>;
	turn lleg3 to z-axis <0.000000> speed <21.000000>;
	turn rleg1 to z-axis <0.000000> speed <21.000000>;
	turn rleg2 to z-axis <0.000000> speed <21.000000>;
	turn rleg3 to z-axis <0.000000> speed <21.000000>;
	sleep 450;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

RestoreAfterDelay()
{
	sleep 5000;
	set-signal-mask 0;
	turn sleeve to x-axis <0.000000> speed <36.000000>;
	turn turret to y-axis <0.000000> speed <30.000000>;
	bAiming = FALSE;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimPrimary(heading, pitch)
{
	bAiming = TRUE;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <40.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-1.50000] now;
	sleep 120;
	move barrel to z-axis [0.000000] speed [1.000000];
	sleep 100;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode barrel type NOHEATCLOUD | FALL;
		explode rleg1 type NOHEATCLOUD;
		explode rleg2 type NOHEATCLOUD;
		explode lleg3 type NOHEATCLOUD;
		explode lleg1 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | SHATTER;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode rleg2 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg3 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode lleg1 type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD;
	return (corpsetype);
}
