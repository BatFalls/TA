#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, flare, turret, dome, flak,
		back, front, rmsl1, rmsl2, lmsl1, lmsl2;

static-var  gun_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	gun_1 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 3500;
	move turret to y-axis [0.0] speed [2.0];
	turn turret to y-axis <0.00> speed <75.00>;
	turn turret to x-axis <0.00> speed <75.00>;
}

AimFromPrimary(PieceNum)
{
	PieceNum = turret;
}

AimPrimary(Heading, Pitch)
{
	signal 2;
	set-signal-mask 2;	
	move turret to y-axis [8.0] speed [24.0];
	turn turret to y-axis Heading speed <450.00>;
	turn turret to x-axis <0.00> - Pitch speed <300.00>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	Start-script RestoreAfterDelay();
	return(1);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(PieceNum)
{
	PieceNum = turret;
}

AimSecondary(Heading, Pitch)
{
	signal 4;
	set-signal-mask 4;	
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return(1);
}

FireSecondary()
{
	++gun_1;
	if (gun_1 == 4)
	{
		gun_1 = 0;
	}
}


QuerySecondary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = rmsl1;
	}
	if (gun_1 == 1)
	{
		piecenum = lmsl1;
	}
	if (gun_1 == 2)
	{
		piecenum = rmsl2;
	}
	if (gun_1 == 3)
	{
		piecenum = lmsl2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode flak type NOHEATCLOUD;
		explode dome type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | SHATTER;
		explode turret type NOHEATCLOUD | SHATTER;
		explode flak type FALL | BITMAP3;
		explode dome type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SHATTER;
	explode turret type NOHEATCLOUD | SHATTER;
	explode flak type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode dome type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	return (corpsetype);
}
