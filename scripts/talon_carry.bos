#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  pad, base, body, dish, w1, w2,
       w3, w4, w5, w6, w7, w8, w9, w10, anti, antinuke,
       w11, w12, wakes, land1, land2, land3;

RockOnWaves()
{
	while( TRUE )
	{
		turn base to x-axis <1.> speed <2.>;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <-1.> speed <2.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
		move base to y-axis [0.] speed [0.];
		wait-for-turn base around x-axis;
		turn base to x-axis <1.> speed <2.>;
		move base to y-axis [-0.] speed [0.];
		wait-for-move base along y-axis;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	spin dish around y-axis speed <60.>;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
	while( TRUE )
	{
		emit-sfx 3 from w1;
		emit-sfx 3 from w2;
		emit-sfx 3 from w3;
		emit-sfx 3 from w4;
		emit-sfx 3 from w5;
		emit-sfx 3 from w6;
		emit-sfx 3 from w7;
		emit-sfx 3 from w8;
		emit-sfx 3 from w9;
		emit-sfx 3 from w10;
		emit-sfx 3 from w11;
		emit-sfx 3 from w12;
		emit-sfx 5 from w1;
		emit-sfx 5 from w2;
		emit-sfx 5 from w3;
		emit-sfx 5 from w4;
		emit-sfx 5 from w5;
		emit-sfx 5 from w6;
		emit-sfx 5 from w7;
		emit-sfx 5 from w8;
		emit-sfx 5 from w9;
		emit-sfx 5 from w10;
		emit-sfx 5 from w11;
		emit-sfx 5 from w12;
		sleep 250;
	}
}

StopMoving()
{
	signal 2;
}



QueryLandingPad(Func_Var_1, Func_Var_2, Func_Var_3)
{
	Func_Var_1 = 25;
	Func_Var_2 = 26;
	Func_Var_3 = 27;
}

AimPrimary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	return (1);
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

AimFromPrimary(piecenum)
{
	piecenum = anti;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode dish type NOHEATCLOUD;
		explode pad type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD;
		explode dish type SHATTER;
		explode pad type FALL;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode dish type SHATTER;
	explode pad type FALL;
	return (corpsetype);
}
